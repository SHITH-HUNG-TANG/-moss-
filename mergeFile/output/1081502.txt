#include<iostream>
#include<stdexcept>
#include"s1081502_MyArray.h"
using namespace std;

template<typename T>
MyArray<T>::MyArray(int r_Capacity)
{
	size = 0;
	capacity = r_Capacity;
	ptr = new T[capacity]();
}
template<typename T>
MyArray<T>::MyArray(int Size, T value)
{
	size = Size;
	capacity = size;
	ptr = new T[capacity]();
	for (int i = 0; i < size; i++)
	{
		ptr[i] = value;
	}
}
template<typename T>
MyArray<T>::MyArray(T* value, int Size)
{
	size = Size;
	capacity = 10;
	while (size > capacity)
	{
		reserve(capacity * 2);
	}
	ptr = new T[capacity]();
	for (int i = 0; i < size; i++)
	{
		ptr[i] = value[i];
	}
}
template<typename T>
MyArray<T>::MyArray(const MyArray& MyArrayToCopy)
{
	size = MyArrayToCopy.size;
	capacity = MyArrayToCopy.capacity;
	ptr = new T[capacity];

	for (int i = 0; i < size; i++)
		ptr[i] = MyArrayToCopy.ptr[i];
}
template<typename T>
MyArray<T>::~MyArray()
{
	delete[] ptr;
}
template<typename T>
const MyArray<T>& MyArray<T>::operator=(const MyArray& right)
{
	if (&right != this)
	{
		if (size != right.size)
		{
			delete[] ptr;
			size = right.size;
			capacity = right.capacity;
			ptr = new T[size];
		}
		for (int i = 0; i < size; i++)
			ptr[i] = right.ptr[i];
	}
	return *this;
}
template<typename T>
bool MyArray<T>::operator==(const MyArray& right)const
{
	if (size != right.size)
		return false;
	else
	{
		for (int i = 0; i < size; i++)
		{
			if (ptr[i] != right.ptr[i])
				return false;
		}
		return true;
	}
}
template<typename T>
bool MyArray<T>::operator!=(const MyArray& right)const
{
	return !(*this == right);
}
template<typename T>
MyArray<T> MyArray<T>::operator+(const MyArray& right)const
{
	MyArray<T> a(*this);
	a.resize(a.size + right.size);
	for (int i = a.size - right.size, j = 0; i < a.size; i++, j++)
	{
		a.ptr[i] = right.ptr[j];
	}
	return a;
}
template<typename T>
MyArray<T>& MyArray<T>::operator+=(const MyArray& right)
{
	resize(size + right.size);
	for (int i = size - right.size, j = 0; i < size; i++, j++)
	{
		ptr[i] = right.ptr[j];
	}
	return *this;
}
template<typename T>
T& MyArray<T>::operator[](int subscript)
{
	return ptr[subscript];
}
template<typename T>
T MyArray<T>::operator[](int subscript)const
{
	return ptr[subscript];
}
template<typename T>
T& MyArray<T>::at(int right)
{
	if (right > size - 1)
	{
		throw out_of_range("");
	}
	else
	{
		return ptr[right];
	}
}
template<typename T>
T MyArray<T>::at(int right)const
{
	if (right > size - 1)
	{
		throw out_of_range("");
	}
	else
	{
		return ptr[right];
	}
}
template<typename T>
int MyArray<T>::getSize() const {
	return size;
}
template<typename T>
int MyArray<T>::getCapacity() const {
	return capacity;
}
template<typename T>
void MyArray<T>::resize(size_t n, T c)
{
	while (n > capacity)
		reserve(capacity * 2);
	if (n > size)
		for (int i = size; i < n; i++)
			ptr[i] = c;
	size = n;
}
template<typename T>
void MyArray<T>::reserve(size_t r_Capacity)
{
	if (r_Capacity > capacity)
	{
		T* temp = new T[r_Capacity]();
		for (int i = 0; i < size && i < r_Capacity; i++)
			temp[i] = ptr[i];
		capacity = r_Capacity;

		delete[] ptr;
		ptr = temp;
	}
}
template<typename T>
void MyArray<T>::shrink_to_fit()
{
	T* temp = new T[size]();
	for (int i = 0; i < size; i++)
		temp[i] = ptr[i];
	capacity = size;

	delete[] ptr;
	ptr = temp;
}
template<typename T>
void MyArray<T>::clear()
{
	size = 0;
}
template<typename T>
bool MyArray<T>::isEmpty()
{
	if (size == 0)
	{
		return true;
	}
	else
	{
		return false;
	}
}#pragma once
#ifndef S1081502_MYARRAY_H
#define S1081502_MYARRAY_H
#include<iostream>
#include<string>
using namespace std;

template<typename T>
class MyArray {	//modify this class into a template class
	friend ostream& operator<<(ostream& output, const MyArray& a)
	{
		int max = a.size;
		for (int i = 0; i < max; i++)
		{
			output << a.ptr[i] << " ";
		}
		return output;
	}
	friend istream& operator>>(istream& input, MyArray& a)
	{
		string str;
		getline(input, str);
		a.resize(str.size(), '\0');
		while (a.getSize() > a.getCapacity())
		{
			a.reserve(a.getCapacity() * 2);
		}
		for (int i = 0; i < a.getSize(); i++)
		{
			a[i] = str[i];
		}
		return input;
	}
	//friend istream& operator>>(istream&, MyArray&);
public:
	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(T* value, int Size);
	MyArray(const MyArray&);
	~MyArray();

	const MyArray& operator=(const MyArray&);
	bool operator==(const MyArray&) const;
	bool operator!=(const MyArray&) const;
	MyArray operator+(const MyArray&) const;	//new
	MyArray& operator+=(const MyArray&);		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t size, T item = '\0');
	void reserve(size_t size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

private:
	int size;
	int capacity;
	T* ptr;
};
#endif // !MyArray
#include<iostream>
#include<cstdint>
#include<string>
#include"s1081502_MyString.h"
using namespace std;

MyString::MyString()
	:MyArray(){
}
MyString::MyString(const MyString& str)
	:MyArray(str){
}
MyString::MyString(const MyString& str, size_t pos, size_t len)
{
	size_t newsize = 0;
	if (len == msize)
	{
		newsize = str.getSize() - pos;
	}
	else
	{
		newsize = len;
	}
	MyString newstr(str);
	resize(newsize);
	while (newsize > getCapacity())
	{
		reserve(getCapacity()*2);
	}
	for (int i = pos,j = 0; i < newsize + pos; i++, j++)
	{
		this->operator[](j) = newstr[i];
	}
}
MyString::MyString(const char* s)
{
	int newsize = 0;
	while (s[newsize] != '\0') {
		newsize++;
	}
	resize(newsize);
	while (newsize > getCapacity())
	{
		reserve(getCapacity() * 2);
	}
	for (int i = 0; i < newsize; i++)
	{
		this->operator[](i) = s[i];
	}
}
MyString::~MyString(){
}
MyString& MyString::append(const MyString& str)
{
	*this += str;
	return *this;
}
MyString MyString::substr(size_t pos, size_t len) const
{
	MyString mystr(*this);
	MyString newstr;
	size_t newsize = 0;
	if (len == msize)
	{
		newsize = getSize() - pos;
	}
	else
	{
		newsize = len;
	}
	newstr.resize(newsize);
	for (int i = pos,j = 0; i < newsize + pos; i++, j++)
	{
		newstr[j] = mystr[i];
	}
	return newstr;
}
MyString& MyString::insert(size_t pos, const MyString& str)
{
	MyString mystr(*this);
	MyString newstr;
	int mysize = getSize();
	int frontsize = pos;
	int backsize = mysize - pos;
	int newsize = 0;
	newsize = str.getSize();
	newstr.resize(newsize + getSize());
	int position = 0;
	for (int i = 0; i < frontsize; i++)
	{
		newstr[i] = mystr[i];
		++position;
	}
	for (int i = 0; i < newsize; i++)
	{
		newstr[position] = str[i];
		++position;
	}
	for (int i = pos; i < backsize + pos ; i++)
	{
		newstr[position] = mystr[i];
		++position;
	}
	*this = newstr;
	return *this;
}
MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen)
{
	MyString mystr(*this);
	MyString newstr;
	MyString tempstr;
	tempstr = str.substr(subpos, sublen);
	int mysize = getSize();
	int frontsize = pos;
	int backsize = mysize - pos;
	int newsize = 0;
	newsize = tempstr.getSize();
	newstr.resize(newsize + getSize());
	int position = 0;
	for (int i = 0; i < frontsize; i++)
	{
		newstr[i] = mystr[i];
		++position;
	}
	for (int i = 0; i < newsize; i++)
	{
		newstr[position] = tempstr[i];
		++position;
	}
	for (int i = pos; i < backsize + pos; i++)
	{
		newstr[position] = mystr[i];
		++position;
	}
	*this = newstr;
	return *this;
}
MyString& MyString::erase(size_t pos, size_t len)
{
	MyString mystr(*this);
	MyString newstr;
	int newsize = 0;
	if (len == msize)
	{
		newsize = pos;
		newstr.resize(newsize);
		for (int i = 0; i < pos; i++)
		{
			newstr[i] = mystr[i];
		}
	}
	else
	{
		newsize = getSize() - len;
		newstr.resize(newsize);
		int position = 0;
		for (int i = 0; i < pos; i++)
		{
			newstr[i] = mystr[i];
			++position;
		}
		for (int i = pos+len; i < getSize(); i++)
		{
			newstr[position] = mystr[i];
			++position;
		}
	}
	*this = newstr;
	return *this;
}
size_t MyString::find(const MyString& str, size_t pos) const
{
	MyString mystr(*this);
	int newsize = str.getSize();
	bool haveans = 0;
	int ans = 0;
	int position = 0;
	for (int i = pos; i < getSize(); i++)
	{
		position = i;
		if (str[0] == mystr[i] && haveans == 0)
		{
			for (int j = 0; j < newsize; j++)
			{
				if (j == newsize - 1 && str[j] == mystr[position])
				{
					ans = position - newsize + 1;
					haveans = 1;
				}
				if (str[j] != mystr[position])
				{
					break;
				}
				++position;
			}
		}
	}
	if (haveans == 0)
	{
		ans = msize;
	}
	return ans;
}
size_t MyString::find_first_of(const MyString& str, size_t pos) const
{
	MyString mystr(*this);
	int newsize = str.getSize();
	bool haveans = 0;
	int ans = 0;
	for (int i = pos; i < getSize(); i++)
	{
		if (haveans == 1)
		{
			break;
		}
		for (int j = 0; j < newsize; j++)
		{
			if (mystr[i] == str[j])
			{
				ans = i;
				haveans = 1;
			}
		}
	}
	if (haveans == 0)
	{
		ans = msize;
	}
	return ans;
}



#ifndef S1081502_MyString_H
#define S1081502_MyString_H
#include <iostream>
#include"s1081502_MyArray.cpp"
//#include "XXXXXXXXXX.h"
using namespace std;

class MyString : public MyArray<char>
{
	friend ostream& operator<<(ostream& output, const MyString& a)
	{
		int max = a.getSize();
		for (int i = 0; i < max; i++)
		{
			output << a[i];
		}
		return output;
	}
	//friend ostream &operator<<(ostream& output, const MyString& str);

public:
	MyString(); 
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString( const MyString &str ); 
	// Constructs a copy of "str". (copy constructor)

	MyString( const MyString &str, size_t pos, size_t len = msize ); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString( const char *s ); 
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString(); 
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append( const MyString &str ); 
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert( size_t pos, const MyString &str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert( size_t pos, const MyString &str, size_t subpos, size_t sublen = msize );
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase( size_t pos, size_t len = msize ); 
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find( const MyString &str, size_t pos = 0 ) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of( const MyString &str, size_t pos = 0 ) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif