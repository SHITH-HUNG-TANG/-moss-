#include<iostream>
using namespace std;



template<typename T>
class MyArray {

	class out_of_range : public logic_error
	{
	public:
		explicit out_of_range(const string& what_arg);
		explicit out_of_range(const char* what_arg);
	};


	friend ostream& operator<<(ostream& output, const MyArray& value) {
		for (int i = 0; i < value.size; i++) {
			output << value.data[i] << " ";
		}
		return output;
	}
public:
	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(const MyArray&);
	~MyArray();

	const MyArray& operator=(const MyArray&);
	bool operator==(const MyArray&) const;
	bool operator!=(const MyArray&) const;
	MyArray operator+(const MyArray&) const;	//new
	MyArray& operator+=(const MyArray&);		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t size, T item);
	void reserve(size_t size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

private:
	int size;
	int capacity;
	T* data;
};

template<typename T>
MyArray<T>::MyArray(int  value) {
	capacity = value;
	size = 0 ;
	data = new T[capacity]();
}
template<typename T>
MyArray<T>::MyArray(int  Size, T value) {
	if (size < 0) {
		size = 0 ;
		capacity = 10;
		data = new T[capacity]();
	}
	else {
		size = Size;
		capacity = 10;
		while (size > capacity) {
			capacity *= 2;
		}
		data = new T[capacity]();
		for (int i = 0; i < size; i++) {
			data[i] = value;
		}
	}
}

template<typename T>
MyArray<T>::MyArray(const MyArray<T>& value) {
	size = value.size;
	capacity = value.capacity;
	data = new T[capacity]();
	for (int i = 0; i < size; i++) {
		data[i] = value.data[i];
	}
}

template<typename T>
MyArray<T>::~MyArray() {
	delete[] data;
}

template<typename T>
const MyArray<T>& MyArray<T>::operator = (const MyArray<T>& value) {
	size = value.size;
	capacity = value.capacity;
	delete[]data;
	data = new T[capacity]();
	for (int i = 0; i < size; i++) {
		data[i] = value.data[i];
	}
	return (*this);
}

template<typename T>
bool  MyArray<T>::operator == (const MyArray<T>& value)const {
	if (size != value.size) {
		return false;
	}
	else {
		for (int i = 0; i < size; i++) {
			if (data[i] != value.data[i]) {
				return false;
			}
		}
		return true;
	}
}

template<typename T>
bool   MyArray<T>::operator!=(const MyArray<T>& value)const {
	if (size != value.size) {
		return true;
	}
	else {
		for (int i = 0; i < (size > value.size ? size : value.size); i++) {
			if (data[i] != value.data[i]) {
				return true;
			}
		}
		return false;
	}
}

template<typename T>
MyArray<T> MyArray<T>:: operator+(const MyArray<T>& value) const {

	MyArray temp(value.size + (*this).size, '\0');				//new 新空間

	for (int i = 0; i < (*this).size; i++) {										// 放前者的字串
		temp.data[i] = (*this).data[i];
	}
	for (int i = (*this).size, j = 0; i < temp.size; i++, j++) {			// 放後者的字串
		temp.data[i] = value.data[j];
	}
	return temp;
}
template<typename T>
MyArray<T>& MyArray<T>:: operator+= (const MyArray<T>& value) {
	int old = (*this).size;
	(*this).resize((*this).size + value.size, '\0');
	for (int i = old, j = 0; i < (*this).size; i++, j++) {
		(*this).data[i] = value.data[j];
	}
	return *this;
}

//reset size
template<typename T>
void MyArray<T>::resize(size_t N, T c) {
	int tempcapacity = capacity;
	if (N > capacity) {
		while (N > tempcapacity) {
			tempcapacity *= 2;
		}
		reserve(tempcapacity);
		for (int i = (*this).size; i < N; i++) {
			(*this).data[i] = c;
		}
		(*this).size = N;
	}
	else {
		for (int i = (*this).size; i < N; i++) {
			(*this).data[i] = c;
		}
		(*this).size = N;
	}
}

template<typename T>
// reset capacity
void MyArray<T>::reserve(size_t N) {
	MyArray temp;

	if (N > capacity) {
		temp.capacity = N;
	}
	else {
		temp.capacity = capacity;
	}

	temp.data = new T[temp.capacity]();
	temp.size = size;
	for (std::size_t n = 0; n < size; n++) {
		temp.data[n] = data[n];
	}
	(*this) = temp;
}

template<typename T>
//return size
int MyArray<T>::getSize()const {
	return size;
}

template<typename T>
//return capacity
int MyArray<T>::getCapacity()const {
	return capacity;
}

template<typename T>
T& MyArray<T>::operator[](int value) {
	return data[value];
}

template<typename T>
T MyArray<T>:: operator[](int value)const {
	return data[value];
}

template<typename T >
T& MyArray<T>::at(int value) {
	if (value < size) {
		return data[value];
	}
	else {
		throw  std::out_of_range(" Out of range!!");
	}
}

template<typename T>
T MyArray<T>::at(int  value) const {
	if (value < size) {
		return data[value];
	}
	else {
		throw  std::out_of_range(" Out of range!!");
	}
}

template<typename T>
void MyArray<T>::shrink_to_fit() {
	capacity = size;
}

template<typename T >
void MyArray<T>::clear() {
	delete[]data;
	size = 1;
	data = new T[size]();
}

template<typename T>
bool MyArray<T>::isEmpty() {

	for (int i = 0; i < size; i++) {
		if (data[i] != '\0') {
			return false;
		}
	}
	return true;
}
#include "s1083337_MyString.h"

MyString::MyString() {
	(*this).resize(1, '\0');
}

MyString::MyString(const MyString& str) {

	resize(str.getSize(), '\0');
	for (int i = 0; i < getSize(); i++) {
		(*this)[i] = str[i];
	}
}
MyString::MyString(const MyString& str, size_t pos, size_t len ) {
 
	(*this).resize(len, '\0');
	size_t x = pos + len;
	for (int i = 0 ; pos <  x ;  i++, pos++) {
		(*this)[i] = str[pos];
	}
}
MyString::MyString(const char* s) {
	int len = 0;
	while (s[len] != '\0') {
		len++;
	}
	(*this).resize(len, '\0');
	for (int i = 0; i < len; i++) {
		(*this)[i] = s[i];
	}
}
MyString::~MyString() {
	(*this).resize(0, '\0');
}

MyString& MyString ::append(const MyString& str) {

	int w = (*this).getSize();
	if (w == 1) {
		w = 0 ;
	}
	(*this).resize((*this).getSize() + str.getSize() , '\0');
	for (int j = 0 ;  j < str.getSize(); j++, w++) {
		(*this)[w] = str[j];
	}
	return (*this);
}
MyString MyString :: substr (size_t pos, size_t len ) const {
		MyString temp;
		temp.resize(len, '\0');
		for (int i = pos, k = 0; i < (pos + len); i++, k++) {
			temp[k] = (*this)[i];
		}
		return temp;
}

MyString& MyString::insert(size_t pos, const MyString& str) {

	MyString after;
	after.resize((*this).getSize() - pos  , '\0');

	for (int i = pos , k = 0 ; k < after.getSize(); i++, k++) {			//存放後半部的字串
		after[k] = (*this)[i];
	}

	(*this).resize((*this).getSize() + str.getSize(), '\0');

	for (int i = pos , k = 0 ; k < str.getSize() ; i++, k++) {
		(*this)[i] = str[k];
	}
	for (int i = pos + str.getSize() , k = 0; k < after.getSize(); i++, k++) {
		(*this)[i] = after[k];
	}
	return (*this);
}
MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen ) {

	
	MyString after;
	after.resize((*this).getSize() - pos, '\0');
	
	for (int i = pos, k = 0 ; k <after.getSize(); i++, k++) {			//存放後半部的字串
		after[k] = (*this)[i];
	}

	MyString sub;
	sub.resize(sublen, '\0');
	sub = str.substr(subpos, sublen);
	(*this).resize((*this).getSize() +sub.getSize(), '\0');

	for (int i = pos, k = 0; k < sub.getSize() ; i++, k++) {
		(*this)[i] = sub[k];
	}
	for (int i = pos +sublen , k = 0; k < after.getSize(); i++, k++) {
		(*this)[i] = after[k];
	}
	return (*this);
}
MyString& MyString::erase(size_t pos, size_t len ) {

	MyString temp;
	if (len > ((*this).getSize() - pos)) {
		temp.resize( pos , '\0');
	}
	else
	{
	temp.resize((*this).getSize() - len, '\0');
	}
	int r = 0;
	for (int i = 0; i < pos; i++,r++) {
		temp[r] = (*this)[i];
	}
	for (int i = pos + len; i < (*this).getSize(); i++,r++) {
		temp[r] = (*this)[i];
	}
	(*this) = temp;
	return (*this);
}
size_t MyString::find(const MyString& str, size_t pos ) const {

	int flag  ;
	int ans;
	for (int i = pos , x = 0 ; i < (*this).getSize(); i++) {
		x = 0 ;
		flag = 0;
		if ((*this)[i] == str[x]) {											//遇到頭一樣的時候
			ans = i ;															//ans 先放 位置 
			MyString temp;
			temp.resize(str.getSize(), '\0');
			temp = (*this).substr( i , str.getSize());
			for (int k = 0; k < str.getSize(); k++) {
				if (temp[k] != str[k]) {
					flag = 1;
					break;
				}
			}
			if (flag == 0) {
				return ans;
			}
		}
	}
	return msize;
}

size_t MyString :: find_first_of(const MyString& str, size_t pos ) const {
	
	for (int i = pos; i < (*this).getSize(); i++) {
		for (int k = 0; k < str.getSize(); k++) {
			if ((*this)[i] == str[k]) {
				return i ;
			}
		}
	}
	return msize;
}
istream& operator>>(istream& input, MyString& value) {

	string str;
	input >> str;
	value.resize(str.size(), '\0');
	for (int i = 0; i < value.getSize(); i++) {
		value[i] = str[i];
	}
	return input;
}#ifndef MyString_H
#define  MyString_H
#include <iostream>
#include "s1083337_MyArray.h"

using namespace std;


class MyString : public MyArray<char>
{
	friend ostream& operator<<(ostream& output, const MyString& str) {
			for (int i = 0; i < str.getSize() ; i++) {
				output << str[i];
			}
			return output;
	}
	friend istream& operator>>(istream&, MyString&);

public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString& str);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString& str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char* s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString& str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString& str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString& str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.


	//You may add several helper functions or operators here
	//...
}; // end class MyString



#endif