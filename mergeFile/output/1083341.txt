#ifndef s1083341_H
#define s1083341_H
#include<iostream>
#include <stdexcept>
using namespace std;

class Error : public exception
{
public:
	Error() :exception("out of range") {};
};
template<typename T>
class MyArray : public Error
{
	template<typename T>
	friend ostream& operator<<(ostream&, const MyArray<T>&);
	//friend istream& operator>>(istream&, MyArray&);
public:
	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(const MyArray<T>&);
	~MyArray();

	const MyArray& operator=(const MyArray<T>&);
	bool operator==(const MyArray<T>&) const;
	bool operator!=(const MyArray<T>&) const;
	MyArray operator+(const MyArray<T>&) const; //new
	MyArray& operator+=(const MyArray<T>&);  //new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);  //new
	T at(int) const; //new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t size, T item);
	void reserve(size_t size);
	void shrink_to_fit(); //new
	void clear();   //new
	bool isEmpty();   //new

private:
	int size;
	int capacity;
	T* data;
};



template<typename T>
ostream& operator<< (ostream& output, const MyArray <T>& x)
{
	for (int i = 0; i < x.size; i++)
	{
		output << x.data[i];
		cout << " ";
	}
	return output;
}

template<typename T>
MyArray<T>::MyArray(int arraySize)
{
	capacity = (arraySize > 0 ? arraySize : 10);
	//size = capacity;
	size = 0;
	data = new T[capacity]();
	for (int i = 0; i < size; i++)
		data[i] = 0;
}

template<typename T>
MyArray<T>::MyArray(int Size, T value) {
	data = new T[Size];
	for (int i = 0; i < Size; i++) {
		data[i] = value;
	}
	size = Size;
	capacity = 10;
	while (Size > capacity) {
		capacity *= 2;
	}
}
template<typename T>
MyArray<T>::MyArray(const MyArray<T>& arrayToCopy)
{
	capacity = arrayToCopy.capacity;
	size = arrayToCopy.size;
	data = new T[capacity]();
	for (int i = 0; i < size; i++)
		data[i] = arrayToCopy.data[i];
}

template<typename T>
MyArray<T>::~MyArray()
{
	delete[]data;
}

template<typename T>
const MyArray<T>& MyArray<T>::operator=(const MyArray<T>& right)
{
	if (&right != this)
	{
		if (size != right.size)
		{
			delete[]data;
			capacity = right.capacity;
			size = right.size;
			data = new T[right.capacity];
		}
		for (int i = 0; i < size; i++)
			data[i] = right.data[i];
	}
	return *this;
}
template<typename T>
bool MyArray<T>::operator==(const MyArray<T>& right) const
{
	if (size != right.size)
		return false;
	for (int i = 0; i < size; i++) {
		if (data[i] != right.data[i])
			return false;
	}
	return true;
}

template<typename T>
bool MyArray<T>::operator!=(const MyArray<T>& right) const
{
	return !(*this == right);
}

template<typename T>
MyArray<T> MyArray<T>::operator+(const MyArray<T>& right) const {
	MyArray<T> ans;
	int inheritancesize = size + right.size;
	ans.resize(inheritancesize, '0');

	for (int i = 0; i < size; i++) {
		ans.data[i] = data[i];
	}
	for (int i = size; i < inheritancesize; i++) {
		ans.data[i] = right.data[i - size];
	}
	return ans;
}

template<typename T>
MyArray<T>& MyArray<T>:: operator+=(const MyArray<T>& right) {
	MyArray<T> ans;
	int inheritancesize = size + right.size;
	ans.resize(inheritancesize, '0');

	for (int i = 0; i < size; i++) {
		ans.data[i] = data[i];
	}
	for (int i = size; i < inheritancesize; i++) {
		ans.data[i] = right.data[i - size];
	}
	*this = ans;
	return *this;//因為改變自己 所以要回傳this
}

template<typename T>
T& MyArray<T>::operator[](int subscript)
{
	if (subscript < 0 || subscript >= size)
	{
		cerr << "\nError: Subscript " << subscript << " out of range" << endl;
		exit(1);
	}
	return data[subscript];
}

template<typename T>
T MyArray<T>::operator[](int subscript) const
{
	if (subscript < 0 || subscript >= size)
	{
		cerr << "\nError: Subscript " << subscript << " out of range" << endl;
		exit(1);
	}
	return data[subscript];
}

template<typename T>
T& MyArray<T>::at(int subscript) {
	if (subscript < 0 || subscript >= size)
	{
		throw Error();
	}
	else
		return data[subscript];
}

template<typename T>
T MyArray<T>::at(int subscript) const {
	if (subscript < 0 || subscript >= size)
	{
		throw Error();
	}
	else
		return data[subscript];
}

template<typename T>
int MyArray<T>::getSize()const
{
	return size;
}

template<typename T>
int MyArray<T>::getCapacity()const
{
	return capacity;
}

template<typename T>
void MyArray<T>::resize(size_t n, T item) //change size
{
	/*if (n > capacity)
	{
		reserve(2 * capacity);
		if (n > capacity) {
			reserve(n);
		}
	}*/
	while (n > capacity)
	{
		reserve(2 * capacity);
	}
	for (int i = size; i < n; i++)
	{
		data[i] = item;
	}
	size = n;
}

template<typename T>
void MyArray<T>::reserve(size_t n) //change capacity
{
	T* x = new T[n]();
	for (int i = 0; i < size; i++)
	{
		x[i] = data[i];
	}
	delete[]data;
	data = x;
	capacity = n;
}

template<typename T>
void MyArray<T>::shrink_to_fit()
{
	capacity = size;
}

template<typename T>
void MyArray<T>::clear() {
	size = 0;
	capacity = 0;
}

template<typename T>
bool MyArray<T>::isEmpty() {
	if (size == 0) {
		return true;
	}
	else {
		return false;
	}
}

#endif // !MyArray
#include <iostream>
#include<string>
#include<iomanip>
#include<cstdlib>
#include <limits.h>
#include "MyString.h"
using namespace std;

istream& operator>>(istream& input, MyString& str) {

	string temp;
	input >> temp;
	str.resize(temp.length(), '\0');
	for (int i = 0; i < str.getSize(); i++) {
		str[i] = temp[i];
	}
	return input;
}
MyString::MyString() 
	:MyArray()
{
}
MyString::MyString(const MyString& str)
	: MyArray(str)
{
}
MyString::MyString(const MyString& str, size_t pos, size_t len )
	:MyArray(len,'\0')
{

	for (int i = 0; i < len; i++) {
		operator[](i) = str.operator[](i+pos);
	}
}
MyString::MyString(const char* s)
{
	int n = 0;
	while (true) {
		if (s[n] == '\0')
			break;
		n++;
	}
	this->resize(n, '\0');
	for (int i = 0; i < n; i++) {
		operator[](i) = s[i];
	}
}
MyString::~MyString() 	
{
}
MyString& MyString::append(const MyString& str)
{
	MyString ans;
	int inheritancesize = getSize() + str.getSize();
	ans.resize(inheritancesize, '0');
	for (int i = 0; i < getSize(); i++) {
		ans.operator[](i) = operator[](i);
	}
	for (int i = getSize(); i < inheritancesize; i++) {
		ans.operator[](i) = str.operator[](i-getSize());
	}
	*this = ans;
	return *this;
}
MyString MyString::substr(size_t pos, size_t len) const
{
	MyString ans;
	ans.resize(len, '0');
	int k = pos;
	for (int i = 0; i < len; i++) {
		ans.operator[](i) = operator[](k);
		k++;
	}
	return ans;
}
MyString& MyString::insert(size_t pos, const MyString& str)
{
	MyString ans;
	int inheritancesize = getSize() + str.getSize();
	ans.resize(inheritancesize, '0');

	for (int j = 0; j < pos; j++) {
		ans.operator[](j) = operator[](j);
	}
	int k = pos;
	for (int i = 0; i < str.getSize(); i++) {
		ans.operator[](k) = str.operator[](i);
		k++;
	}
	int z = pos;
	for (int x = pos + str.getSize(); x < inheritancesize; x++) {
		ans.operator[](x) = operator[](z);
		z++;
	}
	*this = ans;
	return *this;
}
MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen)
{
	MyString ans;
	int inheritancesize = getSize() + sublen;
	ans.resize(inheritancesize, '0');
	
	for (int j = 0; j < pos; j++) {
		ans.operator[](j) = operator[](j);
	}
	int k = pos;
	int r = subpos;
	for (int i = 0; i < sublen; i++) {
		ans.operator[](k) = str.operator[](r);
		k++;
		r++;
		}
	int z = pos;
	for (int x = pos + sublen; x < inheritancesize; x++) {
		ans.operator[](x) = operator[](z);
		z++;
	}
	*this = ans;
	return *this;
}
MyString& MyString::erase(size_t pos, size_t len)
{
	MyString ans;
	int inheritancesize = getSize() - len;
	ans.resize(inheritancesize, '0');
	int j = 0;
	for (int i = 0; i < pos; i++) {
		ans.operator[](i) = operator[](i);
		j++;
	}
	for (int k = pos + len; k < getSize(); k++) {
		ans.operator[](j) = operator[](k);
		j++;
	}
	*this = ans;
	return *this;
}
size_t MyString::find(const MyString& str, size_t pos) const
{
	int test = 0;
	int inheritancesize = getSize() - str.getSize();
	char first = str.operator[](0);
	
	for (int i = 0; i < inheritancesize; i++) {
		test = 0;
		if (operator[](i) == first) {
			for (int k = 0; k < str.getSize(); k++) {
				if (operator[](i + k) == str.operator[](k)) {
					test = 1;
				}
			}
			if (test == 1) {
				return i;
			}
		}
	}
	return -1;
}
size_t MyString::find_first_of(const MyString& str, size_t pos) const
{
	int inheritancesize = getSize() - str.getSize();
	char first = str.operator[](0);

	for (int i = 0; i < inheritancesize; i++) {
		for (int k = 0; k < str.getSize(); k++) {
			if (operator[](i) == str.operator[](k)) {
				return i;
			}
		}
	}
	return -1;
}



#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include "Myarray.h"
using namespace std;


class MyString : public MyArray<char>
{
	friend istream &operator>>(istream& input, MyString& str);
	
public:
	
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10
	
	MyString(const MyString& str);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString& str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char* s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString& str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString& str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString& str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif
