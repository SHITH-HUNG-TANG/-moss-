#include "s1083311_MyArray.h"
#include <string>

template<typename T>
MyArray<T>::MyArray(int cap)
{
	size = 0;
	capacity = cap;
	data = new T[capacity]();

}

template<typename T>
MyArray<T>::MyArray(int space, T value)
{
	size = space;
	capacity = 10;
	resize(size, T());
	data = new T[capacity]();
	for (int i = 0; i < size; i++)
		data[i] = value;

}

template<typename T>
MyArray<T>::MyArray()
{
	size = 0;
	capacity = 10;
	data = new T[capacity]();
}

template<typename T>
MyArray<T>::MyArray(const MyArray<T>& arrayToCopy)
{
	size = arrayToCopy.size;
	capacity = arrayToCopy.capacity;
	data = new T[size]();
	for (int i = 0; i < size; i++)
		data[i] = arrayToCopy.data[i];

}

template<typename T>
MyArray<T>::~MyArray()
{
	delete[] data;
}

template<typename T>
const MyArray<T>& MyArray<T>::operator=(const MyArray<T>& right)
{
	if (&right != this) //判斷是否為同個class
	{
		if (size != right.size)
		{
			delete[] data; //release space
			size = right.size;  //resize the object
			capacity = right.capacity;
			data = new T[size]();
		}
		capacity = right.capacity;
		for (int i = 0; i < size; i++)
			data[i] = right.data[i]; //copy 
	}
	return *this;
}

template<typename T>
bool MyArray<T>::operator==(const MyArray<T>& right) const
{
	if (size == right.size)
	{
		for (int i = size - 1; i >= 0; i--)
		{
			if (data[i] != right.data[i])
				return false;
		}
		return true;
	}
	else
		return false;
}

template<typename T>
bool MyArray<T>::operator!=(const MyArray<T>& right) const
{
	return !(*this == right);
}

template<typename T>
MyArray<T> MyArray<T>::operator+(const MyArray<T>& right) const
{
	MyArray <T> sum;
	delete[] sum.data;
	sum.size = size + right.size;
	sum.data = new T[sum.size]();
	for (int i = 0; i < size; i++)
		sum[i] = data[i];
	for (int i = size; i < sum.size; i++)
		sum[i] = right.data[i - size];

	return sum;

}

template<typename T>
MyArray<T>& MyArray<T>::operator+=(const MyArray<T>& right)
{
	MyArray <T> temp;
	temp = *this;
	size += right.size;
	delete[] data;
	data = new T[size]();
	for (int i = 0; i < size; i++)
		data[i] = temp.data[i];
	for (int i = temp.size; i < size; i++)
		data[i] = right.data[i - temp.size];

	resize(size, T());
	return *this;
}

template<typename T>
T& MyArray<T>::operator[](int subscript)
{
	//check for subscript out-of-range error
	if (subscript < 0 || subscript >= size)
	{
		cout << "\nError: Subscript " << subscript << " Out of Range" << endl;
		exit(1);
	}
	return data[subscript];
}

template<typename T>
T MyArray<T>::operator[](int subscript) const
{
	//check for subscript out-of-range error
	if (subscript < 0 || subscript >= size)
	{
		cout << "\nError: Subscript " << subscript << " Out of Range" << endl;
		exit(1);
	}
	return data[subscript];
}

template<typename T>
T& MyArray<T>::at(int subscript)
{
	//check for subscript out-of-range error
	if (subscript < 0 || subscript >= size)
	{
		throw outOfRange();
	}
	return data[subscript];
}

template<typename T>
T MyArray<T>::at(int subscript) const
{
	//check for subscript out-of-range error
	if (subscript < 0 || subscript >= size)
	{
		throw outOfRange();
	}
	return data[subscript];
}
template<typename T>
int MyArray<T>::getSize() const
{
	return size;
}

template<typename T>
int MyArray<T>::getCapacity() const
{
	return capacity;
}

template<typename T>
void MyArray<T>::resize(size_t n, T item)
{	
	while (capacity < n)
		reserve(capacity * 2);

	if (n < size)
		size = n;
	else if (n > size)
	{
		MyArray <T> temp;
		temp = *this;
		delete[] data;
		size = n;
		data = new T[size]();
		for (int i = 0; i < temp.size; i++)
			data[i] = temp.data[i];
		for (int i = temp.size; i < size; i++)
			data[i] = item;

	}
	
}

template<typename T>
void MyArray<T>::reserve(size_t n)
{	
	/*while (n > capacity)
		capacity *= 2;*/
	capacity = n;
	
}

template<typename T>
void MyArray<T>::shrink_to_fit()
{
	capacity = size;
	MyArray <T> temp;
	temp = *this;
	delete[] data;
	data = new T[capacity]();
	for (int i = 0; i < temp.size; i++)
		data[i] = temp[i];

}

template<typename T>
void MyArray<T>::clear()
{
	size = 0;
	shrink_to_fit();
}

template<typename T>
bool MyArray<T>::isEmpty()
{
	if (size == 0)
		return true;
	return false;
}

template class MyArray <char>;
template class MyArray <int>;
template class MyArray <double>;
template class MyArray <string>;#pragma once 
#include <iostream>
#include <stdexcept>
using namespace std;

template <typename T>
class MyArray
{
	friend ostream& operator<<(ostream& output, const MyArray<T>& right)
	{
		for (int i = 0; i < right.size; i++)
			output << right.data[i] << " ";
		return output;
	}
	//friend istream& operator>>(istream&, MyArray&);
public:
	MyArray(int cap);
	MyArray(int space, T value);
	MyArray();
	MyArray(const MyArray<T>& arrayToCopy);
	~MyArray();

	const MyArray<T>& operator=(const MyArray<T>& right);
	bool operator==(const MyArray<T>& right) const;
	bool operator!=(const MyArray<T>& right) const;
	MyArray<T> operator+(const MyArray<T>& right) const;
	MyArray<T>& operator+=(const MyArray<T>& right);
	T& operator[](int subscript);
	T operator[](int subscript) const;
	T& at(int subscript);
	T at(int subscript) const;

	int getSize() const;
	int getCapacity() const;
	void resize(size_t n, T item);
	void reserve(size_t n);
	void shrink_to_fit();
	void clear();
	bool isEmpty();

private:
	int size;
	int capacity;
	T* data;
};
class outOfRange :public logic_error
{
public:
	outOfRange()
		:logic_error(" subscript out of range. ") {}

};
#include "s1083311_MyString.h"

MyString::MyString()
	:MyArray(10)
{	

}

MyString::MyString(const MyString& copy)
	:MyArray(copy)
{
	
}

MyString::MyString(const MyString& str, size_t pos, size_t len) //要裁的 , 起點 , 長度
	:MyArray(10)
{	
	if (len == -1)
		len = str.getSize() - pos;
	this->resize(len , char());
	for (int i = pos; i < pos + len; i++)
		this->operator[](i - pos) = str[i]; //at(i - pos) = str.at(i);
		
}

MyString::MyString(const char* s)
	:MyArray(10)
{	
	this->resize(strlen(s), char());
	for (int i = 0; i < strlen(s); i++)
		this->operator[](i) = *(s + i);

}


MyString& MyString::append(const MyString& str)
{	
	this->operator+=(str);
	return *this;
}

MyString MyString::substr(size_t pos, size_t len) const
{	
	if (len == -1)
		len = this->getSize() - pos;
	MyString str;
	str.resize(len , char());
	for (int i = pos; i < pos + len; i++)
		str.operator[](i - pos) = this->operator[](i); //str.at(i - pos) = at(i);
	return str;

}

MyString& MyString::insert(size_t pos, const MyString& str)
{	
	this->resize(this->getSize() + str.getSize(), char()); 
	
	/*MyString temp;
	temp.resize(str.getSize(), char());
	temp = str.substr(subpos, sublen);*/

	//str7.resize(4, 'g');
	//str8.resize(5, 'T');
	//str8.insert(3, str7);
	//T T T g g g g T T
	for (int i = this->getSize() - 1; i >= pos + str.getSize(); i--)
		this->operator[](i) = this->operator[](i - str.getSize());

	for (int i = pos; i < pos + str.getSize(); i++)
		this->operator[](i) = str.operator[](i - pos);


	return *this;
}

MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen)
{	
	if (sublen == -1)
		sublen = str.getSize() - subpos;
	this->resize(this->getSize() + sublen, char()); //size = 9
	//str7.resize(10, 'g');
	//str8.resize(5, 'T');
	//str8.insert(3, str7, 1, 4);
	//T T T g g g g T T
	MyString temp;
	temp.resize(sublen, char());
	temp = str.substr(subpos, sublen);
	for (int i = this->getSize() - 1; i >= pos + sublen ; i--)
		this->operator[](i) = this->operator[](i - sublen);
	
	for (int i = pos; i < pos + sublen; i++)
		this->operator[](i) = temp.operator[](i - pos);
	
	return *this;
}

MyString& MyString::erase(size_t pos, size_t len)
{	
	if (len == -1)
		len = this->getSize() - pos;
	for (int i = pos; i < this->getSize() - len; i++) 
		this->operator[](i) = this->operator[](i + len);
	
	this->resize(this->getSize() - len, char());
	return *this;
	
}

size_t MyString::find(const MyString& str, size_t pos) const
{	
	bool find;
	for (int i = 0; i < this->getSize(); i++)
	{
		if (this->operator[](i) == str[pos])
		{
			find = true;
			for (int j = pos, temp = i; j < str.getSize(); j++, temp++)
			{
				if (temp >= this->getSize())
					return msize;
				else if (this->operator[](temp) != str[j])
					find = false;
			}
			if (find)
				return i;
		}		
	}
	return msize;
	
}

size_t MyString::find_first_of(const MyString& str, size_t pos) const
{
	
	bool find = false;
	for (int i = 0; i < this->getSize(); i++)
	{
		for (int j = pos; j < str.getSize(); j++)
		{
			if (this->operator[](i) == str.operator[](j)) 
			{	
				find = true;
				return i;
			}
		}
	}
	if (find == 0)
		return msize;
	
}

istream& operator>>(istream& input, MyString& right)
{
	string str;
	cin >> str;
	int length = str.length();
	char* ptr = new char[length + 1]; //including null
	str.copy(ptr, length, 0);
	ptr[length] = '\0';
	right = MyString(ptr);
	return input;
}

MyString::~MyString()
{
}


#pragma once 
#include <iostream>
#include <string>
#include "s1083311_MyArray.h"
using namespace std;

class MyString : public MyArray<char>
{
	//friend ostream& operator<<(ostream& output, const MyString& str);
	friend istream& operator>>(istream& input, MyString& right);
public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString& copy);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString& str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char* s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString& str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString& str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the " 
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString& str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

