#include<iostream>
#include"s1083322_MyString.h"
using namespace std;
template <class T>MyString<T>::MyString()
{}
template <class T>MyString<T>::MyString(const MyString<T> &copy) 
{
	this->setSize(copy.getSize());
	this->setCapacity(copy.getCapacity());
	for (int i = 0; i < this->getSize(); i++)
	{
		this->setData(i, copy[i]);
	}
}
template <class T>MyString<T>::MyString(const MyString &str, size_t pos, size_t len)
{
	this->setSize(len);
	if (len > this->getCapacity()) 
	{
		this->setCapacity(len); 
		this->reserve(this->getCapacity());
	}
	int index = 0;
	for (int i = pos; i < pos+len; i++)
	{
		this->setData(index, str[i]);
		index++;
	}
}
template <class T>MyString<T>::MyString(const char *s) 
{
	int i = 0;
	while (s[i] !='\0') 
	{
		this->setData(i, s[i]);
		i++;
	}
	this->setSize(i);
}
template <class T>MyString<T>::~MyString() 
{}

template <class T>MyString<T>& MyString<T>::append(const MyString &right) 
{
	if (this->getSize() + right.getSize() > this->getCapacity())
	{
		this->setCapacity(this->getCapacity() * 2);
		this->reserve(this->getCapacity());
	}
	int index = 0;
	for (int i = this->getSize(); i < this->getSize() + right.getSize(); i++)
	{
		this->setData(i, right[index]);
		index++;
	}
	this->setSize(this->getSize() + right.getSize());
	return *this;
}
template <class T>MyString<T> MyString<T>::substr(size_t pos, size_t len)const 
{
	MyString temp(*this,pos,len);
	return temp;
}
template <class T>MyString<T>& MyString<T>::insert(size_t pos, const MyString &right)
{
	MyString copy(*this);
	int index = 0;
	if (this->getSize() + right.getSize() > this->getCapacity())
	{
		this->setCapacity(this->getCapacity() * 2);
		this->reserve(this->getCapacity());
	}
	for (int i = pos; i < pos+right.getSize(); i++)
	{
		this->setData(i, right[index]);
		index++;
	}
	int position = pos;
	for (int i = pos + right.getSize(); i < this->getSize() + right.getSize(); i++)
	{
		this->setData(i, copy[position]);
		position++;
	}
	this->setSize(this->getSize() + right.getSize());
	return *this;
}
template <class T>MyString<T>& MyString<T>::insert(size_t pos, const MyString &right, size_t subpos, size_t sublen)
{
	MyString copy(*this);
	int index = subpos;
	if (this->getSize() + sublen > this->getCapacity())
	{
		this->setCapacity(this->getCapacity() * 2);
		this->reserve(this->getCapacity());
	}
	for (int i = pos; i < pos + sublen; i++)
	{
		this->setData(i, right[index]);
		index++;
	}
	int position = pos;
	for (int i = pos + sublen; i < this->getSize() + sublen; i++)
	{
		this->setData(i, copy[position]);
		position++;
	}
	this->setSize(this->getSize() + sublen);
	return *this;
}
template <class T>MyString<T>& MyString<T>::erase(size_t pos, size_t len) 
{
	if (len > this->getSize())
	{
		len = this->getSize();
	}
	for (int i = pos; i <= len; i++)
	{
		this->setData(i, '\0');
	}
	return *this;
}
template <class T>size_t MyString<T>::find(const MyString<T> &str, size_t pos) const 
{
	int findindex=0;
	bool same = 0;
	int index = 0;
	for (int i = pos; i < this->getSize(); i++)
	{
		if (this->getData(i) == str[0])
		{
			for (int j = i; index < str.getSize(); index++)
			{
				if (this->getData(j) != str[index])
				{
					same = 0;
					break;
				}
				j++;
				same = 1;
			}
			index = 0;
			if (same == 1)
			{
				findindex = i;
				break;
			}
		}
	}
	if (same == 1)
		return findindex;
	else
		return msize;
}
template <class T>size_t MyString<T>::find_first_of(const MyString &str, size_t pos) const 
{
	int findposit=this->getSize();
	for (int i = 0; i < str.getSize(); i++)
	{
		for (int j = pos; j < this->getSize(); j++) 
		{
			if (this->getData(j) == str[i])
			{
				if (j < findposit)
				{
					findposit=j;
				}
			}
		}
	}
	if (findposit < this->getSize())
		return findposit;
	else
		return msize;
}

template class MyString <int>;
template class MyString <char>;#include<iostream>
#include"s1083322_MyArray.h"
using namespace std;
template <class T>MyArray<T>::MyArray(int Capacity)
{
	size = 0;
	capacity = Capacity;
	data = new T[capacity]{ 0 };
}
template <class T>MyArray<T>::MyArray(int Size, T value)
{
	capacity = 10;
	size = Size;
	data = new T[capacity]{ 0 };
	for (int i = 0; i < size; i++)
	{
		data[i] = value;
	}
}
template <class T>MyArray<T>::MyArray(const MyArray<T> &copy)
{
	size = copy.size;
	capacity = copy.capacity;
	data = new T[capacity]{ 0 };
	for (int i = 0; i < size; i++)
	{
		data[i] = copy.data[i];
	}
}//copy constructer
template <class T>MyArray<T>::~MyArray() { delete[]data; }


template <class T>const MyArray<T>& MyArray<T>::operator=(const MyArray<T> &right)
{
	size = right.size;
	capacity = right.capacity;
	data = new T[capacity]{ 0 };
	for (int i = 0; i < size; i++)
	{
		data[i] = right.data[i];
	}
	return *this;
}
template <class T>bool MyArray<T>::operator==(const MyArray<T> &right)const
{
	if (size != right.size)
	{
		return false;
	}
	else
		return true;
}
template <class T>bool MyArray<T>::operator!=(const MyArray<T> &right)const
{
	if (size != right.size)
	{
		return true;
	}
	else
		return false;
}
template <class T>MyArray<T> MyArray<T>::operator+(const MyArray<T> &right)const
{
	MyArray sum(*this);
	if (size + right.size > sum.capacity) { sum.capacity *= 2; sum.reserve(sum.capacity); }
	int index = 0;
	for (int i = size; i < size + right.size; i++)
	{
		sum.data[i] = right.data[index];
		index++;
	}
	sum.size = size + right.size;
	return sum;
}
template <class T>MyArray<T>& MyArray<T>::operator+=(const MyArray<T>&right)
{
	if (size + right.size > capacity) { capacity *= 2; reserve(capacity); }
	int index = 0;
	for (int i = size; i < size + right.size; i++)
	{
		data[i] = right.data[index];
		index++;
	}
	size += right.size;
	return *this;
}
template <class T>T MyArray<T>::at(int a)
{
	return data[a];
}
template <class T>int MyArray<T>::at(int a)const
{
	return data[a];
}

template <class T>int MyArray<T>::getCapacity()const { return capacity; }
template <class T>int MyArray<T>::getSize()const { return size; }
template <class T>void MyArray<T>::setSize(int Size) { size = Size; }
template <class T>void MyArray<T>::setCapacity(int Capacity) { capacity = Capacity; }
template <class T>T MyArray<T>::getData(int index)const { return data[index]; }
template <class T>void MyArray<T>::setData(int index, T item) { data[index] = item; }
template <class T>T MyArray<T>::operator[](int index)const { return data[index]; }

template <class T>void MyArray<T>::resize(int Capacity, T item)
{
	if (capacity > Capacity) 
	{	
		reserve(Capacity); 
		size = Capacity; 
		capacity = Capacity;
	}
	else if (capacity < Capacity)
	{
		reserve(Capacity);
		capacity = Capacity;
		size = Capacity;
		for (int i = capacity; i < Capacity; i++)
		{
			data[i] = item;
		}
	}
}
template <class T>void MyArray<T>::reserve(int capacity)
{
	MyArray temp(*this);
	delete[]data;
	data = new T[capacity]{ 0 };
	for (int i = 0; i < temp.size; i++)
	{
		data[i] = temp.data[i];
	}
}
template <class T>void MyArray<T>::shrink_to_fit()
{
	capacity = size;
	reserve(capacity);
}
template <class T>void MyArray<T>::clear()
{
	for (int i = 0; i < size; i++)
	{
		data[i] = '\0';
	}
	size = 0;
}
template <class T>bool MyArray<T>::isEmpty()
{
	if (capacity == size)return false;
	else return true;
}
template class MyArray <int>;
template class MyArray <char>;
//new#ifndef S1083322_MYARRAY_H
#define S1083322_MYARRAY_H
#include<iostream>
#include<string>
using namespace std;
template <class T>
class MyArray {	//modify this class into a template class
	friend ostream& operator<<(ostream& output, const MyArray& a)
	{
		for (int i = 0; i < a.size; i++)
		{
			output << a.data[i];
		}
		return output;
	}
	//friend istream& operator>>(istream&, MyArray&);
	friend istream& operator>>(istream& input, MyArray& right)
	{
		string Temp;
		input >> Temp;
		right.size = Temp.length();
		for (int i = 0; i < Temp.length(); i++)
		{
			right.data[i] = Temp[i];
		}
		return input;
	}
public:
	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(const MyArray &);
	~MyArray();

	const MyArray& operator=(const MyArray &);
	bool operator==(const MyArray&) const;
	bool operator!=(const MyArray&) const;
	MyArray operator+(const MyArray&) const;	//new
	MyArray& operator+=(const MyArray&);//new
	T at(int);		//new
	int at(int) const;  //new

	int getSize() const;
	int getCapacity() const;
	void setSize(int);
	void setCapacity(int);
	void setData(int,T);
	T getData(int)const;
	T operator[](int)const;

	void resize(int size, T item);
	void reserve(int);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new


private:
	int size;
	int capacity;
	T* data;
};

#endif // !MyArray#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include"s1083322_MyArray.h"
//#include "XXXXXXXXXX.h"
using namespace std;
template <class T>

class MyString :public MyArray<T>
{
	//friend ostream &operator<<(ostream& output, const MyString& str);

public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString &str);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString &str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char *s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString &str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString &str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString &str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString &str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString &str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif
