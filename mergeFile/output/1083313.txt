#pragma once
#include<iostream>
#include<stdexcept>
#include<exception>
using namespace std;

template<typename T>
class MyArray {	//modify this class into a template class

	template<typename T>
	friend ostream& operator<<(ostream&, const MyArray<T>&);
	
public:
	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(const MyArray&);
	~MyArray();

	const MyArray& operator=(const MyArray&);
	bool operator==(const MyArray&) const;
	bool operator!=(const MyArray&) const;
	MyArray operator+(const MyArray&) const;	//new
	MyArray& operator+=(const MyArray&);		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t size, T item);
	void reserve(size_t size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

private:
	int size;
	int capacity = 10;
	T* data;
};

class Out_of_range : public logic_error
{
public:
	Out_of_range()
		:logic_error("out of range") {};
};
//template<typename T>
//class Stack
//{
//	public:
//		Stack(int = 10);

//		~Stack() {
//			delete[] stackPtr;
//		}
//		bool push(const t&);
//		bool pop(T&);

		//top: 得到最上面的值
		//push: 再拿一個盤子往上疊
		//pop : 拿掉最上面的盤子
//};

template<typename T>
MyArray<T>::MyArray(int arraysize)
{

	//	if (arraysize > 10)
	size = 0;
	//	while (arraysize > capacity)
	capacity = arraysize;
	data = new T[capacity]();



}
template<typename T>
MyArray<T>::MyArray(int n, T m)
{
	size = n;
	while (n > capacity) { capacity *= 2; }
	data = new T[capacity];
	for (int i = 0; i < n; i++) { data[i] = m; }

}

template<typename T>
MyArray<T>::MyArray(const MyArray& right)//copy
{
	size = right.size;
	capacity = right.capacity;
	data = new T[capacity]();
	for (int i = 0; i < size; i++)
		data[i] = right.data[i];
}

template<typename T>
MyArray<T>::~MyArray()
{
	delete[]data;
}

template<typename T>
bool MyArray<T>::operator!=(const MyArray& right) const
{
	return !(*this == right);
}

template<typename T>
const MyArray<T>& MyArray<T>::operator=(const MyArray& right)
{
	if (&right != this)
	{
		if (size != right.size)
		{
			delete[]data;
			size = right.size;
			capacity = right.capacity;
			data = new T[capacity]();
		}
		for (int i = 0; i < size; i++)
			data[i] = right.data[i];
	}
	return *this;
}

template<typename T>
bool MyArray<T>::operator==(const MyArray& right) const
{
	if (size != right.size)
		return false;
	for (int i = 0; i < size; i++)
	{
		if (data[i] != right.data[i])
			return false;
	}
	return true;
}

template<typename T>
T& MyArray<T>::operator[](int sub)
{
	if (sub < 0 || sub >= size)
	{
		cerr << "error" << sub << "out of range" << endl;
		exit(1);
	}
	return data[sub];
}

template<typename T>
T MyArray<T>::operator[](int sub) const
{
	if (sub < 0 || sub >= size)
	{
		cerr << "error" << sub << "out of range" << endl;
		exit(1);
	}
	return data[sub];
}

template<typename T>
void MyArray<T>::resize(size_t n, T value)
{
	while (n > capacity)
	{
		reserve(2 * capacity);
	}
	for (int i = size; i < n; i++)
		data[i] = value;
	size = n;
}

template<typename T>
void MyArray<T>::reserve(size_t n)
{
	T* temp = new T[n]();
	for (int i = 0; i < size; i++)
		temp[i] = data[i];
	delete[] data;
	data = temp;
	capacity = n;
}

template<typename T>
ostream& operator<<(ostream& output, const MyArray<T>& a)
{

	for (int i = 0; i < a.size; i++)
	{
		output << a.data[i];
		output << " ";
	}

	return output;
}

template<typename T>
int MyArray<T>::getSize() const
{
	return size;
}

template<typename T>
int MyArray<T>::getCapacity() const
{
	return capacity;
}






template<typename T>
MyArray<T> MyArray<T>::operator+(const MyArray<T>& aaa) const
{
	MyArray<T> b;
	b.resize(size + aaa.size, 'a');
	for (int i = 0; i < size; i++) { b.data[i] = data[i]; }
	for (int i = size; i < b.size; i++) { b.data[i] = aaa.data[i - size]; }

	//data[i]=data[i] + aaa;

	return b;
}

template<typename T>
MyArray<T>& MyArray<T>::operator+=(const MyArray<T>& aaa)
{

	// TODO: 於此處插入 return 陳述式
	MyArray<T> b;
	b.resize(size + aaa.size, 'a');
	for (int i = 0; i < size; i++) { b.data[i] = data[i]; }
	for (int i = size; i < b.size; i++) { b.data[i] = aaa.data[i - size]; }

	//data[i]=data[i] + aaa;
	resize(b.size, 'a');
	for (int i = 0; i < b.size; i++) { data[i] = b.data[i]; }
	return *this;
}

template<typename T>
T& MyArray<T>::at(int sub)
{

	// TODO: 於此處插入 
	if (sub < 0 || sub >= size)
	{
		throw Out_of_range();
	}
	return data[sub];
}

template<typename T>
T MyArray<T>::at(int sub) const
{
	if (sub < 0 || sub >= size)
	{
		throw Out_of_range();
	}
	return data[sub];
}

template<typename T>
void MyArray<T>::shrink_to_fit()
{
	T* buffer = new T[size];
	for (int i = 0; i < getSize(); i++)
		buffer[i] = data[i];
	delete[] data;
	data = buffer;
	capacity = size;
}

template<typename T>
void MyArray<T>::clear()
{
	size = 0;
}

template<typename T>
bool MyArray<T>::isEmpty()//空的
{
	if (size == 0) { return true; }
	else { return false; }
}

#include "s1083313_MyString.h"
#include<iostream>
using namespace std;
MyString::MyString()
	:MyArray(10, 'o')
{
}

MyString::MyString(const MyString& str)
	: MyArray(str)
{
}

MyString::MyString(const MyString& str, size_t pos, size_t len)
	: MyArray(10, ' ')
{
	if (len == msize) {
		resize(str.getSize() - pos, ' ');

	}
	else
	{
		resize(len, ' ');
	}
	for (int i = 0; i < getSize(); i++)
	{
		at(i) = str.at(i + pos);

	}
}

MyString::MyString(const char* s)
	:MyArray(10, 'r')
{
	int a = 0;
	int b = 0;
	int count = 0;
	while (*(s + a) != '\0') { count++; a++; }
	resize(count, 'x');
	while (*(s + b) != '\0') { at(b) = *(s + b); b++; }
}

MyString::~MyString()
{

}

MyString& MyString::append(const MyString& str)
{
	MyString a;
	a.resize(this->getSize() + str.getSize(), 'a');
	for (int i = 0; i < getSize(); i++) { a.at(i) = at(i); }
	for (int i = getSize(); i < a.getSize(); i++) { a.at(i) = str.at(i - getSize()); }
	*this = a;
	return *this;
}

MyString MyString::substr(size_t pos, size_t len) const
{
	MyString a;
	if (len == msize) {
		a.resize(getSize() - pos, ' ');

	}
	else
	{
		a.resize(len, ' ');
	}
	for (int i = 0; i < a.getSize(); i++)
	{
		a.at(i) = at(i + pos);

	}

	return a;
}

MyString& MyString::insert(size_t pos, const MyString& str)
{
	MyString a;
	a.resize(getSize() + str.getSize(), 'x');
	for (int i = 0; i < pos; i++) { a.at(i) = at(i); }
	for (int i = 0; i < str.getSize(); i++) { a.at(i + pos) = str.at(i); }
	for (int i = 0; i < a.getSize() - (pos+str.getSize()); i++) { a.at(pos + str.getSize() + i) = at(i + pos); }
	*this = a;
	return *this;
	// TODO: 於此處插入 return 陳述式
}

MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen)
{
	if (sublen == msize) { sublen = (str.getSize() - pos); }
	MyString a;
	a.resize(getSize() + sublen, 'x');
	for (int i = 0; i < pos; i++) { a.at(i) = at(i); }
	for (int i = 0; i < sublen; i++) { a.at(i + pos) = str.at(i + subpos); }
	for (int i = 0; i < a.getSize() - (pos+sublen); i++) { a.at(sublen + pos + i) = at(i + pos); }
	*this = a;
	return *this;

	// TODO: 於此處插入 return 陳述式
}

MyString& MyString::erase(size_t pos, size_t len)
{
	if (len == msize)
	{
		len = getSize() - pos;
		
		for (int i = pos; i < getSize(); i++) { at(i) = ' '; }
		resize(getSize() - len, 'x');
	}
	else
	{ 
		MyString a;

		a.resize(getSize() - len, 'x');
		for (int i = 0; i < pos; i++) { a.at(i) = at(i); }

		for (int i = 0; i < getSize() - (pos + len); i++) { a.at(pos + i) = at(i + (len+ pos)); }
		*this = a;
	
	}
	return *this;
}

size_t MyString::find(const MyString& str, size_t pos) const
{
	int flag = 0,aaa=0;
	for (int i = 0; i < getSize() - (str.getSize()- pos);i++)
	{
		if (at(i)==str.at(pos))
		{
			flag = 0;
			int x = 1;
			for (int a = i + 1; a < ((str.getSize() - pos)+(i));a++) 
			{
				if (at(a) != str.at(pos + x)) { flag = 0; break; }
				else { flag = 1; aaa = i; }
				x++;
			}
			if (flag == 1) { return   aaa; }
		}		 
	}
return msize; 
}

size_t MyString::find_first_of(const MyString& str, size_t pos) const
{
	if ((str.getSize() - pos) > getSize()) { return msize; }
	for (int i = 0; i < getSize();i++) 
	{
		for (int j = pos; j < str.getSize() - pos; j++)
		{
			if (at(i)==str.at(pos+j)) { return i; }
		}
	}

	return msize;
}

istream& operator>>(istream& input, MyString& a)
{
	string inp;
	input >> inp;
	//	for (int i = a.size - 1; i >= 0; i--)
	//		input >> a.data[i];
	int len = inp.length();
	char* ptr = new char[len + 1];
	inp.copy(ptr, len, 0);
	ptr[len] = '\0';

	MyString nnn(ptr);
	a = nnn;
	delete[] ptr;

	return input;
}#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include "s1083313_MyArray.h"
using namespace std;

class MyString : public MyArray <char>
{
	//friend ostream &operator<<(ostream& output, const MyString& str);
	friend istream& operator>>(istream&, MyString&);
public:
	MyString();
	MyString(const MyString& str);
	MyString(const MyString& str, size_t pos, size_t len = msize);

	MyString(const char* s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString& str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString& str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString& str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif