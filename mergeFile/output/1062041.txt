#include <iostream>
#include "s1062041_MyArray.h"
using namespace std;





#pragma once
#ifndef s1062041_MyArray_h
#define s1062041_MyArray_h

#include <iostream>
using namespace std;

template<typename T>
class MyArray {
	
	template<typename T>
	friend ostream& operator<<(ostream&, const MyArray<T> &);
	//friend istream& operator>>(istream&, const MyArray&);

public:
	MyArray(int = 10);
	MyArray(int size, T value);	//.
	MyArray(const MyArray<T>&);
	~MyArray();

	const MyArray& operator=(const MyArray&);
	bool operator==(const MyArray&) const;
	bool operator!=(const MyArray&) const;
	MyArray operator+(const MyArray&) const;	//new
	MyArray& operator+=(const MyArray&);	//new

	int& operator[](int);
	int operator[](int) const;
	T& at(int);	//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t n, T);
	void reserve(size_t n = 0);
	void shrink_to_fit();	//new
	void clear();	//new
	bool isEmpty();	//new
	
	
protected:
	T* data;
	int size = 0;
	int capacity;

};

#endif // !s1062041_MyArray_h

template<typename T>
MyArray<T>::MyArray(int arrcapacity) {
	capacity = (arrcapacity > 10 ? arrcapacity : 10);
	data = new T[capacity]();
	/*for (int i = 0; i < capacity; i++) {
		data[i] = 0;
	}*/
}

template<typename T>
MyArray<T>::MyArray(int s, T value) {
	capacity = 10;
	data = new T[capacity]();
	for (int i = 0; i < s; i++) {
		resize(1, value);
	}
}

template<typename T>
MyArray<T>::MyArray(const MyArray<T> &arr) :capacity(arr.getCapacity()) {
	data = new T[capacity];
	size = arr.getSize();
	for (int i = 0; i < capacity; i++) {
		data[i] = arr.data[i];
	}
}

template<typename T>
MyArray<T>::~MyArray() {
	delete[] data;
}

template<typename T>
const MyArray<T> &MyArray<T>::operator=(const MyArray<T> &right) {
	
	if (&right != this) {
		if (getCapacity() != right.getCapacity()) {
			delete[] data;
			capacity = right.getCapacity();
			size = right.getSize();
			data = new T[capacity];
		}
		capacity = right.getCapacity();
		size = right.getSize();
		for (int i = 0; i < right.getSize(); i++) {
			data[i] = right.data[i];
		}
	}

	return *this;
}

template<typename T>
bool MyArray<T>::operator==(const MyArray<T> &right) const {
	if (getSize() != right.getSize())
		return false;
	for (int i = 0; i < getSize(); i++) {
		if (data[i] != right.data[i]) {
			return false;
		}
	}
	return true;
}

template<typename T>
bool MyArray<T>::operator!=(const MyArray<T> &right) const {
	return !(*this == right);
}

//operator +
template<typename T>
MyArray<T> MyArray<T>::operator+(const MyArray<T>& right) const {

	MyArray<T> sum(10);
	
	for (int i = 0; i < getSize(); i++) {
		sum.resize(1, data[i]);
	}
	
	sum += right;

	return sum;
}

//operator +=
template<typename T>
MyArray<T>& MyArray<T>::operator+=(const MyArray<T>& right) {
	for (int i = 0; i < right.getSize(); i++) {
		resize(1, right.data[i]);
	}
	
	return *this;
}

template<typename T>
int& MyArray<T>::operator[](int sub) {
	if (sub < 0 || sub >= getSize()) {
		cerr << "\nError: Subscript " << sub << " out of range" << endl;
		exit(1);
	}

	return data[sub];
}

template<typename T>
int MyArray<T>::operator[](int sub) const {
	if (sub < 0 || sub >= getSize()) {
		cerr << "\nError: Subscript " << sub << " out of range" << endl;
		exit(1);
	}
	return data[sub];
}

template<typename T>
void MyArray<T>::resize(size_t n, T c) {
	while (getSize()+n > getCapacity()) {
		reserve(getCapacity() * 2);
	}
	for (int i = getSize(); i < getSize()+n; i++) {
		data[i] = c;
	}
	size = getSize() + n;
}

template<typename T>
void MyArray<T>::reserve(size_t n) {
	MyArray<T> tmp(n);
	for (int i = 0; i < getSize(); i++) {
		tmp.data[i] = data[i];
	}
	tmp.size = getSize();

	*this = tmp;
}

template<typename T>
int MyArray<T>::getSize() const {
	return size;
}

template<typename T>
int MyArray<T>::getCapacity() const {
	return capacity;
}

//new
//shrink to fit
template<typename T>
void MyArray<T>::shrink_to_fit() {
	MyArray<T> tmp(getSize());
	tmp.size = getSize();
	for (int i = 0; i < getSize(); i++) {
		tmp.data[i] = data[i];
	}
	*this = tmp;
}

//clear
template<typename T>
void MyArray<T>::clear() {
	size = 0;
}

//isEmpty
template<typename T>
bool MyArray<T>::isEmpty() {
	if (getSize() == 0) {
		return true;
	}
	else {
		return false;
	}
}

//at
template<typename T>
T& MyArray<T>::at(int index) {
	if (index < 0 || index >= getSize()) {
		cerr << "\nError: Subscript " << index << " out of range" << endl;
	}
	else {
		return data[index];
	}
}
template<typename T>
T MyArray<T>::at(int index) const {
	if (index < 0 || index >= getSize()) {
		cerr << "\nError: Subscript " << index << " out of range" << endl;
		exit(1);
	}
	else {
		return data[index];
	}
}

template<typename T>
ostream& operator<<(ostream &output, const MyArray<T> &arr) {

	for (int i = 0; i < arr.size; i++) {
		
		output << arr.data[i] << ",";
	}


	return output;
}#include <iostream>
#include "s1062041_MyString.h"
using namespace std;

#ifndef s1062041_MyString_H
#define s1062041_MyString_H
#include <iostream>
#include <string>
#include <vector>
#include "s1062041_MyArray.h"
using namespace std;

template<typename T>
class MyString : public MyArray<T>
{
	//friend ostream &operator<<(ostream& output, const MyString& str);

public:
	MyString(); 
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString( const MyString<T> &str ); 
	// Constructs a copy of "str". (copy constructor)

	MyString( const MyString &str, size_t pos, size_t len = msize ); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString( const char *s ); 
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString(); 
	// Destroys the string object.

	const MyString& operator=(const MyString&);

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append( const MyString &str ); 
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert( size_t pos, const MyString &str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert( size_t pos, const MyString &str, size_t subpos, size_t sublen = msize );
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase( size_t pos, size_t len = msize ); 
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find( const MyString &str, size_t pos = 0 ) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of( const MyString &str, size_t pos = 0 ) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
	
}; // end class MyString

#endif

template<typename T>
MyString<T>::MyString():MyArray<T>(10) {
	
}

template<typename T>
MyString<T>::MyString(const char *s):MyArray<T>(strlen(s)) {
	for (int i = 0; i < strlen(s); i++) {
		MyArray<T>::resize(1, s[i]);
	}
}

template<typename T>
MyString<T>::MyString(const MyString<T>& str):MyArray<T>(str) {
	
}

template<typename T>
MyString<T>::MyString(const MyString& str, size_t pos, size_t len):MyArray<T>(10){
	
	for (int j = pos; j < pos + len; j++) {
		MyArray<T>::resize(1, str.data[j]);
	}

}

template<typename T>
MyString<T>::~MyString() {
	
}

template<typename T>
const MyString<T>& MyString<T>::operator=(const MyString<T>& right) {

	if (&right != this) {
		if (MyArray<T>::getCapacity() != right.getCapacity()) {
			delete[] MyArray<T>::data;
			MyArray<T>::capacity = right.getCapacity();
			MyArray<T>::size = right.getSize();
			MyArray<T>::data = new T[MyArray<T>::capacity];
		}
		MyArray<T>::capacity = right.getCapacity();
		MyArray<T>::size = right.getSize();
		for (int i = 0; i < right.getSize(); i++) {
			MyArray<T>::data[i] = right.data[i];
		}
	}

	return *this;
}

template<typename T>
MyString<T>& MyString<T>::append(const MyString<T>& str) {

	for (int i = 0; i < str.getSize(); i++) {
		MyArray<T>::resize(1, str.data[i]);
	}

	return *this;
}

template<typename T>
MyString<T> MyString<T>::substr(size_t pos, size_t len) const {
	
	MyString temp(*this, pos, len);
	
	return temp;
	
}

template<typename T>
MyString<T>& MyString<T>::insert(size_t pos, const MyString<T>& str) {
	if (pos == MyArray<T>::getSize()) {
		for (int i = 0; i < str.getSize(); i++) {
			MyArray<T>::resize(1, str.data[i]);
		}
	}
	else {
		//先儲存要插入的後面的部分
		vector<T> tmp;
		unsigned int remainpos = pos;
		for (int i = remainpos; i < MyArray<T>::getSize(); i++) {
			tmp.push_back(MyArray<T>::data[i]);
		}
		
		//再從pos開始先全部刪除
		int count = 0;
		for (int i = pos; i < MyArray<T>::getSize(); i++, count++) {
			MyArray<T>::data[i] = NULL;
		}
		MyArray<T>::size -= count;

		//把要插入的部分儲存回去
		for (int i = 0; i < str.getSize(); i++) {
			MyArray<T>::resize(1, str.data[i]);
		}

		//最後把剩下的部分儲存回去
		for (int i = 0; i < tmp.size(); i++) {
			MyArray<T>::resize(1, tmp[i]);
		}

	}

	return *this;
}

template<typename T>
MyString<T>& MyString<T>::insert(size_t pos, const MyString<T>& str, size_t subpos, size_t sublen) {

	MyString sub(str, subpos, sublen);
	MyString<T>::insert(pos, sub);

	return *this;
}


template<typename T>
MyString<T>& MyString<T>::erase(size_t pos, size_t len) {

	//先儲存要刪除的後面的部分
	vector<T> tmp;
	unsigned int remainpos = len + pos;
	for (int i = remainpos; i < MyArray<T>::getSize(); i++) {
		tmp.push_back(MyArray<T>::data[i]);
	}

	//從pos開始全部刪除
	int count = 0;
	for (int i = pos; i < MyArray<T>::getSize(); i++, count++) {
		MyArray<T>::data[i] = NULL;
	}
	MyArray<T>::size -= count;

	//把剩下的部分儲存回去
	for (int i = 0; i < tmp.size(); i++) {
		MyArray<T>::resize(1, tmp[i]);
	}

	//更改capacity
	while (MyArray<T>::getSize() + 10 < MyArray<T>::getCapacity()) {
		MyArray<T>::reserve(MyArray<T>::getCapacity() / 2);
	}


	return *this;
}

template<typename T>
size_t MyString<T>::find(const MyString<T>& str, size_t pos) const {
	
	size_t ans = msize;
	bool isDiff;

	for (int i = pos; i < MyArray<T>::getSize(); i++) {
		//先比對第一個字
		if (str.data[0] == MyArray<T>::data[i]) {
			//如果第一個字相同的話
			isDiff = false;
			for (int j = 0; j < str.getSize(); j++) {
				//再連續比對整個詞
				if (MyArray<T>::data[i + j] != str.data[j]) {
					isDiff = true;
				}
			}
			//看看有沒有找到
			if (!isDiff) {
				ans = i;
			}
		}
		
	}
	return ans;

}

template<typename T>
size_t MyString<T>::find_first_of(const MyString<T>& str, size_t pos) const {
	 
	size_t ans = msize;
	
	for (int i = 0; i < str.getSize(); i++) {
		//str每個都要比對
		for (int j = pos; j < MyArray<T>::getSize(); j++) {
			if (str.data[i] == MyArray<T>::data[j]) {
				//如果比對到相同的字
				if (j < ans) {
					//比較有沒有比較小
					ans = j;
				}
			}
		}
	}

	return ans;

}#include <iostream>
#include "s1062041_MyArray.h"
using namespace std;





#pragma once
#ifndef s1062041_MyArray_h
#define s1062041_MyArray_h

#include <iostream>
using namespace std;

template<typename T>
class MyArray {
	
	template<typename T>
	friend ostream& operator<<(ostream&, const MyArray<T> &);
	//friend istream& operator>>(istream&, const MyArray&);

public:
	MyArray(int = 10);
	MyArray(int size, T value);	//.
	MyArray(const MyArray<T>&);
	~MyArray();

	const MyArray& operator=(const MyArray&);
	bool operator==(const MyArray&) const;
	bool operator!=(const MyArray&) const;
	MyArray operator+(const MyArray&) const;	//new
	MyArray& operator+=(const MyArray&);	//new

	int& operator[](int);
	int operator[](int) const;
	T& at(int);	//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t n, T);
	void reserve(size_t n = 0);
	void shrink_to_fit();	//new
	void clear();	//new
	bool isEmpty();	//new
	
	
protected:
	T* data;
	int size = 0;
	int capacity;

};

#endif // !s1062041_MyArray_h

template<typename T>
MyArray<T>::MyArray(int arrcapacity) {
	capacity = (arrcapacity > 10 ? arrcapacity : 10);
	data = new T[capacity]();
	/*for (int i = 0; i < capacity; i++) {
		data[i] = 0;
	}*/
}

template<typename T>
MyArray<T>::MyArray(int s, T value) {
	capacity = 10;
	data = new T[capacity]();
	for (int i = 0; i < s; i++) {
		resize(1, value);
	}
}

template<typename T>
MyArray<T>::MyArray(const MyArray<T> &arr) :capacity(arr.getCapacity()) {
	data = new T[capacity];
	size = arr.getSize();
	for (int i = 0; i < capacity; i++) {
		data[i] = arr.data[i];
	}
}

template<typename T>
MyArray<T>::~MyArray() {
	delete[] data;
}

template<typename T>
const MyArray<T> &MyArray<T>::operator=(const MyArray<T> &right) {
	
	if (&right != this) {
		if (getCapacity() != right.getCapacity()) {
			delete[] data;
			capacity = right.getCapacity();
			size = right.getSize();
			data = new T[capacity];
		}
		capacity = right.getCapacity();
		size = right.getSize();
		for (int i = 0; i < right.getSize(); i++) {
			data[i] = right.data[i];
		}
	}

	return *this;
}

template<typename T>
bool MyArray<T>::operator==(const MyArray<T> &right) const {
	if (getSize() != right.getSize())
		return false;
	for (int i = 0; i < getSize(); i++) {
		if (data[i] != right.data[i]) {
			return false;
		}
	}
	return true;
}

template<typename T>
bool MyArray<T>::operator!=(const MyArray<T> &right) const {
	return !(*this == right);
}

//operator +
template<typename T>
MyArray<T> MyArray<T>::operator+(const MyArray<T>& right) const {

	MyArray<T> sum(10);
	
	for (int i = 0; i < getSize(); i++) {
		sum.resize(1, data[i]);
	}
	
	sum += right;

	return sum;
}

//operator +=
template<typename T>
MyArray<T>& MyArray<T>::operator+=(const MyArray<T>& right) {
	for (int i = 0; i < right.getSize(); i++) {
		resize(1, right.data[i]);
	}
	
	return *this;
}

template<typename T>
int& MyArray<T>::operator[](int sub) {
	if (sub < 0 || sub >= getSize()) {
		cerr << "\nError: Subscript " << sub << " out of range" << endl;
		exit(1);
	}

	return data[sub];
}

template<typename T>
int MyArray<T>::operator[](int sub) const {
	if (sub < 0 || sub >= getSize()) {
		cerr << "\nError: Subscript " << sub << " out of range" << endl;
		exit(1);
	}
	return data[sub];
}

template<typename T>
void MyArray<T>::resize(size_t n, T c) {
	while (getSize()+n > getCapacity()) {
		reserve(getCapacity() * 2);
	}
	for (int i = getSize(); i < getSize()+n; i++) {
		data[i] = c;
	}
	size = getSize() + n;
}

template<typename T>
void MyArray<T>::reserve(size_t n) {
	MyArray<T> tmp(n);
	for (int i = 0; i < getSize(); i++) {
		tmp.data[i] = data[i];
	}
	tmp.size = getSize();

	*this = tmp;
}

template<typename T>
int MyArray<T>::getSize() const {
	return size;
}

template<typename T>
int MyArray<T>::getCapacity() const {
	return capacity;
}

//new
//shrink to fit
template<typename T>
void MyArray<T>::shrink_to_fit() {
	MyArray<T> tmp(getSize());
	tmp.size = getSize();
	for (int i = 0; i < getSize(); i++) {
		tmp.data[i] = data[i];
	}
	*this = tmp;
}

//clear
template<typename T>
void MyArray<T>::clear() {
	size = 0;
}

//isEmpty
template<typename T>
bool MyArray<T>::isEmpty() {
	if (getSize() == 0) {
		return true;
	}
	else {
		return false;
	}
}

//at
template<typename T>
T& MyArray<T>::at(int index) {
	if (index < 0 || index >= getSize()) {
		cerr << "\nError: Subscript " << index << " out of range" << endl;
	}
	else {
		return data[index];
	}
}
template<typename T>
T MyArray<T>::at(int index) const {
	if (index < 0 || index >= getSize()) {
		cerr << "\nError: Subscript " << index << " out of range" << endl;
		exit(1);
	}
	else {
		return data[index];
	}
}

template<typename T>
ostream& operator<<(ostream &output, const MyArray<T> &arr) {

	for (int i = 0; i < arr.size; i++) {
		
		output << arr.data[i] << ",";
	}


	return output;
}#include <iostream>
#include "s1062041_MyString.h"
using namespace std;

#ifndef s1062041_MyString_H
#define s1062041_MyString_H
#include <iostream>
#include <string>
#include <vector>
#include "s1062041_MyArray.h"
using namespace std;

template<typename T>
class MyString : public MyArray<T>
{
	//friend ostream &operator<<(ostream& output, const MyString& str);

public:
	MyString(); 
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString( const MyString<T> &str ); 
	// Constructs a copy of "str". (copy constructor)

	MyString( const MyString &str, size_t pos, size_t len = msize ); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString( const char *s ); 
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString(); 
	// Destroys the string object.

	const MyString& operator=(const MyString&);

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append( const MyString &str ); 
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert( size_t pos, const MyString &str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert( size_t pos, const MyString &str, size_t subpos, size_t sublen = msize );
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase( size_t pos, size_t len = msize ); 
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find( const MyString &str, size_t pos = 0 ) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of( const MyString &str, size_t pos = 0 ) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
	
}; // end class MyString

#endif

template<typename T>
MyString<T>::MyString():MyArray<T>(10) {
	
}

template<typename T>
MyString<T>::MyString(const char *s):MyArray<T>(strlen(s)) {
	for (int i = 0; i < strlen(s); i++) {
		MyArray<T>::resize(1, s[i]);
	}
}

template<typename T>
MyString<T>::MyString(const MyString<T>& str):MyArray<T>(str) {
	
}

template<typename T>
MyString<T>::MyString(const MyString& str, size_t pos, size_t len):MyArray<T>(10){
	
	for (int j = pos; j < pos + len; j++) {
		MyArray<T>::resize(1, str.data[j]);
	}

}

template<typename T>
MyString<T>::~MyString() {
	
}

template<typename T>
const MyString<T>& MyString<T>::operator=(const MyString<T>& right) {

	if (&right != this) {
		if (MyArray<T>::getCapacity() != right.getCapacity()) {
			delete[] MyArray<T>::data;
			MyArray<T>::capacity = right.getCapacity();
			MyArray<T>::size = right.getSize();
			MyArray<T>::data = new T[MyArray<T>::capacity];
		}
		MyArray<T>::capacity = right.getCapacity();
		MyArray<T>::size = right.getSize();
		for (int i = 0; i < right.getSize(); i++) {
			MyArray<T>::data[i] = right.data[i];
		}
	}

	return *this;
}

template<typename T>
MyString<T>& MyString<T>::append(const MyString<T>& str) {

	for (int i = 0; i < str.getSize(); i++) {
		MyArray<T>::resize(1, str.data[i]);
	}

	return *this;
}

template<typename T>
MyString<T> MyString<T>::substr(size_t pos, size_t len) const {
	
	MyString temp(*this, pos, len);
	
	return temp;
	
}

template<typename T>
MyString<T>& MyString<T>::insert(size_t pos, const MyString<T>& str) {
	if (pos == MyArray<T>::getSize()) {
		for (int i = 0; i < str.getSize(); i++) {
			MyArray<T>::resize(1, str.data[i]);
		}
	}
	else {
		//先儲存要插入的後面的部分
		vector<T> tmp;
		unsigned int remainpos = pos;
		for (int i = remainpos; i < MyArray<T>::getSize(); i++) {
			tmp.push_back(MyArray<T>::data[i]);
		}
		
		//再從pos開始先全部刪除
		int count = 0;
		for (int i = pos; i < MyArray<T>::getSize(); i++, count++) {
			MyArray<T>::data[i] = NULL;
		}
		MyArray<T>::size -= count;

		//把要插入的部分儲存回去
		for (int i = 0; i < str.getSize(); i++) {
			MyArray<T>::resize(1, str.data[i]);
		}

		//最後把剩下的部分儲存回去
		for (int i = 0; i < tmp.size(); i++) {
			MyArray<T>::resize(1, tmp[i]);
		}

	}

	return *this;
}

template<typename T>
MyString<T>& MyString<T>::insert(size_t pos, const MyString<T>& str, size_t subpos, size_t sublen) {

	MyString sub(str, subpos, sublen);
	MyString<T>::insert(pos, sub);

	return *this;
}


template<typename T>
MyString<T>& MyString<T>::erase(size_t pos, size_t len) {

	//先儲存要刪除的後面的部分
	vector<T> tmp;
	unsigned int remainpos = len + pos;
	for (int i = remainpos; i < MyArray<T>::getSize(); i++) {
		tmp.push_back(MyArray<T>::data[i]);
	}

	//從pos開始全部刪除
	int count = 0;
	for (int i = pos; i < MyArray<T>::getSize(); i++, count++) {
		MyArray<T>::data[i] = NULL;
	}
	MyArray<T>::size -= count;

	//把剩下的部分儲存回去
	for (int i = 0; i < tmp.size(); i++) {
		MyArray<T>::resize(1, tmp[i]);
	}

	//更改capacity
	while (MyArray<T>::getSize() + 10 < MyArray<T>::getCapacity()) {
		MyArray<T>::reserve(MyArray<T>::getCapacity() / 2);
	}


	return *this;
}

template<typename T>
size_t MyString<T>::find(const MyString<T>& str, size_t pos) const {
	
	size_t ans = msize;
	bool isDiff;

	for (int i = pos; i < MyArray<T>::getSize(); i++) {
		//先比對第一個字
		if (str.data[0] == MyArray<T>::data[i]) {
			//如果第一個字相同的話
			isDiff = false;
			for (int j = 0; j < str.getSize(); j++) {
				//再連續比對整個詞
				if (MyArray<T>::data[i + j] != str.data[j]) {
					isDiff = true;
				}
			}
			//看看有沒有找到
			if (!isDiff) {
				ans = i;
			}
		}
		
	}
	return ans;

}

template<typename T>
size_t MyString<T>::find_first_of(const MyString<T>& str, size_t pos) const {
	 
	size_t ans = msize;
	
	for (int i = 0; i < str.getSize(); i++) {
		//str每個都要比對
		for (int j = pos; j < MyArray<T>::getSize(); j++) {
			if (str.data[i] == MyArray<T>::data[j]) {
				//如果比對到相同的字
				if (j < ans) {
					//比較有沒有比較小
					ans = j;
				}
			}
		}
	}

	return ans;

}#include <iostream>
#include "s1062041_MyArray.h"
using namespace std;





#pragma once
#ifndef s1062041_MyArray_h
#define s1062041_MyArray_h

#include <iostream>
using namespace std;

template<typename T>
class MyArray {
	
	template<typename T>
	friend ostream& operator<<(ostream&, const MyArray<T> &);
	//friend istream& operator>>(istream&, const MyArray&);

public:
	MyArray(int = 10);
	MyArray(int size, T value);	//.
	MyArray(const MyArray<T>&);
	~MyArray();

	const MyArray& operator=(const MyArray&);
	bool operator==(const MyArray&) const;
	bool operator!=(const MyArray&) const;
	MyArray operator+(const MyArray&) const;	//new
	MyArray& operator+=(const MyArray&);	//new

	int& operator[](int);
	int operator[](int) const;
	T& at(int);	//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t n, T);
	void reserve(size_t n = 0);
	void shrink_to_fit();	//new
	void clear();	//new
	bool isEmpty();	//new
	
	
protected:
	T* data;
	int size = 0;
	int capacity;

};

#endif // !s1062041_MyArray_h

template<typename T>
MyArray<T>::MyArray(int arrcapacity) {
	capacity = (arrcapacity > 10 ? arrcapacity : 10);
	data = new T[capacity]();
	/*for (int i = 0; i < capacity; i++) {
		data[i] = 0;
	}*/
}

template<typename T>
MyArray<T>::MyArray(int s, T value) {
	capacity = 10;
	data = new T[capacity]();
	for (int i = 0; i < s; i++) {
		resize(1, value);
	}
}

template<typename T>
MyArray<T>::MyArray(const MyArray<T> &arr) :capacity(arr.getCapacity()) {
	data = new T[capacity];
	size = arr.getSize();
	for (int i = 0; i < capacity; i++) {
		data[i] = arr.data[i];
	}
}

template<typename T>
MyArray<T>::~MyArray() {
	delete[] data;
}

template<typename T>
const MyArray<T> &MyArray<T>::operator=(const MyArray<T> &right) {
	
	if (&right != this) {
		if (getCapacity() != right.getCapacity()) {
			delete[] data;
			capacity = right.getCapacity();
			size = right.getSize();
			data = new T[capacity];
		}
		capacity = right.getCapacity();
		size = right.getSize();
		for (int i = 0; i < right.getSize(); i++) {
			data[i] = right.data[i];
		}
	}

	return *this;
}

template<typename T>
bool MyArray<T>::operator==(const MyArray<T> &right) const {
	if (getSize() != right.getSize())
		return false;
	for (int i = 0; i < getSize(); i++) {
		if (data[i] != right.data[i]) {
			return false;
		}
	}
	return true;
}

template<typename T>
bool MyArray<T>::operator!=(const MyArray<T> &right) const {
	return !(*this == right);
}

//operator +
template<typename T>
MyArray<T> MyArray<T>::operator+(const MyArray<T>& right) const {

	MyArray<T> sum(10);
	
	for (int i = 0; i < getSize(); i++) {
		sum.resize(1, data[i]);
	}
	
	sum += right;

	return sum;
}

//operator +=
template<typename T>
MyArray<T>& MyArray<T>::operator+=(const MyArray<T>& right) {
	for (int i = 0; i < right.getSize(); i++) {
		resize(1, right.data[i]);
	}
	
	return *this;
}

template<typename T>
int& MyArray<T>::operator[](int sub) {
	if (sub < 0 || sub >= getSize()) {
		cerr << "\nError: Subscript " << sub << " out of range" << endl;
		exit(1);
	}

	return data[sub];
}

template<typename T>
int MyArray<T>::operator[](int sub) const {
	if (sub < 0 || sub >= getSize()) {
		cerr << "\nError: Subscript " << sub << " out of range" << endl;
		exit(1);
	}
	return data[sub];
}

template<typename T>
void MyArray<T>::resize(size_t n, T c) {
	while (getSize()+n > getCapacity()) {
		reserve(getCapacity() * 2);
	}
	for (int i = getSize(); i < getSize()+n; i++) {
		data[i] = c;
	}
	size = getSize() + n;
}

template<typename T>
void MyArray<T>::reserve(size_t n) {
	MyArray<T> tmp(n);
	for (int i = 0; i < getSize(); i++) {
		tmp.data[i] = data[i];
	}
	tmp.size = getSize();

	*this = tmp;
}

template<typename T>
int MyArray<T>::getSize() const {
	return size;
}

template<typename T>
int MyArray<T>::getCapacity() const {
	return capacity;
}

//new
//shrink to fit
template<typename T>
void MyArray<T>::shrink_to_fit() {
	MyArray<T> tmp(getSize());
	tmp.size = getSize();
	for (int i = 0; i < getSize(); i++) {
		tmp.data[i] = data[i];
	}
	*this = tmp;
}

//clear
template<typename T>
void MyArray<T>::clear() {
	size = 0;
}

//isEmpty
template<typename T>
bool MyArray<T>::isEmpty() {
	if (getSize() == 0) {
		return true;
	}
	else {
		return false;
	}
}

//at
template<typename T>
T& MyArray<T>::at(int index) {
	if (index < 0 || index >= getSize()) {
		cerr << "\nError: Subscript " << index << " out of range" << endl;
	}
	else {
		return data[index];
	}
}
template<typename T>
T MyArray<T>::at(int index) const {
	if (index < 0 || index >= getSize()) {
		cerr << "\nError: Subscript " << index << " out of range" << endl;
		exit(1);
	}
	else {
		return data[index];
	}
}

template<typename T>
ostream& operator<<(ostream &output, const MyArray<T> &arr) {

	for (int i = 0; i < arr.size; i++) {
		
		output << arr.data[i] << ",";
	}


	return output;
}#include <iostream>
#include "s1062041_MyString.h"
using namespace std;

#ifndef s1062041_MyString_H
#define s1062041_MyString_H
#include <iostream>
#include <string>
#include <vector>
#include "s1062041_MyArray.h"
using namespace std;

template<typename T>
class MyString : public MyArray<T>
{
	//friend ostream &operator<<(ostream& output, const MyString& str);

public:
	MyString(); 
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString( const MyString<T> &str ); 
	// Constructs a copy of "str". (copy constructor)

	MyString( const MyString &str, size_t pos, size_t len = msize ); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString( const char *s ); 
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString(); 
	// Destroys the string object.

	const MyString& operator=(const MyString&);

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append( const MyString &str ); 
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert( size_t pos, const MyString &str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert( size_t pos, const MyString &str, size_t subpos, size_t sublen = msize );
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase( size_t pos, size_t len = msize ); 
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find( const MyString &str, size_t pos = 0 ) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of( const MyString &str, size_t pos = 0 ) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
	
}; // end class MyString

#endif

template<typename T>
MyString<T>::MyString():MyArray<T>(10) {
	
}

template<typename T>
MyString<T>::MyString(const char *s):MyArray<T>(strlen(s)) {
	for (int i = 0; i < strlen(s); i++) {
		MyArray<T>::resize(1, s[i]);
	}
}

template<typename T>
MyString<T>::MyString(const MyString<T>& str):MyArray<T>(str) {
	
}

template<typename T>
MyString<T>::MyString(const MyString& str, size_t pos, size_t len):MyArray<T>(10){
	
	for (int j = pos; j < pos + len; j++) {
		MyArray<T>::resize(1, str.data[j]);
	}

}

template<typename T>
MyString<T>::~MyString() {
	
}

template<typename T>
const MyString<T>& MyString<T>::operator=(const MyString<T>& right) {

	if (&right != this) {
		if (MyArray<T>::getCapacity() != right.getCapacity()) {
			delete[] MyArray<T>::data;
			MyArray<T>::capacity = right.getCapacity();
			MyArray<T>::size = right.getSize();
			MyArray<T>::data = new T[MyArray<T>::capacity];
		}
		MyArray<T>::capacity = right.getCapacity();
		MyArray<T>::size = right.getSize();
		for (int i = 0; i < right.getSize(); i++) {
			MyArray<T>::data[i] = right.data[i];
		}
	}

	return *this;
}

template<typename T>
MyString<T>& MyString<T>::append(const MyString<T>& str) {

	for (int i = 0; i < str.getSize(); i++) {
		MyArray<T>::resize(1, str.data[i]);
	}

	return *this;
}

template<typename T>
MyString<T> MyString<T>::substr(size_t pos, size_t len) const {
	
	MyString temp(*this, pos, len);
	
	return temp;
	
}

template<typename T>
MyString<T>& MyString<T>::insert(size_t pos, const MyString<T>& str) {
	if (pos == MyArray<T>::getSize()) {
		for (int i = 0; i < str.getSize(); i++) {
			MyArray<T>::resize(1, str.data[i]);
		}
	}
	else {
		//先儲存要插入的後面的部分
		vector<T> tmp;
		unsigned int remainpos = pos;
		for (int i = remainpos; i < MyArray<T>::getSize(); i++) {
			tmp.push_back(MyArray<T>::data[i]);
		}
		
		//再從pos開始先全部刪除
		int count = 0;
		for (int i = pos; i < MyArray<T>::getSize(); i++, count++) {
			MyArray<T>::data[i] = NULL;
		}
		MyArray<T>::size -= count;

		//把要插入的部分儲存回去
		for (int i = 0; i < str.getSize(); i++) {
			MyArray<T>::resize(1, str.data[i]);
		}

		//最後把剩下的部分儲存回去
		for (int i = 0; i < tmp.size(); i++) {
			MyArray<T>::resize(1, tmp[i]);
		}

	}

	return *this;
}

template<typename T>
MyString<T>& MyString<T>::insert(size_t pos, const MyString<T>& str, size_t subpos, size_t sublen) {

	MyString sub(str, subpos, sublen);
	MyString<T>::insert(pos, sub);

	return *this;
}


template<typename T>
MyString<T>& MyString<T>::erase(size_t pos, size_t len) {

	//先儲存要刪除的後面的部分
	vector<T> tmp;
	unsigned int remainpos = len + pos;
	for (int i = remainpos; i < MyArray<T>::getSize(); i++) {
		tmp.push_back(MyArray<T>::data[i]);
	}

	//從pos開始全部刪除
	int count = 0;
	for (int i = pos; i < MyArray<T>::getSize(); i++, count++) {
		MyArray<T>::data[i] = NULL;
	}
	MyArray<T>::size -= count;

	//把剩下的部分儲存回去
	for (int i = 0; i < tmp.size(); i++) {
		MyArray<T>::resize(1, tmp[i]);
	}

	//更改capacity
	while (MyArray<T>::getSize() + 10 < MyArray<T>::getCapacity()) {
		MyArray<T>::reserve(MyArray<T>::getCapacity() / 2);
	}


	return *this;
}

template<typename T>
size_t MyString<T>::find(const MyString<T>& str, size_t pos) const {
	
	size_t ans = msize;
	bool isDiff;

	for (int i = pos; i < MyArray<T>::getSize(); i++) {
		//先比對第一個字
		if (str.data[0] == MyArray<T>::data[i]) {
			//如果第一個字相同的話
			isDiff = false;
			for (int j = 0; j < str.getSize(); j++) {
				//再連續比對整個詞
				if (MyArray<T>::data[i + j] != str.data[j]) {
					isDiff = true;
				}
			}
			//看看有沒有找到
			if (!isDiff) {
				ans = i;
			}
		}
		
	}
	return ans;

}

template<typename T>
size_t MyString<T>::find_first_of(const MyString<T>& str, size_t pos) const {
	 
	size_t ans = msize;
	
	for (int i = 0; i < str.getSize(); i++) {
		//str每個都要比對
		for (int j = pos; j < MyArray<T>::getSize(); j++) {
			if (str.data[i] == MyArray<T>::data[j]) {
				//如果比對到相同的字
				if (j < ans) {
					//比較有沒有比較小
					ans = j;
				}
			}
		}
	}

	return ans;

}