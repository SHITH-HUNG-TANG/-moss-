#pragma once
#include<iostream>
#include<stdexcept>
using namespace std;

template <typename T>
class MyArray
{	//modify this class into a template class
	template <typename T>
	friend ostream& operator<<(ostream& output, const MyArray<T>& right);
	//friend istream& operator>>(istream&, MyArray&);
public:
	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(const MyArray<T>& copy);//
	~MyArray();//

	const MyArray<T>& operator=(const MyArray<T>& right); //
	bool operator==(const MyArray<T>& right) const; //
	bool operator!=(const MyArray<T>& right) const; //
	MyArray<T> operator+(const MyArray<T>& right) const;	//new
	MyArray<T>& operator+=(const MyArray<T>& right);		//new
	T& operator[](int num);//
	T operator[](int num) const;//
	T& at(int num);		//new
	T at(int num) const;	//new

	int getSize() const;//
	int getCapacity() const;//
	void resize(size_t s, T item);
	void reserve(size_t s);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

private:
	int size;
	int capacity;
	T* data;
};
class outofrange :public logic_error
{
public:
	outofrange()
		:logic_error("Out Of Range ") {}
};

template<typename T>
inline MyArray<T>::MyArray(int Capacity)
{
	capacity = Capacity;
	size = 0;
	data = new T[capacity];
}

template<typename T>
inline MyArray< T>::MyArray(int Size, T value)
{
	capacity = 10;
	size = Size;
	while (size > capacity)
	{
		capacity *= 2;
	}
	data = new T[capacity]();

	for (int i = 0; i < size; i++)
	{
		data[i] = value;
	}
	
}

template<typename T>
inline MyArray<T>::MyArray(const MyArray<T>& copy)
{
	capacity = copy.capacity;
	size = copy.size;
	data = new T[size]();
	for (int i = 0; i < size; i++)
		data[i] = copy.data[i];
}

template<typename T>
inline MyArray<T>::~MyArray()
{
	delete[] data;
}

template<typename T>
inline const MyArray<T>& MyArray<T>::operator=(const MyArray<T>& right)
{
	if (&right != this)
	{
		if (size != right.size)
		{
			delete[] data;
			size = right.size;
			data = new T[size]();
		}
		for (int i = 0; i < size; i++)
			data[i] = right.data[i];
	}
	return *this;
}

template<typename T>
inline bool MyArray<T>::operator==(const MyArray<T>& right) const
{
	if (size != right.size)
		return false;
	for (int i = 0; i < size; i++)
	{
		if (data[i] != right.data[i])
			return false;
	}
	return true;
}

template<typename T>
inline bool MyArray<T>::operator!=(const MyArray<T>& right) const
{
	return !(*this == right);
}

template<typename T>
inline MyArray<T> MyArray<T>::operator+(const MyArray<T>& right) const
{
	MyArray<T> sum;
	sum.size = size + right.size;
	sum.data = new T[sum.size]();
	for (int i = 0; i < size; i++)
	{
		sum.data[i] = data[i];
	}
	for (int i = size; i < sum.size; i++)
	{
		sum.data[i] = right.data[i - size];
	}
	return sum;
}

template<typename T>
inline MyArray<T>& MyArray<T>::operator+=(const MyArray<T>& right)
{
	//data + = right.data;
	MyArray<T> passive;
	passive.data = new T[size]();

	for (int i = 0; i < size; i++)
	{
		passive.data[i] = data[i];
	}
	size = size + right.size;
	data = new T[size];
	for (int i = 0; i < size - right.size; i++)
	{
		data[i] = passive.data[i];
	}
	for (int i = size - right.size; i < size; i++)
	{
		data[i] = right.data[i - size + right.size];
	}

	return *this;
}

template<typename T>
inline T& MyArray<T>::operator[](int num)
{
	if (num < 0 || num >= size)
	{
		cout << "\nError: Subscript " << num << " Out of Range" << endl;
		exit(1);
	}
	return data[num];
}

template<typename T>
inline T MyArray<T>::operator[](int num) const
{
	if (num < 0 || num >= size)
	{
		cout << "\nError: Subscript " << num << " Out of Range" << endl;
		exit(1);
	}
	return data[num];
}

template<typename T>
inline T& MyArray<T>::at(int num)
{
	if (num < 0 || num >= size)
	{
		throw outofrange();
	}
	return data[num];
}

template<typename T>
inline T MyArray<T>::at(int num) const
{

	if (num < 0 || num >= size)
	{
		throw outofrange();
	}
	return data[num];
}

template<typename T>
inline int MyArray<T>::getSize() const
{
	return size;
}
template<typename T>
inline int MyArray<T>::getCapacity() const
{
	return capacity;
}
template<typename T>
inline void MyArray<T>::resize(size_t s, T item)
{
	while (s > capacity)
		reserve(capacity * 2);
	if (s > size)
	{
		T* temp = new T[s]();
		for (int i = 0; i < size; i++)
		{
			temp[i] = data[i];
		}
		capacity = s;
		delete[] data;
		data = new T[s]();
		for (int i = 0; i < s; i++)
		{
			data[i] = temp[i];
		}
	
	}
	for (int i = size; i < s; i++)
			data[i] = item;
	size = s;
}

template<typename T>
inline void MyArray<T>::reserve(size_t s)
{
	if (s > capacity)
	{
		T* temp = new T[s]();
		for (int i = 0; i < size; i++)
		{
			temp[i] = data[i];
		}
		capacity = s;
		delete[] data;
		data = new T[s]();
		for (int i = 0; i < s; i++)
		{
			data[i] = temp[i];
		}
	}
}

template<typename T>
inline void MyArray<T>::shrink_to_fit()
{
	capacity = size;
}

template<typename T>
inline void MyArray<T>::clear()
{
	size = 0;
	capacity = 0;
}

template<typename T>
inline bool MyArray<T>::isEmpty()
{
	if (size == 0)
		return true;
	else
		return false;
}

template<typename T>
inline ostream& operator<<(ostream& output, const MyArray<T>& right)
{
	for (int i = 0; i < right.size; ++i)
	{
		output << right.data[i] << " ";
	}
	return output;
}
#pragma once
#include "s1081442_MyString.h"

MyString::MyString()
	:MyArray(10)
{
}

MyString::MyString(const MyString& str)
	: MyArray(str)
{
}

//abcdefg //pos = 3 //len = 4
MyString::MyString(const MyString& str, size_t pos, size_t len) //substr constructor
	:MyArray(10)
{	
	//判斷len是不是-1
	//	this = str的pos開始 , 長度是len
	if (len == -1)
	{
		len = str.getSize() - pos;
		this->resize(len, '\0');
		for (int i = 0; i < len; i++)
		{
			at(i) = str.at(i + pos);
		}
	
	}
	else
	{
		this->resize(len, '\0');
		for (int i = 0; i < len; i++)
		{
			at(i) = str.at(i + pos);
		}
	}

}

MyString::MyString(const char* s)
	:MyArray(10)
{	
	this->resize(strlen(s),'\0');
	for (int i = 0; i < strlen(s); i++)
	{
		at(i) = s[i];
	}
}

MyString::~MyString()
{
}

MyString& MyString::append(const MyString& str)
{	
	this->operator+=(str);
	this->resize(getSize(), '\0');
	return *this;
}

MyString MyString::substr(size_t pos, size_t len) const
{	
	//判斷len是不是-1
	MyString n;
	//n.at(i)
	//n = this裁掉的
	if (len == -1)
	{
		len = getSize() - pos;
		n.resize(len,'\0');
		for (int i = 0; i < len; i++)
		{
			n.at(i) = at(i + pos);
		}
		
	}
	else
	{
		n.resize(len, '\0');
		for (int i = 0; i < len; i++)
		{
			n.at(i) = at(i + pos);
		}
		
	}
	return n;
	
}

MyString& MyString::insert(size_t pos, const MyString& str)
{
	this->resize(getSize()+str.getSize(),'\0');
	for (int i = 0; i < pos; i++)
	{
		at(i) = at(i);
	}
	for (int i = getSize()-1; i >=pos+str.getSize() ; i--)
	{
		at(i) = at(i - str.getSize());
	}
	for (int i = pos; i < pos + str.getSize(); i++)
	{
		at(i) = str.at(i-pos);
	}
	return *this;
}

MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen)
{
	if (sublen == -1)
	{
		MyString a;
		sublen = str.getSize() - subpos;
		a.resize(sublen,'\0');
		this->resize(getSize() + sublen, '\0');
		for (int i = 0; i < sublen; i++)
		{
			a.at(i) = str.at(i + subpos);
		}
		for (int i = 0; i < pos; i++)
		{
			at(i) = at(i);
		}
		for (int i = getSize() - 1; i >= pos + sublen; i--)
		{
			at(i) = at(i - sublen);
		}
		for (int i = pos; i < pos + sublen; i++)
		{
			at(i) = a.at(i - pos);
		}
		return *this;
	}
	else
	{
		this->resize(getSize()+sublen, '\0');
		MyString b;
		b.resize(sublen, '\0');
		for (int i = 0; i < sublen; i++)
		{
			b.at(i) = str.at(i + subpos);
		}
		for (int i = 0; i < pos; i++)
		{
			at(i) = at(i);
		}
		for (int i = getSize() - 1; i >= pos + b.getSize(); i--)
		{
			at(i) = at(i - b.getSize());
		}
		for (int i = pos; i < pos + b.getSize(); i++)
		{
			at(i) = b.at(i - pos);
		}
		return *this;
	}
}


MyString& MyString::erase(size_t pos, size_t len)
{
	if (len == -1)
	{
		this->resize(pos, '\0');
		for (int i = 0; i < pos; i++)
		{
			at(i) = at(i);
		}
		return*this;
	}
	else
	{
		for (int i = 0; i < pos; i++)
		{
			at(i) = at(i);
		}
		for (int i = pos; i < getSize()-len; i++)
		{
			at(i) = at(i + len);

		}
		this->resize(getSize()-len, '\0');
		return *this;
	}
}

size_t MyString::find(const MyString& str, size_t pos) const
{
	MyString c;
	int w=0;
	c.resize(str.getSize() - pos, '\0');
	for (int i = 0; i < str.getSize()-pos; i++)
	{
		c.at(i) = str.at(i + pos);
	}
	for (int i = 0; i < getSize()-c.getSize(); i++)
	{
		if (at(i) == c.at(0))
		{
			for (int j = 0; j < c.getSize(); j++)
			{
				if (at(i + j) != c.at(j))
					break;
				else if (j == c.getSize() - 1 && at(i + j) == c.at(j))
				{
					return i;
					w++;
					break;
				}
					
			}
		}
		if (i == getSize() - c.getSize() - 1&&w==0)
		{
			return msize;
		}
	}
	
	
}

size_t MyString::find_first_of(const MyString& str, size_t pos) const
{
	MyString d;
	int w = 0;
	d.resize(str.getSize() - pos, '\0');
	for (int i = 0; i < str.getSize() - pos; i++)
	{
		d.at(i) = str.at(i + pos);
	}
	for (int i = 0; i < getSize(); i++)
	{
		for (int j = 0; j < d.getSize(); j++)
		{
			if (at(i) == d.at(j))
			{
				return i;
				w++;
				break;
			}
		}
		
	}
	if ( w == 0)
		{
			return msize;
		}
}

istream& operator>>(istream& input, MyString& str)
{
	string n; 
	cin >> n;
	int length = n.length();
	char* ptr = new char[length + 1];
	n.copy(ptr, length, 0); //從n的0開始丟長度length的資料進去ptr
	ptr[length] = '\0';
	MyString s(ptr);
	str = s;
	return input;
}
#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include"s1081442_MyArray.h"
using namespace std;

class MyString : public MyArray<char>
{
	//friend ostream &operator<<(ostream& output, const MyString& str);
	friend istream& operator>>(istream& input, MyString& str);
public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString& str);
	// Constructs a copy of "str". (copy constructor)
	MyString(const MyString& str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char* s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString& str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString& str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString& str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif
