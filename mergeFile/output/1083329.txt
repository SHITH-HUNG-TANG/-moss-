#include<iostream>
#include <string>
using namespace std;
#include "s1083329_MyArray.h"
#include <exception>
template<typename T>
MyArray<T>::MyArray() {
	size = 0;
	capacity = 10;
	data = new T[capacity]();
	for (int i = 0; i < capacity; i++)
	{
		data[i] = 0;
	}
}

template<typename T>
MyArray<T>::MyArray(int Size, T value) {
	size = Size;
	capacity = 10;
	while (size > capacity)capacity *= 2;
	data = new T[capacity];
	for (int i = 0; i < capacity; i++)
	{
		data[i] = value;
	}
}

template<typename T>
MyArray<T>::MyArray(const MyArray<T>& newone) {
	size = newone.size;
	capacity = newone.capacity;
	data = new T[newone.capacity]();
	for (int i = 0; i < capacity; i++)
	{
		data[i] = newone.data[i];
	}
}

template<typename T>
MyArray<T>::~MyArray() {
	delete[]data;
}

template<typename T>
MyArray<T>& MyArray<T>::operator=(const MyArray<T>& n) {
	capacity = n.capacity;
	size = n.size;
	data = new T[n.capacity]();
	for (int i = 0; i < n.capacity; i++)
	{
		data[i] = n.data[i];
	}
	return *this;
}

template<typename T>
bool MyArray<T>::operator==(const MyArray<T>& a) const {
	if (size != a.size)return false;
	else {
		for (int i = 0; i < size; i++) {
			if (a.data[i] != data[i])return false;
		}
	}
	return true;
}

template<typename T>
bool MyArray<T>::operator!=(const MyArray<T>& right) const {
	return!(*this == right);
}

template<typename T>
MyArray<T> MyArray<T>::operator+(const MyArray<T>& a) const {
	MyArray b(size + a.size, 0);
	/*for (int i = 0; i < a.size; i++)
		cout << a.data[i] << endl;*/
	int j = 0;
	for (int i = 0; i < size; i++)b.data[i] = data[i];
	for (int i = size; i < b.size; i++)
	{
		//for (int j = 0; j < a.size; j++)
		b.data[i] = a.data[j];
		j++;
	}
	return b;
}

template<typename T>
MyArray<T>& MyArray<T>:: operator+=(const MyArray<T>& b) {
	int tsize = size;
	resize(size + b.size, 0);
	int j = 0;
	/*for(int i=0;i<b.size;i++)
	cout << b.data[i] << endl;*/
	for (int i = tsize; i < size; i++)
	{
		//for (int j = 0; j < b.size; j++)
		data[i] = b.data[j];
		j++;
	}
	return *this;
}

template<typename T>
T& MyArray<T>:: operator[](int subscript) {
	return data[subscript];
}

template<typename T>
T MyArray<T>::operator[](int subscript) const {
	return data[subscript];
}

template<typename T>
T& MyArray<T>::at(int a) {
	if (a >= size)throw out();
	return data[a];
}

template<typename T>
T MyArray<T>::at(int a) const {
	if (a >= size)throw out();
	return data[a];
}

template<typename T>
int MyArray<T>::getSize() const {
	return size;
}

template<typename T>
int MyArray<T>::getCapacity() const {
	return capacity;
}

template<typename T>
void MyArray<T>::resize(size_t a, T item) {
	//cout << a << endl << size << endl;
	while (a > capacity)
	{
		reserve(capacity * 2);
	}
	if (a >= size)
	{
		for (int i = size; i < a; i++)
		{
			data[i] = item;
		}
	}
	else {
		for (int i = a; i < size; i++)data[i] = 0;
	}
	size = a;
}

template<typename T>
void MyArray<T>::reserve(size_t cap) {
	if (cap > capacity)capacity = cap;
	T* temp = new T[capacity]();
	//   if (capacity > cap) {
	for (int i = 0; i < capacity; i++)temp[i] = 0;
	for (int i = 0; i < capacity; i++) {
		temp[i] = data[i];
	}
	data = temp;

	/* else {
	 for (int i = 0; i < cap; i++)temp[i] = 0;
	 for (int i = 0; i < capacity; i++) {
	 temp[i] = data[i];
	 }
	 data = temp;
	 }*/
	if (size > cap) {
		size = cap;
	}

}

template<typename T>
void MyArray<T>::shrink_to_fit() {
	T* temp = new T[size];
	for (int i = 0; i < size; i++) {
		temp[i] = data[i];
	}
	capacity = size;
	data = temp;
}

template<typename T>
void MyArray<T>::clear() {
	size = 0;
	for (int i = 0; i < capacity; i++) {
		data[i] = 0;
	}
	capacity = 10;
}

template<typename T>
bool MyArray<T>::isEmpty()const {
	if (size == 0)return true;
	else return false;
}

template<typename T>
ostream& operator<<(ostream& output, const MyArray<T>& ans)
{
	if (ans.isEmpty() == true)output << " is empty" << endl;
	for (int i = 0; i < ans.size; i++) {
		output << ans.data[i];
		output << ", ";
	}
	return output;
}

template<typename T>
istream& operator>>(istream& input, MyArray<T>& ans)
{
	string a;
	input >> a;
	int al = a.length();
	ans.resize(al, 0);
	/*cout <<"anssize = "<< ans.getSize() << endl;
	for (int i = 0; i < al ; i++)
	{
		cout << a[i] << endl;
	}*/
	for (int i = 0; i < al ; i++)
	{
		ans.data[i] = a[i];
	}	
	return input;
}#ifndef s1083329_MyArray_H
#define s1083329_MyArray_H
#include<iostream>
#include <string>
#include <exception>
using namespace std;

class out :public exception
{
public:
	out()
		:exception("out_of_range") {};
};

template<typename T>
class MyArray :public out {	//modify this class into a template class
	template<typename T>
	friend ostream& operator<<(ostream&, const MyArray<T>&);
	friend istream& operator>><T>(istream&, MyArray<T>&);
public:
	MyArray();
	MyArray(int Size, T value);
	MyArray(const MyArray<T>&);
	~MyArray();

	MyArray& operator=(const MyArray<T>&);
	bool operator==(const MyArray<T>&) const;
	bool operator!=(const MyArray<T>&) const;
	MyArray operator+(const MyArray<T>&) const;	//new
	MyArray& operator+=(const MyArray<T>&);		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t size, T item = 0);
	void reserve(size_t size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty()const;			//new

private:
	int size;
	int capacity;
	T* data;
};

#endif // !MyArray#include<iostream>
#include <string>
using namespace std;
#include "s1083329_MyString.h"
#include <exception>


ostream& operator<<(ostream& output, const MyString& ans)
{
	if (ans.isEmpty() == true)output << " is empty" << endl;
	for (int i = 0; i < ans.getSize(); i++) {
		output << ans[i];
		output << ", ";
	}
	return output;
}

istream& operator>>(istream& input,  MyString& ans)
{
	string a;
	input >> a;
	int al = a.length();
	ans.resize(al, 0);
	for (int i = 0; i < al; i++)
	{
		ans[i] = a[i];
	}
	return input;
}

MyString :: MyString(int Size, char value)
	:MyArray(Size,value)
{

}

MyString::MyString() :MyArray(){

}

MyString::MyString(const MyString& str):MyArray(str){

}

MyString::MyString(const MyString& str, size_t pos, size_t len) {
	if (pos + len > str.getSize())resize(str.getSize() - pos, 0);
	else resize(len, 0);
	int i = 0;
	for (int j = pos; j < pos+len; j++)
	{
		this -> operator[](i) = str[j];
		i++;
		if (i == getSize())break;
	}
}

MyString::MyString(const char* s) {
	int i = 0;
	while (s[i] != '\0')i++;
	resize(i , 0);
	for (int j = 0; j < i; j++) {
		this -> operator[](j) = s[j];
	}
}

MyString::~MyString() {

}

MyString& MyString::append(const MyString& str) {
	int temsize = getSize();
	int j = 0;
	resize(getSize() + str.getSize()+1,0);
	this -> operator[](temsize) = ' ';
	for (int i = temsize + 1; i < getSize(); i++)
	{
			this -> operator[](i) = str[j];
			j++;
	}
	return *this;
}

MyString MyString::substr(size_t pos, size_t len ) const {
	MyString a;
	if (pos + len > getSize())a.resize(getSize() - pos, 0);
	else a.resize(len, 0);
	//a.resize(len, 0);
	int j = 0;
	for (int i = pos; i <pos + len+1; i++)
	{
			a[j] = this -> operator[](i);
			j++;
			if (j == a.getSize())break;
	}
	//cout <<"a = "<< a << endl;
	return a;
}

MyString& MyString::insert(size_t pos, const MyString& str) {
	MyString a;
	a.resize(getSize() + str.getSize(), 0);
	int i = 0;
		for (int j = 0; j < pos; j++) {
			a[i] = this -> operator[](j);
			i++;
		}
		for (int k = 0; k < str.getSize(); k++)
		{
			a[i] = str[k];
			i++;
		}
		for (int n = pos; n < getSize(); n++)
		{
			a[i] = this -> operator[](n);
			i++;
		}		
		*this = a;
		return *this;
}

MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen) {
	MyString a;
	if (subpos + sublen > str.getSize()) {
		a.resize(getSize() + str.getSize() - subpos, 0);
		sublen = str.getSize() - subpos;
	}
	else a.resize(getSize() +sublen, 0);
	//cout << a.getSize()<<endl;
	int i = 0;
	for (int j = 0; j < pos; j++) {
		a[i] = this -> operator[](j);
		i++;
	}
	for (int k = subpos; k <subpos+ sublen; k++)
	{
		a[i] = str[k];
		i++;
	}
	for (int n = pos ; n <= getSize(); n++)
	{
		a[i] = this -> operator[](n);
		i++;
		if (i == a.getSize())break;
	}
	*this = a;
	return a;
}

MyString& MyString::erase(size_t pos, size_t len) {
	MyString a;
	if (pos + len > getSize())a.resize(pos, 0);
	else a.resize(getSize() - len, 0);
	int i = 0;
	for (int j = 0; j < pos; j++) {
		a[i] = this -> operator[](j);
		i++;
	}
	for (int j = pos + len; j < getSize(); j++)
	{
		if (i == a.getSize())break;
		a[i] = this -> operator[](j);
		i++;
	}
	*this = a;
	return a;
}

int MyString::find(const MyString& str, size_t pos ) const {
	int check = 0,tem=0;
	for (int i = pos; i < getSize(); i++) {
		if (this -> operator[](i) == str[0]) {
			for (int j = 0; j < str.getSize(); j++)
			{
				if (this -> operator[](i) == str[j]) { check = 1; i++; }
				else
				{
					tem = j;
					check = 0;
					break;
				}
			}
			if (check == 1)return i - str.getSize();
			else  	i = i - tem;
		}
	}return msize;
}

int MyString::find_first_of(const MyString& str, size_t pos ) const {
	int check = 0, tem = 0;
	for (int i = pos; i < getSize(); i++) {
			for (int j = 0; j < str.getSize(); j++)
			{
				if (this -> operator[](i) == str[j]) { return i; }
			}
	}return msize;
}#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include <string>
#include "s1083329_MyArray.h"
#include "s1083329_MyArray.cpp"
using namespace std;

class MyString : public MyArray<char>
{
	friend ostream &operator<<(ostream& output, const MyString& str);
	friend istream& operator>>(istream&, MyString&);
public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10
	MyString (int Size, char value);
	MyString(const MyString& str);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString& str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char* s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString& str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString& str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString& str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

int find(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

int find_first_of(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif