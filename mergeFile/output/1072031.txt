#include "s1072031_MyArray.h"
#include <iostream>
#include <string>
#include <stdexcept>
using namespace std;

template <class T>

MyArray < T >::MyArray(int a) {
	size = 0;
	capacity = a;
	data = new T[capacity];
}
template <class T>
MyArray < T >::MyArray(int a, T b) {
	size = a;
	capacity = a;
	data = new T[capacity];
	for (int i = 0; i < a; ++i) {
		data[i] = b;
	}
}

template <class T>
MyArray < T >::MyArray(const MyArray<T>& right) {
	size = right.size;
	capacity = size;
	data = new T[capacity];
	for (int i = 0; i < size; ++i) {
		data[i] = right.data[i];
	}
}

template <class T>

int MyArray < T >::getSize() const {
	return size;
}
template <class T>
int MyArray < T >::getCapacity() const {
	return capacity;
}
template <class T>
void MyArray < T >::reserve(int n) {
	/*if (n < capacity) {
		capacity = n;
	}*/
	if (n > capacity) {
		T* temp = new T[n];
		for (int i = 0; i < size; i++) {
			temp[i] = data[i];
		}
		capacity = n;
		delete[] data;
		data = temp;
	}
}
template <class T>
void MyArray < T >::resize(int n, T num) {
	while (n > capacity) {
		reserve(capacity * 2);
	}
	if (n > size)
		for (int i = size; i < n; i++) {
			data[i] = num;
		}
	size = n;
}
template <class T>
void MyArray < T >::resize(int n) {
	while (n > capacity) {
		reserve(capacity * 2);
	}
	size = n;
}
template <class T>
bool MyArray < T >::isEmpty() {
	if (size == 0) {
		return true;
	}
	else {
		return false;
	}
}

template <class T>
void MyArray<T>::shrink_to_fit() {
	capacity = size;
}
template <class T>
void MyArray<T>::clear() {
	size = 0;
}
template <class T>
T& MyArray<T>::operator[](int n)
{
	if (n > size || n < 0)
		throw out_of_range("out of the array range");
	return data[n];
}
template <class T>
T MyArray<T>::operator[](int n) const {
	if (n > size || n < 0)
		throw out_of_range("out of the array range");
	return data[n];
}
template <class T>
const MyArray<T>& MyArray<T>::operator=(const MyArray<T>& right) {
	size = right.size;
	capacity = right.capacity;
	delete[] data;
	data = new T[capacity];
	for (int i = 0; i < size; i++) {
		data[i] = right.data[i];
	}
	return *this;
}
template <class T>
bool MyArray<T>::operator==(const MyArray<T>& right) const {
	if (size != right.size)
		return false;
	else {
		for (int i = 0; i < size; i++) {
			if (data[i] != right.data[i]) {
				return false;
			}
			else {
				return true;
			}
		}
	}
}
template <class T>
bool MyArray<T>::operator!=(const MyArray<T>& right) const {
	if (*this == right) {
		return false;
	}
	else {
		return true;
	}
}
template <class T>
MyArray<T> MyArray<T>::operator+(const MyArray<T>& right)const
{
	MyArray<T> result;
	result.size = size + right.size;
	result.capacity = capacity + right.capacity;
	result.data = new T[result.capacity];
	for (int i = 0; i < size; i++) {
		result.data[i] = data[i];
	}
	for (int j = 0; j < right.size; j++) {
		result.data[j + size] = right.data[j];
	}
	//cout << result << endl;
	return result;
}
template <class T>
MyArray<T>& MyArray<T>::operator+=(const MyArray<T>& right)
{
	int temp = size;
	size += right.size;
	(*this).reserve(capacity + right.capacity);
	for (int i = 0; i < right.size; i++) {
		data[i + temp] = right.data[i];
	}
	//*this = *this + right;
	return *this;
}



template <class T>
ostream& operator <<(ostream& output, const MyArray<T>& a) {
	/*for (int i = 0; i < a.size; i++) {
		output << a.data[i] << " ";
	}*/
	for (int i = 0; i < a.size; i++) {
		output << a.data[i];
	}
	output << endl;
	return output;
}
template <class T>
T& MyArray<T>::at(int n)
{
	if (n > size || n < 0)
		throw out_of_range("out of the array range");
	return data[n];
}
template <class T>
T MyArray<T>::at(int n) const
{
	if (n > size || n < 0)
		throw out_of_range("out of the array range");
	return data[n];
}


template <class T>
MyArray<T>::~MyArray()
{
	delete[]data;
}
#ifndef MYARRAY_H
#define MYARRAY_H
#include<iostream>
using namespace std;
template <class T>
class MyArray {	//modify this class into a template class
	template <class T>
	friend ostream& operator<<(ostream&, const MyArray&);
	//friend istream& operator>>(istream&, MyArray&);
public:

	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(const MyArray<T>&);
	~MyArray();

	const MyArray<T>& operator=(const MyArray<T>&);
	bool operator==(const MyArray<T>&) const;
	bool operator!=(const MyArray<T>&) const;

	MyArray<T> operator+(const MyArray<T>&) const;	//new

	MyArray<T>& operator+=(const MyArray<T>&);		//new

	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(int size, T item);
	void resize(int size);
	void reserve(int size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

//private:
	int size;
	int capacity;
	T* data;
};
#endif // !MyArray

#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include "s1072031_MyArray.h"
#include "s1072031_MyArray.cpp"
using namespace std;

class MyString : public MyArray <char>
{
	/*friend ostream& operator<<(ostream& output, const MyString& str) {
		for (int i = 0; i < str.size; i++) {
			output << str.data[i] << " ";
		}
		output << endl;
		return output;
	}*/

public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10
	MyString(const char s) :MyArray<char>() {
		size = 1;
		(*this).data[0] = s;
	}

	MyString(const MyString& str);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString& str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char* s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	//~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString& str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString& str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString& str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	int find(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	int find_first_of(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.



}; // end class MyString
MyString::MyString() :MyArray<char>() {

}
MyString::MyString(const MyString& str) : MyArray<char>() {
	*this = str;
}
MyString::MyString(const MyString& str, size_t pos, size_t len) : MyArray<char>() {
	*this = str.substr(pos, len);
}
MyString::MyString(const char* s) : MyArray<char>() {

	while (*s != '\0') {
		MyString tmp(*s);
		append(tmp);
		++s;
	}
}
MyString& MyString::insert(size_t pos, const MyString& str)
{
	MyString temp;
	temp.resize(size + str.size); 
	
	for (int i = 0; i < pos; i++) {
		temp.data[i] = data[i];
	}
	
	for (int i = 0; i < str.size; i++) {
		temp.data[pos + i] = str.data[i];
	}
	
	for (int i = 0; i < size-pos; i++) {
		temp.data[pos + i + str.size] = data[pos + i];
	}
	
	*this = temp;
	return *this;
}
MyString& MyString::append(const MyString& str) {
	*this += str;
	return *this;
}
MyString MyString::substr(size_t pos, size_t len) const
{
	MyString tmp;
	tmp.size = len;
	for (int i = 0; i < len; i++) {
		tmp.data[i] = (*this).data[pos + i];
	}
	return tmp;
}
MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen) {
	MyString tmp;
	tmp.resize(size + sublen);
	for (int i = 0; i < pos; i++) {
		tmp.data[i] = data[i];
	}
	for (int j = 0; j < sublen; j++) {
		tmp.data[pos + j] = str.data[subpos + j];
	}
	
	for (int j = 0; j < size - pos; j++) {
		tmp.data[pos +sublen+ j] = data[pos + j];
	}
	*this = tmp;
	return *this;
}
MyString& MyString::erase(size_t pos, size_t len) {
	MyString tmp;
	tmp.size = size - len;
	for (int i = 0; i < pos; i++) {
		tmp.data[i] = data[i];
	}
	for (int j = 0; j < tmp.size; j++) {
		tmp.data[pos + j] = data[pos + len + j];
	}
	*this = tmp;
	return *this;
}
int MyString:: find(const MyString& str, size_t pos) const {
	bool check = false;
	int n = 0;
	for (int i = pos; i < size; i++) {
		if (data[i] == str.data[0]) {
			for (int j = 1; j < str.size; j++) {
				if (data[i+j] != str.data[j]) {
					check = false;
				}
				else if (data[i + j] == str.data[j] && j == str.size - 1) {
					check = true;
					n = i;
					break;
				}
			}
		}
		if (check == true) {
			break;
		}
	}
	if (check == true) {
		return n;
	}
	else if(check==false) {
		return msize;
	}
}
int MyString::find_first_of(const MyString& str, size_t pos) const {
	int n;
	bool check = false;
	for (int i = pos; i < size; i++) {
		for (int j = 0; j < str.size; j++) {
			if (data[i] == str.data[j]) {
				check = true;
				n = i;
				break;
			}
		}
		if (check == true) {
			break;
		}
	}
	if (check == true) {
		return n;
	}else if (check == false) {
		return  msize;
	}
}
#endif#include "s1072031_MyArray.h"
#include <iostream>
#include <string>
#include <stdexcept>
using namespace std;

template <class T>

MyArray < T >::MyArray(int a) {
	size = 0;
	capacity = a;
	data = new T[capacity];
}
template <class T>
MyArray < T >::MyArray(int a, T b) {
	size = a;
	capacity = a;
	data = new T[capacity];
	for (int i = 0; i < a; ++i) {
		data[i] = b;
	}
}

template <class T>
MyArray < T >::MyArray(const MyArray<T>& right) {
	size = right.size;
	capacity = size;
	data = new T[capacity];
	for (int i = 0; i < size; ++i) {
		data[i] = right.data[i];
	}
}

template <class T>

int MyArray < T >::getSize() const {
	return size;
}
template <class T>
int MyArray < T >::getCapacity() const {
	return capacity;
}
template <class T>
void MyArray < T >::reserve(int n) {
	/*if (n < capacity) {
		capacity = n;
	}*/
	if (n > capacity) {
		T* temp = new T[n];
		for (int i = 0; i < size; i++) {
			temp[i] = data[i];
		}
		capacity = n;
		delete[] data;
		data = temp;
	}
}
template <class T>
void MyArray < T >::resize(int n, T num) {
	while (n > capacity) {
		reserve(capacity * 2);
	}
	if (n > size)
		for (int i = size; i < n; i++) {
			data[i] = num;
		}
	size = n;
}
template <class T>
void MyArray < T >::resize(int n) {
	while (n > capacity) {
		reserve(capacity * 2);
	}
	size = n;
}
template <class T>
bool MyArray < T >::isEmpty() {
	if (size == 0) {
		return true;
	}
	else {
		return false;
	}
}

template <class T>
void MyArray<T>::shrink_to_fit() {
	capacity = size;
}
template <class T>
void MyArray<T>::clear() {
	size = 0;
}
template <class T>
T& MyArray<T>::operator[](int n)
{
	if (n > size || n < 0)
		throw out_of_range("out of the array range");
	return data[n];
}
template <class T>
T MyArray<T>::operator[](int n) const {
	if (n > size || n < 0)
		throw out_of_range("out of the array range");
	return data[n];
}
template <class T>
const MyArray<T>& MyArray<T>::operator=(const MyArray<T>& right) {
	size = right.size;
	capacity = right.capacity;
	delete[] data;
	data = new T[capacity];
	for (int i = 0; i < size; i++) {
		data[i] = right.data[i];
	}
	return *this;
}
template <class T>
bool MyArray<T>::operator==(const MyArray<T>& right) const {
	if (size != right.size)
		return false;
	else {
		for (int i = 0; i < size; i++) {
			if (data[i] != right.data[i]) {
				return false;
			}
			else {
				return true;
			}
		}
	}
}
template <class T>
bool MyArray<T>::operator!=(const MyArray<T>& right) const {
	if (*this == right) {
		return false;
	}
	else {
		return true;
	}
}
template <class T>
MyArray<T> MyArray<T>::operator+(const MyArray<T>& right)const
{
	MyArray<T> result;
	result.size = size + right.size;
	result.capacity = capacity + right.capacity;
	result.data = new T[result.capacity];
	for (int i = 0; i < size; i++) {
		result.data[i] = data[i];
	}
	for (int j = 0; j < right.size; j++) {
		result.data[j + size] = right.data[j];
	}
	//cout << result << endl;
	return result;
}
template <class T>
MyArray<T>& MyArray<T>::operator+=(const MyArray<T>& right)
{
	int temp = size;
	size += right.size;
	(*this).reserve(capacity + right.capacity);
	for (int i = 0; i < right.size; i++) {
		data[i + temp] = right.data[i];
	}
	//*this = *this + right;
	return *this;
}



template <class T>
ostream& operator <<(ostream& output, const MyArray<T>& a) {
	/*for (int i = 0; i < a.size; i++) {
		output << a.data[i] << " ";
	}*/
	for (int i = 0; i < a.size; i++) {
		output << a.data[i];
	}
	output << endl;
	return output;
}
template <class T>
T& MyArray<T>::at(int n)
{
	if (n > size || n < 0)
		throw out_of_range("out of the array range");
	return data[n];
}
template <class T>
T MyArray<T>::at(int n) const
{
	if (n > size || n < 0)
		throw out_of_range("out of the array range");
	return data[n];
}


template <class T>
MyArray<T>::~MyArray()
{
	delete[]data;
}
#ifndef MYARRAY_H
#define MYARRAY_H
#include<iostream>
using namespace std;
template <class T>
class MyArray {	//modify this class into a template class
	template <class T>
	friend ostream& operator<<(ostream&, const MyArray&);
	//friend istream& operator>>(istream&, MyArray&);
public:

	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(const MyArray<T>&);
	~MyArray();

	const MyArray<T>& operator=(const MyArray<T>&);
	bool operator==(const MyArray<T>&) const;
	bool operator!=(const MyArray<T>&) const;

	MyArray<T> operator+(const MyArray<T>&) const;	//new

	MyArray<T>& operator+=(const MyArray<T>&);		//new

	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(int size, T item);
	void resize(int size);
	void reserve(int size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

//private:
	int size;
	int capacity;
	T* data;
};
#endif // !MyArray

#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include "s1072031_MyArray.h"
#include "s1072031_MyArray.cpp"
using namespace std;

class MyString : public MyArray <char>
{
	/*friend ostream& operator<<(ostream& output, const MyString& str) {
		for (int i = 0; i < str.size; i++) {
			output << str.data[i] << " ";
		}
		output << endl;
		return output;
	}*/

public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10
	MyString(const char s) :MyArray<char>() {
		size = 1;
		(*this).data[0] = s;
	}

	MyString(const MyString& str);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString& str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char* s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	//~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString& str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString& str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString& str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	int find(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	int find_first_of(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.



}; // end class MyString
MyString::MyString() :MyArray<char>() {

}
MyString::MyString(const MyString& str) : MyArray<char>() {
	*this = str;
}
MyString::MyString(const MyString& str, size_t pos, size_t len) : MyArray<char>() {
	*this = str.substr(pos, len);
}
MyString::MyString(const char* s) : MyArray<char>() {

	while (*s != '\0') {
		MyString tmp(*s);
		append(tmp);
		++s;
	}
}
MyString& MyString::insert(size_t pos, const MyString& str)
{
	MyString temp;
	temp.resize(size + str.size); 
	
	for (int i = 0; i < pos; i++) {
		temp.data[i] = data[i];
	}
	
	for (int i = 0; i < str.size; i++) {
		temp.data[pos + i] = str.data[i];
	}
	
	for (int i = 0; i < size-pos; i++) {
		temp.data[pos + i + str.size] = data[pos + i];
	}
	
	*this = temp;
	return *this;
}
MyString& MyString::append(const MyString& str) {
	*this += str;
	return *this;
}
MyString MyString::substr(size_t pos, size_t len) const
{
	MyString tmp;
	tmp.size = len;
	for (int i = 0; i < len; i++) {
		tmp.data[i] = (*this).data[pos + i];
	}
	return tmp;
}
MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen) {
	MyString tmp;
	tmp.resize(size + sublen);
	for (int i = 0; i < pos; i++) {
		tmp.data[i] = data[i];
	}
	for (int j = 0; j < sublen; j++) {
		tmp.data[pos + j] = str.data[subpos + j];
	}
	
	for (int j = 0; j < size - pos; j++) {
		tmp.data[pos +sublen+ j] = data[pos + j];
	}
	*this = tmp;
	return *this;
}
MyString& MyString::erase(size_t pos, size_t len) {
	MyString tmp;
	tmp.size = size - len;
	for (int i = 0; i < pos; i++) {
		tmp.data[i] = data[i];
	}
	for (int j = 0; j < tmp.size; j++) {
		tmp.data[pos + j] = data[pos + len + j];
	}
	*this = tmp;
	return *this;
}
int MyString:: find(const MyString& str, size_t pos) const {
	bool check = false;
	int n = 0;
	for (int i = pos; i < size; i++) {
		if (data[i] == str.data[0]) {
			for (int j = 1; j < str.size; j++) {
				if (data[i+j] != str.data[j]) {
					check = false;
				}
				else if (data[i + j] == str.data[j] && j == str.size - 1) {
					check = true;
					n = i;
					break;
				}
			}
		}
		if (check == true) {
			break;
		}
	}
	if (check == true) {
		return n;
	}
	else if(check==false) {
		return msize;
	}
}
int MyString::find_first_of(const MyString& str, size_t pos) const {
	int n;
	bool check = false;
	for (int i = pos; i < size; i++) {
		for (int j = 0; j < str.size; j++) {
			if (data[i] == str.data[j]) {
				check = true;
				n = i;
				break;
			}
		}
		if (check == true) {
			break;
		}
	}
	if (check == true) {
		return n;
	}else if (check == false) {
		return  msize;
	}
}
#endif