#ifndef MYARRAY_H
#define MYARRAY_H
#include<iostream>
#include <stdexcept>
#include <string>
using namespace std;

template<typename T>
class MyArray {	//modify this class into a template class

	template<typename T>friend ostream& operator<<(ostream&, const MyArray<T>&);
	template<typename T>friend istream& operator>>(istream&, MyArray&);
public:
	MyArray(int in_capacity = 10);
	MyArray(int s, T v);
	MyArray(const MyArray &);
	~MyArray();
	
	const MyArray& operator=(const MyArray&);
	bool operator==(const MyArray&) const;
	bool operator!=(const MyArray&) const;
	MyArray operator+(const MyArray&) const;	//new
	MyArray& operator+=(const MyArray&) ;		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	void setSize(int i);
	int getCapacity() const;
	void resize(size_t size, T item = 0);
	void reserve(size_t size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new
	T getValue(int index);
	T getValue(int index)const;
	void setValue(int index,T value);
private:
	int size;
	int capacity;
	T* data;
};
template<typename T>
MyArray<T>::MyArray(int in_capacity) {
	capacity = in_capacity;
	size = 0;
	data = new T[capacity]();
}

template<typename T>
MyArray<T>::MyArray(int s, T v) {
	capacity = 10;
	if (s > capacity) {
		reserve(2 * capacity);
	}
	size = s;
	data = new T[capacity]();
	for (int i = 0; i < size; i++) {
		data[i] = v;
	}
}



template<typename T>
MyArray<T>::MyArray(const MyArray<T>& right) {
	capacity = right.capacity;
	size = right.size;
	data = new T[capacity]();
	for (int i = 0; i < right.size; i++) {
		data[i] = right.data[i];
	}
}

template<typename T>
MyArray<T>::~MyArray() {
	delete[]data;
}

template<typename T>
const MyArray<T>& MyArray<T>:: operator=(const MyArray& right) {
	if (capacity < right.capacity) {
		capacity = right.capacity;
		delete[]data;
		data = new T[capacity]();
	}
	for (int i = 0; i < right.size; i++) {
		data[i] = right.data[i];
	}
	setSize(right.size);
	return *this;
}

template<typename T>
bool MyArray<T>:: operator==(const MyArray& right) const {
	if (size != right.size) {
		return false;
	}
	else {
		for (int i = 0; i < size; i++) {
			if (data[i] != right.data[i]) {
				return false;
			}
		}
		return true;
	}
}

template<typename T>
bool MyArray<T>:: operator!=(const MyArray& right) const {
	if (!(*this == right)) {
		return true;
	}
	else {
		return false;
	}
}

template<typename T>
MyArray<T> MyArray<T>:: operator+(const MyArray& right) const {
	MyArray b = *this;
	int k = size + right.size;
	b.reserve(k);
	b.size = k;
	for (int i = size; i < k; i++) {
		int t = 0;
		b.data[i] = right.data[t];
		t++;
	}

	return b;
}

template<typename T>
MyArray<T>& MyArray<T>::operator+=(const MyArray& right) {
	int k = size + right.size;
	reserve(k);
	int t = size;
	size = k;
	for (int i = t; i < k; i++) {
		int t = 0;
		data[i] = right.data[t];
		t++;
	}
	return *this;
}

template<typename T>
T& MyArray<T>:: operator[](int i) {
	return data[i];
}

template<typename T>
T MyArray<T>::operator[](int i) const {
	return data[i];
}

template<typename T>
T& MyArray<T>::at(int i) {
	if (i > size) {
		throw out_of_range("index is out of range");
	}
	return data[i];
}

template<typename T>
T MyArray<T>::at(int i) const {
	if (i > size) {
		throw out_of_range("index is out of range");
	}
	return data[i];
}

template<typename T>
int MyArray<T>::getSize() const {
	return size;
}

template<typename T>
int MyArray<T>::getCapacity() const {
	return capacity;
}

template<typename T>
void MyArray<T>::resize(size_t s, T item) {

	if (size > s) {
		for (int i = s; i < size; i++) {
			data[i] = NULL;
		}
		size = s;
	}
	else if (size == s) {
		return;
	}
	else {
		while (capacity < s) {
			reserve(2 * capacity);
		}
		for (int i = size; i < s; i++) {
			data[i] = item;
		}
		size = s;
	}
}
template<>
void MyArray<string>::resize(size_t s, string item) {

	if (size > s) {
		for (int i = s; i < size; i++) {
			data[i] = "";
		}
		size = s;
	}
	else if (size == s) {
		return;
	}
	else {
		while (capacity < s) {
			reserve(2 * capacity);
		}
		for (int i = size; i < s; i++) {
			data[i] = item;
		}
		size = s;
	}
}

template<typename T>
void MyArray<T>::reserve(size_t newcapacity) {
	T* t = new T[newcapacity]();
	for (int i = 0; i < size; i++) {
		t[i] = data[i];
	}
	delete[]data;
	data = t;
	capacity = newcapacity;
}

template<typename T>
void MyArray<T>::shrink_to_fit() {
	reserve(size);
}

template<typename T>
void MyArray<T>::clear() {
	for (int i = 0; i < size; i++) {
		data[i] = NULL;
	}
}
template<>
void MyArray<string>::clear() {
	for (int i = 0; i < size; i++) {
		data[i] = "";
	}
}

template<typename T>
bool MyArray<T>::isEmpty() {
	for (int i = 0; i < size; i++) {
		if (data[i] != NULL) {
			return false;
		}
	}
	return true;
}
template<>
bool MyArray<string>::isEmpty() {
	for (int i = 0; i < size; i++) {
		if (data[i] != "") {
			return false;
		}
	}
	return true;
}

template<typename T>
ostream& operator <<(ostream& out, const MyArray<T>& right) {
	for (int i = 0; i < right.size; i++) {
		out << right.data[i] << " ";
	}
	return out;
}
template<>
ostream& operator <<(ostream& out, const MyArray<char>& right) {
	for (int i = 0; i < right.size; i++) {
		out << right.data[i];
	}
	return out;
}
template<typename T>
istream& operator>>(istream& in, MyArray<T>& right) {
	string digit;
	getline(in, digit);
	while (right.getCapacity() < digit.length()) {
		right.reserve(2 * right.getCapacity());
	}
	right.setSize(digit.length());
	for (int i = 0; i < digit.length(); i++) {
		right.setValue(i, digit[i]);
	}
	return in;
}


template<typename T>
T MyArray<T>::getValue(int index) {
	return data[index];
}
template<typename T>
T MyArray<T>::getValue(int index)const {
	return data[index];
}

template<typename T>
void MyArray<T>::setValue(int index,T value) {
	data[index] = value;
}
template<typename T>
void MyArray<T>::setSize(int i) {
	size = i;
}


#endif // !MyArray

#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include "MyArray_hw701.h"
using namespace std;


class MyString : public MyArray<char>
{
	/*template<char>friend ostream &operator<<(ostream& output, const MyString<char>& str);
	template<char>friend istream &operator>>(istream& in, MyString<char>&str);*/

public:
	MyString(); 
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString( const MyString &str ); 
	// Constructs a copy of "str". (copy constructor)

	MyString( const MyString &str, size_t pos, size_t len = msize ); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString( const char *s ); 
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString(); 
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append( const MyString &str ); 
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert( size_t pos, const MyString &str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert( size_t pos, const MyString &str, size_t subpos, size_t sublen = msize );
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase( size_t pos, size_t len = msize ); 
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find( const MyString &str, size_t pos = 0 ) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of( const MyString &str, size_t pos = 0 ) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString
//constructor
MyString::MyString():MyArray() {
	
}

 //copy constructor
MyString::MyString(const MyString& str):MyArray(str) {
}
 //substr constructor
MyString::MyString(const MyString& str, size_t pos, size_t len) {
	while (len > getCapacity()) {
		reserve(2 * getCapacity());
	}
	setSize(len);
	for (int i = 0; i < len; i++) {
		setValue(i, str.getValue(pos));
		pos++;
	}
}

     //
MyString::MyString(const char* s):MyArray() {
	if (strlen(s) > getCapacity()) {
		reserve(2 * getCapacity());
	}
	for (int i = 0; i < strlen(s); i++) {
		setValue(i, s[i]);
	}
	setSize(strlen(s));
}


MyString::~MyString() {
}


MyString& MyString::append(const MyString& str) {
	int k = getSize() + str.getSize();
	while (k > getCapacity()) {
		reserve(2 * getCapacity());
	}
	int t = 0;
	for (int i = getSize(); i < k; i++) {
		
		setValue(i,str.getValue(t));
		t++;
	}
	setSize(k);
	return *this;
}



MyString MyString::substr(size_t pos, size_t len) const {
	MyString str2;
	while (str2.getCapacity() < len) {
		str2.reserve(2 * str2.getCapacity());
	}
	str2.setSize(len);
	
	for (int i = 0; i < len; i++) {
		str2.setValue(i,getValue(pos));
		pos++;
	}
	return str2;
}


MyString& MyString::insert(size_t pos, const MyString& str) {
	if (pos < getSize()) {
		while (getSize() + str.getSize() > getCapacity()) {
			reserve(2 * getCapacity());
		}
		for (int i = getSize() - 1; i >= pos; i--) {
			setValue(i + str.getSize(), getValue(i));
		}
		for (int i = 0; i < str.getSize(); i++) {
			int k = 0;
			setValue(pos, str.getValue(k));
			pos++;
			k++;
		}
		setSize(getSize() + str.getSize());
	}
	else {
		cout << "not insert" << endl;
	}
	return *this;
}


MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen) {
	if (pos < getSize()) {
		while (getSize() + sublen > getCapacity()) {
			reserve(2 * getCapacity());
		}
		for (int i = getSize() - 1; i >= pos; i--) {
			setValue(i + sublen, getValue(i));
		}
		for (int i = 0; i < sublen; i++) {
			setValue(pos, str.getValue(subpos));
			pos++;
			subpos++;
		}
		setSize(getSize() + sublen);
	}
	else {
		cout << "not insert" << endl;
	}
	
	return *this;
}

MyString& MyString::erase(size_t pos, size_t len) {
	for (int i = 0; i < len; i++) {
		setValue(pos, NULL);
		pos++;
	}
	return *this;
}

size_t MyString::find(const MyString& str, size_t pos) const {
	for (int i = pos; i < getSize(); i++) {
		if (str.getValue(0) == getValue(i)) {
			int t = i;
			i++;
			int k = 1;
			while (k < str.getSize()) {
				if (str.getValue(k) == getValue(i)) {
					k++;
					i++;
				}
				else {
					break;
				}
			}
			if (k == 4) {
				return t;
			}
		}
			
	}
	return msize;
}

size_t MyString::find_first_of(const MyString& str, size_t pos) const {
	for (int i = pos; i < getSize(); i++) {
		for (int k = 0; k < str.getSize(); k++) {
			if (str.getValue(k) == getValue(i)) {
				return i;
			}
		}
	}
	return msize;
}

/*template <char>
ostream& operator<<(ostream& output, const MyString<char>& str) {
	for (int i = 0; i < str.getSize(); i++) {
		output << str.getValue(i);
	}
	return output;
}
template <char>
istream& operator>>(istream& in, MyString<char>& str) {
	string digit;
	in.get(digit);
	while (str.getCapacity() < digit.length()) {
		str.reserve(2 * str.getCapacity());
	}
	for (int i = 0; i < digit.length(); i++) {
		str.setValue(i, digit[i]);
	}
	return in;
}*/
#endif