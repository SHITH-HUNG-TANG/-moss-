
#ifndef S1083302_MYARRAY_H
#define S1083302_MYARRAY_H
#include<iostream>
#include<ostream>
#include<stdexcept>
#include<exception>
using namespace std;

template<typename T>
class MyArray {	//modify this class into a template class
	template<typename T>
	friend ostream& operator<<(ostream&, const MyArray<T>&);
	//friend istream& operator>>(istream&, MyArray&);
public:
	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(const MyArray<T>&);
	~MyArray();


	const MyArray<T>& operator=(const MyArray<T>&);
	bool operator==(const MyArray<T>&) const;
	bool operator!=(const MyArray<T>&) const;
	MyArray<T> operator+(const MyArray<T>&) const;	//new
	MyArray<T>& operator+=(const MyArray<T>&);		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t size, T item);
	void reserve(size_t size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

private:
	int size;
	int capacity = 10;
	T* data;
};
// !MyArray
class at_exception :public logic_error
{
public:
	at_exception()
		:logic_error("error: out of range") {};
};
template<typename T>
ostream& operator<<(ostream& input, const MyArray<T>& right)
{
	for (int i = 0;i < right.size;i++)
	{
		input << right.data[i] << " ";
	}
	return input;
}
template<typename T>
MyArray<T>::MyArray(int Capacity)
{
	size = 0;
	//while (Capacity > capacity)
		//capacity *= 2;
	capacity = Capacity;
	data = new T[capacity];
}

template<typename T>
MyArray<T>::MyArray(int Size, T value)
{
	while (Size > capacity)
		capacity *= 2;
	data = new T[capacity];
	size = Size;
	for (int i = 0;i < size;i++)
		data[i] = value;
}

template<typename T>
MyArray<T>::MyArray(const MyArray<T>& right)
{
	capacity = right.capacity;
	size = right.size;
	data = new T[capacity];
	for (int i = 0;i < size;i++)
		data[i] = right.data[i];
}

template<typename T>
MyArray<T>::~MyArray()
{
	delete[]data;
}

template<typename T>
const MyArray<T>& MyArray<T>::operator=(const MyArray<T>& right)
{
	resize(right.size, '0');
	for (int i = 0;i < right.size;i++)
	{
		data[i] = right.data[i];
	}
	return *this;
}

template<typename T>
bool MyArray<T>::operator==(const MyArray<T>& right) const
{
	if (size != right.size)
		return false;
	else
	{
		for (int i = 0;i < size;i++)
		{
			if (data[i] != right[i])
				return false;
		}
		return true;
	}
}

template<typename T>
bool MyArray<T>::operator!=(const MyArray<T>& right) const
{
	return !(*this == right);
}

template<typename T>
MyArray<T> MyArray<T>::operator+(const MyArray<T>& right) const
{
	MyArray<T> ans;
	ans.resize(size + right.size, '0');
	for (int i = 0;i < size;i++)
		ans.data[i] = data[i];
	for (int i = size;i < ans.size;i++)
		ans.data[i] = right.data[i - size];
	return ans;
}

template<typename T>
MyArray<T>& MyArray<T>::operator+=(const MyArray<T>& right)
{
	MyArray<T> ans;
	ans.resize(size + right.size, '0');
	for (int i = 0;i < size;i++)
		ans.data[i] = data[i];
	for (int i = size;i < ans.size;i++)
		ans.data[i] = right.data[i - size];

	*this = ans;
	return *this;
}

template<typename T>
T& MyArray<T>::operator[](int sub)
{
	return data[sub];
}

template<typename T>
T MyArray<T>::operator[](int sub) const
{
	return data[sub];
}

template<typename T>
T& MyArray<T>::at(int sub)
{
	if (sub < 0 || sub >= size)
	{
		throw at_exception();
	}
	return data[sub];
}

template<typename T>
T MyArray<T>::at(int sub) const
{
	if (sub < 0 || sub >= size)
	{
		throw at_exception();
	}
	return data[sub];
}

template<typename T>
int MyArray<T>::getSize() const
{
	return size;
}

template<typename T>
int MyArray<T>::getCapacity() const
{
	return capacity;
}

template<typename T>
void MyArray<T>::resize(size_t n, T item)
{
	while (n > capacity)
	{
		reserve(2 * capacity);
	}
	for (int i = size;i < n;i++)
		data[i] = item;
	size = n;
}

template<typename T>
void MyArray<T>::reserve(size_t n)
{
	T* temp = new T[n]();
	for (int i = 0;i < size;i++)
		temp[i] = data[i];
	delete[] data;
	data = temp;
	capacity = n;
}

template<typename T>
void MyArray<T>::shrink_to_fit()
{
	reserve(size);
}

template<typename T>
void MyArray<T>::clear()
{
	resize(0, '\0');
}

template<typename T>
bool MyArray<T>::isEmpty()
{
	if (size == 0)
		return true;
	else
		return false;
}

#endif // !1
#pragma once
#include "s1083302_MyString.h"
using namespace std;

MyString::MyString()
	:MyArray<char>(10,' ')
{
	resize(0, ' ');
}

MyString::MyString(const MyString& str)
	:MyArray<char>(str)
{
}

MyString::MyString(const MyString& str, size_t pos, size_t len)
	:MyArray(10)
{
	if (len == msize)
		len = str.getSize() - pos;
	resize(len, '0');
	for (int i = 0;i < getSize();i++)
	{
		at(i) = str.at(i + pos);
	}
}

MyString::MyString(const char* s)
	:MyArray(10,'0')
{
	int i = 0, j = 0;
	int count = 0;
	while (*(s + i) != '\0')
	{
		count++;
		i++;
	}
	resize(count, '0');
	while (*(s + j) != '\0')
	{
		at(j) = *(s + j);
		j++;
	}
}

MyString::~MyString()
{

}

MyString& MyString::append(const MyString& str)
{
	*this += str;
	return *this;
}

MyString MyString::substr(size_t pos, size_t len) const
{
	if (len == msize)
		len = getSize() - pos;
	MyString temp;
	temp.resize(len, '0');
	for (int i = 0;i < temp.getSize();i++)
	{
		temp.at(i) = at(i + pos);
	}
	return temp;
}

MyString& MyString::insert(size_t pos, const MyString& str)
{
	MyString temp;
	temp.resize((getSize() + str.getSize()),'0');
	for (int i = 0;i < pos;i++)
		temp.at(i) = at(i);
	for (int i = 0;i < str.getSize();i++)
		temp.at(i + pos) = str.at(i);
	for (int i = pos + str.getSize();i < temp.getSize();i++)
		temp.at(i) = at(pos + (i - (pos + str.getSize())));
	*this = temp;
	return *this;
}

MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen)
{
	if (sublen == msize)
		sublen = str.getSize() - subpos;
	MyString temp;
	temp = str.substr(subpos, sublen);
	insert(pos, temp);
	return *this;
}

MyString& MyString::erase(size_t pos, size_t len)
{
	if (len == msize)
	{
		len = getSize() - pos;
		for (int i = pos;i < getSize();i++)
		{
			at(i) = ' ';
		}
		resize(getSize() - len, ' ');
	}
	else
	{
		MyString temp;
		temp.resize(getSize() - len, ' ');
		for (int i = 0;i < pos;i++)
			temp.at(i) = at(i);
		for (int i = pos;i < temp.getSize();i++)
			temp.at(i) = at(i + len);
		*this = temp;
	}
	return *this;
}

size_t MyString::find(const MyString& str, size_t pos) const
{
	int check = 0;
	for (size_t i = 0;i < getSize()-(str.getSize() - pos);i++)
	{
		int x = 0;
		for (int j = 0;j < str.getSize() - pos;j++)
		{
			if (at(i + x) != str.at(j+pos))
				check = 1;
			x++;
		}
		if (check == 0)
			return i;
		check = 0;
	}
	return msize;
}

size_t MyString::find_first_of(const MyString& str, size_t pos) const
{
	int ans = -1;
	for (int i = 0;i < getSize();i++)
	{
		int find = 0;
		for (int j = pos;j < str.getSize();j++)
		{
			if (at(i) == str.at(j))
			{
				find = i; 
				if (ans == -1)
					ans = find;
			}
		}
		if (ans > find&& find != 0)
			ans = find;
	}
	return ans;
}

istream& operator>>(istream& input, MyString& right)
{
	string in;
	input >> in;
	int len = in.length();
	char* ptr = new char[len + 1];
	ptr[len] = '\0';
	in.copy(ptr, len, 0);
	MyString temp(ptr);
	right = temp;
	delete[] ptr;
	return input;
}
#ifndef S1083302MyString_H
#define S1083302MyString_H
#include"s1083302_MyArray.h"
#include <iostream>
//#include "XXXXXXXXXX.h"
using namespace std;

class MyString : public MyArray<char> 
{
	//friend ostream &operator<<(ostream& output, const MyString& str);
	friend istream& operator>>(istream&, MyString&);
public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString& str);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString& str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char* s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString& str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString& str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString& str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif
