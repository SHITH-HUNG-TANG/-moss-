#pragma once
#ifndef S1081510_MYARRAY_H
#define S1081510_MYARRAY_H
#include<iostream>
#include<vector>
#include<cstdlib>
#include <stdexcept>
#include<string>
using namespace std;

template<typename T>
class MyArray
{	//modify this class into a template class
	template<typename T>friend ostream& operator<<(ostream&, const MyArray<T>&);
	template<typename T>friend istream& operator>>(istream&, MyArray<T>&);
public:
	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(const MyArray &);
	~MyArray();

	const MyArray& operator=(const MyArray<T>&);
	bool operator==(const MyArray<T>&) const;
	bool operator!=(const MyArray<T>&) const;
	MyArray operator+(const MyArray<T>&) const;	//new
	MyArray& operator+=(const MyArray<T>&);		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t size, T item);
	void reserve(size_t size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

protected:
	int size;
	int capacity;
	T* data;
};

template<typename T>
MyArray<T>::MyArray(int C)
{
	size = 0;
	capacity = C;
	data = new T[capacity]();
}


template<typename T>
MyArray<T>::MyArray(int Size, T value)
{
	size = Size;
	capacity = 10;
	data = new T[capacity]();
	if (size > capacity)
		resize(size, 0);
	for (int i = 0; i < size; i++)
		data[i] = value;
}

template<typename T>
MyArray<T>::MyArray(const MyArray&copy)
	:size(copy.size),
	capacity(copy.capacity)
{
	data = new T[capacity];
	for (int i = 0; i < size; i++)
		data[i] = copy.data[i];
}

template<typename T>
MyArray<T>::~MyArray()
{
	delete[] data;
}

template<typename T>
int MyArray<T>::getSize()const
{
	return size;
}

template<typename T>
int MyArray<T>::getCapacity()const
{
	return capacity;
}

template<typename T>
const MyArray<T> &MyArray<T>::operator=(const MyArray<T>&right)
{
	size = right.size;
	capacity = right.capacity;
	delete[]data;
	data = new T[capacity];
	for (int i = 0; i < size; i++)
		data[i] = right.data[i];
	return *this;
}

template<typename T>
bool MyArray<T>::operator==(const MyArray<T>&right)const
{
	if (size != right.size)
		return false;
	for (int i = 0; i < size; i++)
		if (data[i] != right.data[i])
			return false;
	return true;
}

template<typename T>
bool MyArray<T>::operator!=(const MyArray<T>&right)const
{
	if (size != right.size)
		return true;
	else
		for (int i = 0; i < size - 1; i++)
			if (data[i] != right.data[i])
				return true;
	return false;
}

template<typename T>
MyArray<T> MyArray<T>::operator+(const MyArray<T>&right) const
{
	MyArray add;
	add.resize(size + right.size, 0);
	for (int i = 0; i < size; i++)
		add.data[i] = data[i];
	int j = 0;
	for (int i = size; i < add.size; i++)
	{
		add.data[i] = right.data[j];
		j++;
	}
	return add;
}

template<typename T>
MyArray<T> &MyArray<T>:: operator+=(const MyArray<T>&right)
{
	int presize = size;
	resize(size + right.size, 0);
	int j = 0;
	for (int i = presize; i < size; i++)
	{
		data[i] += right.data[j];
		j++;
	}
	return *this;
}

template<typename T>
T &MyArray<T>::operator[](int subscript)
{
	return data[subscript];
}

template<typename T>
T MyArray<T>::operator[](int subscript)const
{
	return data[subscript];
}

template<typename T>
T &MyArray<T>::at(int index)
{
	if (index >= size)
		throw out_of_range("&MyArray<T>::at(index)");
	else
		return data[index];
}

template<typename T>
T MyArray<T>::at(int index) const
{

	if (index >= size)
		throw out_of_range("MyArray<T>::at(index) const");
	else
		return data[index];
}

template<typename T>
void MyArray<T>::resize(size_t n, T c)
{
	while (n > capacity)
		reserve(capacity * 2);
	if (n > size)
	{
		for (int i = size; i < n; i++)
			data[i] = c;
	}
	size = n;
}

template<typename T>
void MyArray<T>::reserve(size_t m)
{
	if (m > capacity)
	{
		T*data2 = new T[m]();
		for (int i = 0; i < size; i++)
			data2[i] = data[i];
		delete[] data;
		data = data2;
	}
	capacity = m;
}

template<typename T>
void MyArray<T>::shrink_to_fit()
{
	capacity = size;
	reserve(capacity);
}

template<typename T>
void MyArray<T>::clear()
{
	for (int i = 0; i < capacity; i++)
		data[i] = 0;
	resize(0, '\0');
	reserve(10);
}

template<typename T>
bool MyArray<T>::isEmpty()
{
	for (int i = 0; i < capacity; i++)
	{
		if (data[i] != 0)
			return false;
	}
	return true;
}

template<typename T>
istream &operator>>(istream &input, MyArray<T>&a)
{
	string b;
	input >> b;
	int size2 = b.length();
	a.resize(size2, '\0');
	for (int i = 0; i < size2; i++)
		a.data[i] = b[i];

	return input;
}

template<typename T>
ostream &operator<<(ostream &output, const MyArray<T>&a)
{
	for (int i = 0; i < a.size; i++)
		output << a.data[i] ;
	return output;
}


#endif // !MyArray

#pragma once
#include<iostream>
#include"s1081510_MyString.h"

MyString::MyString()
	:MyArray(10)
{

}

MyString ::MyString(const MyString &str)
{
	size = str.size;
	capacity = str.capacity;
	data = new char[capacity];
	for (int i = 0; i < size; i++)
		data[i] = str.data[i];
}

MyString ::MyString(const MyString &str, size_t pos, size_t len )
	:MyArray(10)
{
	while (len > size)
		resize(len, '\0');
	int j = 0;
	for (int i = pos; i < pos + len; i++)
	{
		data[j] = str.data[i];
		j++;
	}
}

MyString ::MyString(const char *s)
	:MyArray(10)
{
	int i = 0;
	while (s[i] != NULL)
	{
		resize(i+1, s[i]);
		i++;
	}
}

MyString::~MyString()
{

}

MyString &MyString ::append(const MyString &str)
{
	/*MyString str2(" ");
	*this += str2;*/
	*this += str;
	return *this ;
}

MyString MyString ::substr(size_t pos, size_t len ) const
{
	MyString substr(*this, pos, len);
	return substr;
}

MyString &MyString ::insert(size_t pos, const MyString &str)
{
	resize(size + str.size + 1,'\0');
	int j = size-str.size-1;
	for (int i = size-1 ; i >=pos+str.size; i--)
	{
		data[i] = data[j];
			j--;
	}
	int k = 0;
	for (int i = pos; i < pos + str.size; i++)
	{
		data[i] = str.data[k];
			k++;
	}
	return *this;
}

MyString &MyString ::insert(size_t pos, const MyString &str, size_t subpos, size_t sublen )
{
	resize(size + sublen + 1, '\0');
	int j = size-sublen-1;
	for (int i = size-1; i >=pos+sublen; i--)
	{
		data[i] = data[j];
		j--;
	}
	int k = subpos;
	for (int i = pos; i < pos + sublen; i++)
	{
		data[i] = str.data[k];
		k++;
	}
	return *this;
}

MyString &MyString::erase(size_t pos, size_t len )
{
	int k = pos + len;
	for (int i = pos; i < size - len; i++)
	{
		data[i] = data[k];
		k++;
	}
	resize(size - len, '\0');
	return *this;
}

static const size_t msize = -1;

size_t MyString::find(const MyString &str, size_t pos ) const
{
	for (int i = pos; i < size; i++)
	{
		if (data[i] == str.data[0])
		{
			int k = i + 1, sum = 0;
			for (int j = 1; j < str.size; j++)
			{
				if (data[k] != str.data[j])
					break;
				else
					sum++;
				k++;
			}
			if (sum == str.size - 1)
				return i;
		}
	}
	
	return msize;
}

size_t MyString::find_first_of(const MyString &str, size_t pos ) const
{
	for (int i = pos; i < size; i++)
	{
		for (int j = 0; j < str.size; j++)
		{
			if (data[i] == str.data[j])
				return i;
		}
	}
	return msize;
}
#ifndef S1081510_MyString_H
#define S1081510_MyString_H
#include <iostream>
#include "s1081510_MyArray.h"
using namespace std;

class MyString :public MyArray<char>
{
	/*friend ostream &operator<<(ostream& output, const MyString& str);
	friend istream& operator>>(istream&, MyString&);*/

public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString &str);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString &str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char *s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString &str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString &str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString &str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString &str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString &str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif#pragma once
