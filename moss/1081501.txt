#include<iostream>
#include"s1081501_MyArray.h"
using namespace std;

template<typename T>
ostream& operator<<(ostream& out, const MyArray<T>&right)
{
	for (int i = 0; i < right.size; i++)
	{
		out << right.data[i];
	}
	return out;
}
template<typename T>
MyArray<T>::MyArray(int Capacity)
{
	size = 0;
	capacity = Capacity;
	data = new T[capacity]();
}
template<typename T>
MyArray<T>::MyArray(int Size, T value)
{
	size = Size;
	capacity = 10;
	data = new T[capacity]();
	while (size > capacity)
	{
		reserve(capacity * 2);
	}
	
	for (int i = 0; i < size; i++)
	{
		data[i] = value;
	}	
}
template<typename T>
MyArray<T>::MyArray(int Size, T* value)
{
	size = Size;
	capacity = 10;
	data = new T[capacity]();
	for (int i = 0; i < size; i++)
	{
		data[i] = value[i];
	}
}
template<typename T>
MyArray<T>::MyArray(const MyArray&right)
{
	*this = right;
}
template<typename T>
MyArray<T>::~MyArray()
{
	delete[] data;
}
template<typename T>
const MyArray<T>& MyArray<T>::operator=(const MyArray&right)
{
	size = right.size;
	capacity = right.capacity;
	delete [] data;
	data = new T[capacity]();
	for (int i = 0; i < size; i++)
	{
		data[i] = right.data[i];
	}
	return *this;
}
template<typename T>
bool MyArray<T>::operator==(const MyArray&right) const
{
	if (size != right.size)
	{
		return false;
	}
	else
	{
		for (int i = 0; i < size; i++)
		{
			if (data[i] != right.data[i])
			{
				return false;
			}
			return true;
		}
	}
}
template<typename T>
bool MyArray<T>::operator!=(const MyArray&right) const
{
	return !(*this == right);
}
template<typename T>
MyArray<T> MyArray<T>::operator+(const MyArray& right) const
{
	MyArray<T> a(*this);
	a.size = size + right.size;
	while (a.size > a.capacity)
	{
		a.reserve(a.capacity * 2);
	}
	int j = 0;
	for (int i = size ; i < a.size; i++)
	{
		a.data[i] = right.data[j];
		j++;
	}
	return a;
}
template<typename T>
MyArray<T>& MyArray<T>::operator+=(const MyArray&right)
{
	size = size + right.size;
	while (size > capacity)
	{
		reserve(capacity * 2);
	}
	int j = 0;
	for (int i = size-right.size; i < size; i++)
	{
		
		data[i] = right.data[j];
		j++;
	}
	return *this;
}
template<typename T>
T& MyArray<T>::operator[](int index)
{
	return data[index];
}
template<typename T>
T MyArray<T>::operator[](int index) const
{
	return data[index];
}
template<typename T>
T MyArray<T>::at(int a)
{
	if (a < size)
	{
		return data[a];
	}
	else
	{
		throw out_of_range("have a error");
	}
}
	
template<typename T>
T MyArray<T>::at(int a) const
{
	if (a < size)
	{
		return data[a];
	}
	else
	{
		throw out_of_range("have a error");
	}
}
template<typename T>
int MyArray<T>::getSize() const
{
	return size;
}
template<typename T>
int MyArray<T>::getCapacity() const
{
	return capacity;
}
template<typename T>
void MyArray<T>::resize(size_t s,T item)
{
	while (s > capacity)
	{
		reserve(capacity * 2);
	}
	if (s > size)
	{
		for (int i = size; i < s; i++)
		{
			data[i] = item;
		}
	}
	size = s;
}
template<typename T>
void MyArray<T>::reserve(size_t Capacity) //有改過 追加i < Capacity
{
	if (Capacity > capacity)
	{

		T* temp = new T[Capacity]();
		for (int i = 0; i < size && i < Capacity; i++)
		{
			temp[i] = data[i];
		}
		capacity = Capacity;
		delete[] data;
		data = temp;
	}
}
template<typename T>
void MyArray<T>::shrink_to_fit()
{
	if (size < capacity)
	{
		T* temp = new T[size]();
		for (int i = 0; i < size; i++)
		{
			temp[i] = data[i];
		}
		capacity = size;
		delete[] data;
		data = temp;
	}
}
template<typename T>
void MyArray<T>::clear()
{
	size = 0;
}
template<typename T>
bool MyArray<T>::isEmpty()
{
	if (size == 0)
	{
		cout << "yes "<< endl;
		return true;
	}
	else
	{
		cout << "no" << endl;
		return false;
	}
}#pragma once
#include<iostream>
#ifndef S1081501_MYARRAY_H
#define S1081501_MYARRAY_H
using namespace std;
template<typename T>
class MyArray {	//modify this class into a template class
	friend ostream& operator<<(ostream& out, const MyArray&right)
	{
		{
			for (int i = 0; i < right.size; i++)
			{
				out << right.data[i]<<" ";
			}
			return out;
		}
	}
	//friend istream& operator>>(istream&, MyArray&);
public:
	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(int Size, T* value);
	MyArray(const MyArray &);
	~MyArray();
	
	const MyArray& operator=(const MyArray&);
	bool operator==(const MyArray&) const;
	bool operator!=(const MyArray&) const;
	MyArray operator+(const MyArray&) const;	//new
	MyArray& operator+=(const MyArray&) ;		//new
	T& operator[](int);
	T operator[](int) const;
	T at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t size, T item);
	void reserve(size_t size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

private:
	int size;
	int capacity;
	T* data;
};
#endif // !MyArray

#include"s1081501_MyString.h"
#include<iostream>
#include<string>
using namespace std;
istream& operator>>(istream& input, MyString& str)
{
	string s;
	int i = 0;
	getline(input,s);
	str.resize(s.length(),'\0');
	for (int i = 0; i < s.length(); i++)
	{
		str[i] = s[i];
	}
	
	return input;
}
ostream& operator<<(ostream& output, const MyString& str)
{
	for (int i = 0; i < str.getSize(); i++)
	{
		output << str[i];
	}
	return output;
}
MyString::MyString():MyArray()
{

}
MyString::MyString(const MyString& str)
{
	*this = str;
}
MyString::MyString(const MyString& str, size_t pos, size_t len)
{
	int count = 0;
	if (len == msize)
	{
		len = str.getSize() - pos;
	}
	resize(len, '\0');
	int j = str.getSize();
	int k = 0;
	for (int i = pos; i < str.getSize(); i++)
	{
		this->operator[](k) = str[i];
		count++;
		k++;
		if (len == count)
		{
			break;
		}
	}
}
MyString::MyString(const char* s)
{
	int size=0;
	int i = 0;
	while (s[i] != '\0')
	{
		size++;
		i++;
	}
	resize(size, '\0');
	for (int j = 0; j < size; j++)
	{
		this->operator[](j) = s[j];
	}
}
MyString::~MyString()
{
	
}
MyString& MyString::append(const MyString& str)
{
	*this += str;
	return *this;
}
MyString MyString::substr(size_t pos, size_t len) const
{
	if (len == msize)
	{
		len = getSize() - pos;
	}
	return MyString(*this, pos, len);
}
MyString& MyString::insert(size_t pos, const MyString& str)
{
	MyString str1(*this, 0, pos);
	MyString str2(*this, pos);
	str1 += str;
	str1 += str2;
	*this = str1;
	return *this;
}
MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublens)
{
	MyString str3(str, subpos, sublens);
	MyString str1(*this, 0, pos);
	MyString str2(*this, pos);
	str1 += str3;
	str1 += str2;
	*this = str1;
	return *this;
}
MyString& MyString::erase(size_t pos, size_t len)
{
	if (len == msize)
	{
		len = getSize() - pos;
	}
	MyString str1(*this, 0, pos);
	MyString str2(*this, pos + len);
	str1 += str2;
	*this = str1;
	return *this;
}
size_t MyString::find(const MyString& str, size_t pos) const
{
	MyString str1(*this);
	MyString str2(str);
	int k = str2.getSize();
	for (int i = pos; i < str1.getSize(); i++)
	{
		int count = 0;
		for (int j = 0; j < str2.getSize(); j++)
		{

			if (str1[i + j] == str2[j])
			{
				count++;
			}

		}
		if (count == k)
		{
			return i;
		}
	}
	return msize;
}
size_t MyString::find_first_of(const MyString& str, size_t pos) const
{
	MyString str1(*this);
	MyString str2(str);
	for (int i = pos; i < str1.getSize(); i++)
	{
		for (int j = 0; j < str2.getSize(); j++)
		{
			if (str1[i] == str2[j])
			{
				return i;
			}
		}
	}
	return msize;
}
#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include"s1081501_MyArray.h"
#include"s1081501_MyArray.cpp"
//#include "XXXXXXXXXX.h"
using namespace std;

class MyString : public MyArray<char>//???
{
	friend istream& operator>>(istream& input,MyString& str);
	friend ostream &operator<<(ostream& output, const MyString& str);
	

public:
	MyString(); 
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString( const MyString &str ); 
	// Constructs a copy of "str". (copy constructor)

	MyString( const MyString &str, size_t pos, size_t len = msize ); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString( const char *s ); 
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString(); 
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append( const MyString &str ); 
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert( size_t pos, const MyString &str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert( size_t pos, const MyString &str, size_t subpos, size_t sublen = msize );
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase( size_t pos, size_t len = msize ); 
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find( const MyString &str, size_t pos = 0 ) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of( const MyString &str, size_t pos = 0 ) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif