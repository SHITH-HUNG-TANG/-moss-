
#include<iostream>
#include<iomanip>
#include<stdexcept>
#include "s1083320_MyArray.h"
#include "s1083320_MyString.h"

template< class T >MyArray<T>::MyArray(int num)
{
	size = 0;
	capacity = num;
	data = new T[capacity];
}

template< class T > MyArray<T>::~MyArray()
{
	delete data;
}

template< class T >MyArray<T>::MyArray<T>(const MyArray& copy)
{
	size = copy.size;
	capacity = copy.capacity;
	data = new T[capacity];
	for (int i = 0; i < size; ++i) data[i] = copy.data[i];
}

template< class T > MyArray<T>::MyArray(int num, T value)
{
	size = num;
	capacity = size * 2;
	data = new T[capacity];
	for (int i = 0; i < num; ++i)
	{
		data[i] = value;
	}
}

template< class T >void MyArray<T>::push_back(const T& item)
{
	if (size == capacity)
	{
		this->reserve(size * 2);
		size += 1;
		data[size - 1] = item;
	}
	else
	{
		size += 1;
		data[size - 1] = item;
	}
}

template< class T >void MyArray<T>::pop_back()
{
	if (size >= 1) this->resize(size - 1);
}

template< class T >void MyArray<T>::resize(unsigned int num)
{
	MyArray a(*this);
	delete[] data;
	size = num;
	if (capacity < size) capacity = size * 2;
	data = new T[capacity];
	for (int i = 0; i < size; ++i) data[i] = a.data[i];
}

template< class T >void MyArray<T>::resize(unsigned int num, const T& item)
{
	if (num > size)for (int i = size; i < num; ++i) this->push_back(item);
}

template< class T >void MyArray<T>::reserve(unsigned int num)
{
	if (num > capacity)
	{
		MyArray a(10);
		delete[] a.data;
		a.capacity = num;
		a.size = size;
		a.data = new T[num];
		for (int i = 0; i < size; ++i) a.data[i] = data[i];
		*this = a;
	}
}

template< class T >T& MyArray<T>::at(int num)
{
	try {
		if (num > size) throw exception();
		return data[num];
	}
	catch (exception& out)
	{
		cerr << "Error : Subscription Out of Range when using function 'at()' " << endl;
		system("pause");
		exit(0);
	}
}

template< class T >T MyArray<T>::at(int num) const
{
	try {
		if (num > size) throw exception();
		return data[num];
	}
	catch (exception& out)
	{
		cerr << "Error : Subscription Out of Range when using function 'at()' " << out.what();
	}
}

template< class T >bool MyArray<T>::isEmpty()
{
	if (size == 0) return true;
	else return false;
}

template< class T >int MyArray<T>::getCapacity() const
{
	return capacity;
}

template< class T >int MyArray<T>::getSize() const
{
	return size;
}

template< class T >const MyArray<T>& MyArray<T>::operator=(const MyArray<T>& copy)
{
	delete[] data;
	capacity = copy.capacity;
	size = copy.size;
	data = new T[copy.capacity];
	for (int i = 0; i < size; ++i) data[i] = copy.data[i];
	return *this;
}

template< class T >bool MyArray<T>::operator==(const MyArray<T>& copy) const
{
	if (size != copy.size) return false;
	for (int i = 0; i < size; ++i)
	{
		if (data[i] != copy.data[i])return false;
	}
	return true;
}

template< class T >bool MyArray<T>::operator!=(const MyArray<T>& copy) const
{
	if (*this == copy) return false;
	else return true;

}

template< class T >MyArray<T> MyArray<T>::operator+(const MyArray<T>& copy) const
{
	MyArray<T> a(10);
	delete[] a.data;
	a.size = size + copy.size;
	a.capacity = a.size * 2;
	a.data = new T[a.capacity];
	for (int i = 0; i < size; ++i) a.data[i] = data[i];
	for (int j = 0; j < copy.size; ++j) a.data[size + j] = copy.data[j];
	return a;
}

template< class T >MyArray<T>& MyArray<T>::operator+=(const MyArray<T>& copy)
{
	for (int i = 0; i < copy.size; ++i) this->push_back(copy.data[i]);
	return *this;
}

template< class T >void MyArray<T>::clear()
{
	delete[] data;
	size = 0;
	data = new T[capacity];
}

template< class T >void MyArray<T>::shrink_to_fit()
{
	MyArray a(*this);
	a.capacity = a.size;
	delete[] a.data;
	a.data = new T[a.capacity];
	for (int i = 0; i < size; ++i) a.data[i] = data[i];
	//----------------------return-------------------
	size = a.size;
	capacity = a.capacity;
	delete[] data;
	data = new T[capacity];
	for (int i = 0; i < size; ++i) data[i] = a.data[i];
}

template< class T >T MyArray<T>::operator[](int num) const
{
	try {
		if (num > size) throw exception();
		return data[num];
	}
	catch (exception& out)
	{
		cerr << "Error : Subscription Out of Range when using operator[]" << endl;
		system("pause");
		exit(0);
	}
}

template< class T >void MyArray<T>::set(int pos, T item)
{
	data[pos] = item;
}

template< class T >T& MyArray<T>::operator[](int num)
{
	try {
		if (num > size) throw exception();
		return data[num];
	}
	catch (exception& out)
	{
		cerr << "Error : Subscription Out of Range when using operator[]" << endl;
		system("pause");
		exit(0);
	}
}


template class MyArray<int>;
template class MyArray<char>;#ifndef s1083320_MyArray_H
#define s1083320_MyArray_H
#include<string>
#include<iostream>
using namespace std;

template< class T >
class MyArray : public exception
{	//modify this class into a template class
	friend ostream& operator<<(ostream& output, const MyArray& ans)
	{
		for (int i = 0; i < ans.size; ++i)
		{
			if ((i) % 5 == 0 && i != ans.size && i != 0) output << ",";
			output << ans.data[i];
		}
		return output;
	}
	friend istream& operator>>(istream& input, MyArray& ans)
	{
		string str;
		input >> str;
		ans.resize(str.length());
		for (int i = 0; i < ans.size; ++i)
		{
			ans.data[i] = str[i];
		}
		return input;
	}
public:
	MyArray(int num = 10);
	MyArray(int, T);
	MyArray(const MyArray &);
	~MyArray();
	const MyArray& operator=(const MyArray& copy);
	bool operator==(const MyArray&) const;
	bool operator!=(const MyArray&) const;
	MyArray operator+(const MyArray&) const;	//new
	MyArray& operator+=(const MyArray&);		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	void set(int, T);
	int getSize() const;
	int getCapacity() const;
	void resize(unsigned int, const T&);
	void resize(unsigned int);
	void reserve(unsigned int);
	void shrink_to_fit();	//new
	void clear();			//new
	void pop_back();
	void push_back(const T&);
	bool isEmpty();			//new

private:
	int size;
	int capacity;
	T* data;
};



#endif


#include<iostream>
using namespace std;

#include "s1083320_MyString.h"

template< class T >MyString<T>::MyString() : MyArray<T>()
{
	this->reserve(10);
}

template< class T >MyString<T>::~MyString(){
}

template< class T >MyString<T>::MyString(const MyString& copy) : MyArray(copy)
{

}

template< class T >MyString<T>::MyString(const MyString& copy, size_t pos, size_t msize)
{
	this->clear();
	for (int i = 0; i < msize; ++i)
	{
		this->push_back(copy.at(pos + i));
	}
}

template< class T >MyString<T>::MyString(const char *s)
{
	int i = 0;
	while (1) {
		if (s[i] == '\0') break;
		i++;
	}
	this->resize(i);
	for (int j = 0; j < this->getSize(); ++j) set(j, s[j]);
}

template< class T >MyString<T>& MyString<T>::append(const MyString& right)
{
	MyString a;
	for (int i = 0; i < this->getSize(); ++i)
	{
		a.push_back(this->at(i));
	}
	for (int j = 0; j < right.getSize(); ++j)
	{
		a.push_back(right.at(j));
	}
	this->resize(a.getSize());
	for (int k = 0; k < this->getSize(); ++k)
	{
		this->set(k, a.at(k));
	}
	return *this;
}

template< class T >MyString<T> MyString<T>::substr(size_t pos, size_t len) const {
	MyString ans;
	for (int i = 0; i < len; ++i) ans.push_back(this->at(i + pos));
	return ans;
}

template< class T >MyString<T>& MyString<T>::insert(size_t pos, const MyString &str) {
	MyArray ans;
	for (int i = 0; i <= pos; ++i) ans.push_back(this->at(i));
	for (int j = 0; j < str.getSize(); ++j) ans.push_back(str.at(j));
	for (int k = pos+1; k < this->getSize(); ++k) ans.push_back(this->at(k));
	this->clear();
	for (int a = 0; a < ans.getSize(); ++a) this->push_back(ans.at(a));
	return *this;
}

template< class T >MyString<T>&	MyString<T>::erase(size_t pos, size_t len) {
	MyArray ans;
	for (int i = 0; i <= pos; ++i) ans.push_back(this->at(i));
	for (int k = len; k < this->getSize(); ++k) ans.push_back(this->at(k));
	this->resize(ans.getSize());
	for (int a = 0; a < ans.getSize(); ++a) this->set(a, ans.at(a));
	return *this;
}

template< class T >MyString<T>& MyString<T>::insert(size_t pos, const MyString &str, size_t subpos, size_t sublen )
{
	MyString ans(*this), copy(str.substr(subpos, sublen));
	ans.insert(pos, copy);
	this->clear();
	for (int a = 0; a < ans.getSize(); ++a) this->push_back(ans.at(a));
	return *this;
}

template< class T >size_t MyString<T>::find(const MyString &str, size_t pos) const
{
	for (int i = pos; i < str.getSize(); ++i)
	{
		for (int j = 0; j < this->getSize(); ++j)
		{
			if (this->at(j) != str.at(i+j)) break;
			else if (this->at(j) == str.at(i+j) && j == this->getSize()-1) return i;
		}
	}
	return msize;
}

template< class T >size_t MyString<T>::find_first_of(const MyString &str, size_t pos) const {
	for (int i = 0; i < this->getSize(); ++i)
	{
		for (int j = pos; j < str.getSize(); ++j)
		{
			if (this->at(i) == str.at(j)) return j;
		}
	}
	return msize;
}

template class MyString<char>;
#ifndef s1083320_MyString_H
#define s1083320_MyString_H
#include <iostream>
#include "s1083320_MyArray.h"
using namespace std;

template<class T>
class MyString : public MyArray<char>
{
	friend ostream &operator<<(ostream& output, const MyString& str)
	{
		for (int i = 0; i < str.getSize(); ++i) output << str.at(i);
		return output;
	}

public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString &copy);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString &str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char *s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString &str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString &str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString &str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString &str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString &str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif
