#ifndef MYARRAY
#define MYARRAY

#include <iostream>
using namespace std;

template < typename T >
class MyArray {	//modify this class into a template class
	friend ostream& operator<<(ostream& output, const MyArray<T>& toPrint)
	{
		for (int i = 0; i < toPrint.size; i++)
			output << toPrint.elem[i] << " ";

		output << endl;

		return output;
	}

	//friend istream& operator>>(istream&, MyArray<T>&);
public:
	MyArray(int Capacity = 10)
	{
		capacity = (Capacity > 0) ? Capacity : 10;
		size = 0;
	}

	MyArray(int Size, T value)
	{
		capacity = 10;
		resize(Size, value);
	}

	MyArray(const MyArray& toCopy)
	{
		size = toCopy.size;
		capacity = toCopy.capacity;

		elem = new T[capacity];

		for (int i = 0; i < size; i++)
			elem[i] = toCopy.elem[i];
	}

	~MyArray() 
	{
		delete[] elem;
	}

	const MyArray& operator=(const MyArray& toCopy)
	{
		size = toCopy.size;
		capacity = toCopy.capacity;

		elem = new T[capacity];

		for (int i = 0; i < size; i++)
			elem[i] = toCopy.elem[i];

		return *this;
	}

	bool operator==(const MyArray& right) const
	{
		if (size != right.size)
			return false;
		else {
			for (int i = 0; i < size; i++)
				if (elem[i] != right.elem[i])
					return false;
		}

		return true;
	}

	bool operator!=(const MyArray& right) const
	{
		return !(*this == right);
	}

	MyArray operator+(const MyArray& right) const	//new
	{
		MyArray< T > temp(*this);
		temp.resize(size + right.size);

		for (int i = size; i < size + right.size; i++)
			temp.elem[i] = right.elem[i - size];

		return temp;
	}

	MyArray& operator+=(const MyArray& right)		//new
	{
		MyArray< T > temp(*this);
		temp.resize(size + right.size);

		for (int i = size; i < size + right.size; i++)
			temp.elem[i] = right.elem[i - size];

		*this = temp;
		return *this;
	}

	T& operator[](int idx)
	{
		if (idx >= size)
			throw "out of range error!";
		return elem[idx];
	}

	T operator[](int idx) const
	{
		if (idx >= size)
			throw "out of range error!";
		return elem[idx];
	}

	T& at(int idx)		//new
	{
		if (idx >= size)
			throw "out of range error!";
		return elem[idx];
	}

	T at(int idx) const	//new
	{
		if (idx >= size)
			throw "out of range error!";
		return elem[idx];
	}

	int getSize() const
	{
		return size;
	}

	int getCapacity() const
	{
		return capacity;
	}

	void resize(size_t newSize)
	{
		MyArray< T > temp(*this);

		while (newSize >= temp.capacity)
			temp.reserve(temp.capacity * 2);

		if (newSize > size) {
			temp.size = newSize;

			for (int i = 0; i < size; i++)
				temp.elem[i] = elem[i];
		}
		else if (newSize < size)
			temp.size = newSize;
		else return;

		*this = temp;
	}

	void resize(size_t newSize, const T item)
	{
		MyArray< T > temp(*this);

		while (newSize >= temp.capacity)
			temp.reserve(temp.capacity * 2);

		if (newSize > size) {
			temp.size = newSize;

			for (int i = 0; i < size; i++)
				temp.elem[i] = elem[i];

			for (int i = size; i < newSize; i++)
				temp.elem[i] = item;
		}
		else if (newSize < size)
			temp.size = newSize;
		else return;

		*this = temp;
	}

	void reserve(size_t newCapa)
	{	
		if (newCapa > capacity) {
			capacity = newCapa;
			delete[] elem;
			elem = new T[capacity];
		}
		else return;
	}

	void shrink_to_fit()	//new
	{
		MyArray< T > temp = *this;

		temp.reserve(size);

		for (int i = 0; i < size; i++)
			temp.elem[i] = elem[i];

		*this = temp;
	}

	void clear()			//new
	{
		resize(0);
	}

	bool isEmpty()			//new
	{
		if (size == 0)
			return true;

		return false;
	}

protected:
	int size;
	int capacity;
	T* elem;
};

#endif // !MYARRAY

#include <iostream>
#include "s1083344_MyString.h"

using namespace std;

MyString::MyString()
{
	capacity = 10;
	size = 0;
}

MyString::MyString(const MyString& str)
{
	resize(str.size);
	reserve(str.capacity);

	for (int i = 0; i < size; i++)
		elem[i] = str.at(i);
}

MyString::MyString(const MyString& str, size_t pos, size_t len)
{
	if (len != msize) {
		resize(len);
		for (int i = pos; i < pos + len; i++)
			elem[i - pos] = str[i];
	}
	else {
		resize(len - pos + 1);
		for (int i = pos; i < len; i++)
			elem[i - pos] = str[i];
	}
}

MyString::MyString(const char* s)
{
	resize(strlen(s));
	for (int i = 0; i < size; i++)
		elem[i] = s[i];
}

MyString& MyString::append(const MyString& str)
{
	*this += str;

	return *this;
}

MyString MyString::substr(size_t pos, size_t len) const
{
	MyString str2;

	if (len != msize) {
		str2.resize(len);
		for (int i = 0; i < len; i++)
			str2.elem[i] = elem[i + pos];
	}
	else {
		str2.resize(len - pos + 1);
		for (int i = pos; i < len; i++)
			str2.elem[i - pos] = elem[i];
	}
	return str2;
}

MyString& MyString::insert(size_t pos, const MyString& str)
{
	MyString temp;
	temp.resize(size + str.size);

	for (int i = 0; i < pos; i++)
		temp.elem[i] = elem[i];
	for (int i = pos; i < str.size + pos; i++)
		temp.elem[i] = str.elem[i - pos];
	for (int i = str.size + pos; i < temp.size; i++)
		temp.elem[i] = elem[i - str.size];

	*this = temp;

	return *this;
}

MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen)
{
	MyString str2 = substr(subpos, sublen);

	insert(pos, str2);

	return *this;
}

MyString& MyString::erase(size_t pos, size_t len)
{
	if (len == msize)
		resize(pos);
	else {
		MyString str2 = substr(pos + len);
		for (int i = 0; i < str2.size; i++)
			elem[i + pos] = str2.elem[i];

		resize(size - len);
	}
	return *this;
}

size_t MyString::find(const MyString& str, size_t pos) const
{
	for (size_t i = pos; i < size; i++) {
		if (elem[i] == str.elem[0]) {
			int x = 0;
			for (size_t n = 0; n < str.size; n++) {
				if (elem[n + i] != str.elem[x])
					break;
				else x++;
			}
			if (x == str.size)
				return i;
		}
	}

	return -1;
}

size_t MyString::find_first_of(const MyString& str, size_t pos) const
{
	for (int i = pos; i < size; i++) {
		for (int n = 0; n < str.size; n++)
			if (elem[i] == str.elem[n])
				return i;
	}
	return -1;
}

#pragma once

#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include "s1083344_MyArray.h"
using namespace std;

class MyString : public MyArray< char >
{	
	friend istream& operator>>(istream& input, MyString& str)
	{
		char temp[500];
		cin >> temp;

		str.resize(strlen(temp));
		for (int i = 0; i < str.size; i++)
			str.elem[i] = temp[i];

		return input;
	}

	friend ostream& operator<<(ostream& output, const MyString& str)
	{
		for (int i = 0; i < str.getSize(); i++)
			cout << str.at(i) << " ";

		return output;
	}

public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10 

	MyString(const MyString& str);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString& str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char* s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString& str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString& str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString& str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif
