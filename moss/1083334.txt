#include"s1083334_MyArray.h"
#include<string>
#include<iomanip>
#include <iostream>       // std::cerr
#include <stdexcept>      // std::out_of_range

template< typename T >
MyArray<T>::MyArray(int Capacity) {
	capacity = Capacity;
	data = new T[capacity]();
	size = 0;
}
template< typename T >
MyArray<T>::MyArray(int Size, T value) {
	size = Size;
	capacity = size * 2;
	data = new T[capacity]();
	for (int i = 0; i < size; i++) {
		data[i] = value;
	}
}
template< typename T >
MyArray<T>::MyArray(const MyArray &a) 
	:size(a.size), capacity(a.capacity)
{
	data = new T [capacity]();
	for (int i = 0; i < size; i++) {
		data[i] = a.data[i];
	}
}

template< typename T >
MyArray<T>::~MyArray() {
	delete[]data;
}
template< typename T >
const MyArray<T>& MyArray<T>::operator=(const MyArray& a) {
	if (a != *this) {
		if (capacity != a.capacity) {
			delete[]data;
			capacity = a.capacity;
			data = new T[capacity]();
		}
		resize(a.size);
		for (int i = 0; i < size; i++) {
			data[i] = a.data[i];
		}
	}
	return *this;
}
template< typename T >
bool MyArray<T>::operator==(const MyArray& a)const {
	if (size != a.size) {
		return false;
	}
	for (int i = 0; i < size; i++) {
		if (data[i] != a.data[i]) {
			return false;
		}
	}
	return true;
}
template< typename T >
bool MyArray<T>::operator!=(const MyArray &a)const {
	if (size != a.size) {
		return true;
	}
	for (int i = 0; i < size; i++) {
		if (data[i] != a.data[i]) {
			return true;
		}
	}
	return false;
}
template< typename T >
MyArray<T> MyArray<T>::operator+(const MyArray &a) const {
	MyArray<T> temp;
	delete[]temp.data;
	temp.data = new T[temp.capacity]();
	temp.resize(size + a.size);
	for (int i = 0; i < size; i++) {
		temp.data[i] = data[i];
	}
	int x = 0;
	for (int i = size; i < temp.size; i++) {
		temp.data[i] = a.data[x++];
	}
	return temp;
}
template< typename T >
MyArray<T>& MyArray<T>::operator+=(const MyArray &a) {
	int s = size;
	resize(size + a.size);
	for (int i = 0; i < s; i++) {
		data[i] = data[i];
	}
	for (int i = s; i < size; i++) {
		data[i] = a.data[i - s];
	}
	return *this;
}
template< typename T >
T& MyArray<T>::operator[](int a) {
	return data[a];
}
template< typename T >
T MyArray<T>::operator[](int a)const {
	return data[a];
}
template< typename T >
T& MyArray<T>::at(int a) {
	if (a >= size) {
		throw out_of_range("out_of_range");
	}
	return data[a];
}
template< typename T >
T MyArray<T>::at(int a) const {
	if (a >= size) {
		throw out_of_range("out_of_range");
	}
	return data[a];
}
template< typename T >
int MyArray<T>::getSize() const {
	return size;
}
template< typename T >
int MyArray<T>::getCapacity() const {
	return capacity;
}
template< typename T >
void  MyArray<T>::resize(size_t size, T item) {
	if (size > this->size) {
		if (size > capacity) {
			reserve(size);
		}
		for (int i = this->size; i < capacity; i++) {
			data[i] = item;
		}
	}
	else if (size < this->size) {
		T *temp = new T[capacity]();
		for (int i = 0; i < (int)size - 1; i++) {
			temp[i] = data[i];
		}
		delete[]data;
		data = temp;
	}
	this->size = size;
}
template< typename T >
void MyArray<T>::reserve(size_t size) {
	while (size > capacity) {
		capacity *= 2;
	}
	T *temp = new T[capacity]();
	for (int i = 0; i < this->size; i++) {
		temp[i] = data[i];
	}
	delete[]data;
	data = temp;
}
template< typename T >
void MyArray<T>::shrink_to_fit() {
	capacity = size;
	T *temp = new T[capacity]();
	for (int i = 0; i < size; i++) {
		temp[i] = data[i];
	}
	delete[]data;
	data = temp;
}
template< typename T >
void MyArray<T>::clear() {
	resize(0);
}
template< typename T >
bool MyArray<T>::isEmpty() {
	if (size == 0) {
		return 1;
	}
	return 0;
}
#ifndef MY_ARRAY
#define MY_ARRAY
#include<iostream>
using namespace std;

template< typename T >
class MyArray {		//modify this class into a template class
	friend ostream& operator<<(ostream& output, const MyArray<T> &a) {
		for (int i = 0; i < a.size; i++) {
			output << a.data[i];
		}
		return output;
	}
	//friend istream& operator>>(istream&, MyArray&);
public:
	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(const MyArray &);
	~MyArray();
	
	const MyArray& operator=(const MyArray&);
	bool operator==(const MyArray&) const;
	bool operator!=(const MyArray&) const;
	MyArray operator+(const MyArray&) const;	//new
	MyArray& operator+=(const MyArray&) ;		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t size, T item=NULL);
	void reserve(size_t size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

private:
	int size;
	int capacity;
	T* data;
};


#endif // !MyArray

#include"s1083334_MyString.h"
#include<string>

MyString::MyString()
	:MyArray()
{

}
MyString::MyString(const MyString &str)
	:MyArray(str.getCapacity())
{
	resize(str.getSize());
	for (int i = 0; i < getSize(); i++) {
		(*this)[i] = str[i];
	}
}
MyString::MyString(const MyString &str, size_t pos, size_t len)
	:MyArray()
{
	int x = 0;
	if (len == msize) {
		resize(str.getSize() - pos);
		for (int i = pos; i < str.getSize(); i++) {
			(*this)[x++] = str[i];
		}
	}
	else {
		resize(len);
		while (len--) {
			(*this)[x++] = str[pos++];
		}
	}
}
MyString::MyString(const char *s) 
	:MyArray()
{
	resize(strlen(s));
	for (int i = 0; i < getSize(); i++) {
		(*this)[i] = s[i];
	}
}
MyString::~MyString() {

}
MyString& MyString::append(const MyString &str) {
	int s = getSize();
	resize(getSize() + str.getSize());
	for (int i = s; i < getSize(); i++) {
		(*this)[i] = str[i - s];
	}
	return *this;
}
MyString MyString::substr(size_t pos, size_t len) const {
	MyString temp;
	int x = 0;
	if (len == msize) {
		temp.resize(getSize() - pos);
		for (int i = pos; i < getSize(); i++) {
			temp[x++] = (*this)[i];
		}
	}
	else {
		temp.resize(len);
		while (len--) {
			temp[x++] = (*this)[pos++];
		}
	}
	return temp;
}
MyString& MyString::insert(size_t pos, const MyString &str) {	
	*this=substr(0, pos).append(str).append(substr(pos, getSize() - pos));
	return *this;
}
MyString& MyString::insert(size_t pos, const MyString &str, size_t subpos, size_t sublen) {
	*this = substr(0, pos).append(str.substr(subpos, sublen)).append(substr(pos, getSize() - pos));
	return *this;
}
MyString& MyString::erase(size_t pos, size_t len) {
	int length = (len == msize) ? getSize() - pos : len;
	*this = substr(0, pos).append(substr(pos + len, getSize() - length - pos));
	return *this;
}
size_t MyString::find(const MyString &str, size_t pos) const {
	for (int i = pos; i < getSize(); i++) {
		if ((*this)[i] == str[0]) {
			if ((substr(i, str.getSize()) == str)) {
				return i;
			}
		}
	}
	return msize;
}
size_t MyString::find_first_of(const MyString &str, size_t pos) const {
	for (int i = 0; i < getSize(); i++) {
		for (int j = 0; j < str.getSize(); j++) {
			if ((*this)[i] == str[j]) {
				return i;
			}
		}
	}
	return msize;
}
ostream &operator<<(ostream& output, const MyString& str) {
	for (int i = 0; i < str.getSize(); i++) {
		output << str[i];
	}
	return output;
}

istream &operator>>(istream& input, MyString& str) {
	string s;
	getline(input, s);
	str.resize(s.length());
	for (int i = 0; i < s.length(); i++) {
		str[i] = s[i];
	}
	return input;
}
#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include "s1083334_MyArray.h"
#include"s1083334_MyArray.cpp"
using namespace std;


class MyString : public MyArray<char>
{
	friend ostream &operator<<(ostream& output, const MyString& str);
	friend istream &operator>>(istream& input, MyString& str);

public:
	MyString(); 
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString( const MyString &str ); 
	// Constructs a copy of "str". (copy constructor)

	MyString( const MyString &str, size_t pos, size_t len = msize ); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString( const char *s ); 
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString(); 
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append( const MyString &str ); 
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert( size_t pos, const MyString &str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert( size_t pos, const MyString &str, size_t subpos, size_t sublen = msize );
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase( size_t pos, size_t len = msize ); 
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find( const MyString &str, size_t pos = 0 ) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of( const MyString &str, size_t pos = 0 ) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.
	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif