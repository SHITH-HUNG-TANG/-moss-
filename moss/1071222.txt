#include"s1071222_MyArray.h"
#include<iostream>
using namespace std;

template<typename T>
ostream& operator<< (ostream& output, const MyArray< T >& right)
{
	for (int i = 0; i < right.size; i++)
	{
		output << right.data[i] << " ";
	}
	return output;
}

template <typename T>
MyArray< T >::MyArray(int newSize)
{
	size = 0;
	capacity = newSize;
	data = new T[capacity]();
}

template <typename T>
MyArray< T >::MyArray(int newSize, T value) :MyArray()
{
	if (size < newSize)
		resize(newSize);
	for (int i = 0; i < newSize; i++)
	{
		data[i] = value;
	}
}

template <typename T>
MyArray< T >::MyArray(const MyArray< T >& right)
{
	size = right.size;
	capacity = right.capacity;
	data = new T[capacity];
	for (int i = 0; i < size; i++)
		data[i] = right.data[i];
	for (int i = size; i < capacity; i++)
		data[i] = ' ';
}

template <typename T>
const MyArray< T >& MyArray< T >::operator=(const MyArray< T >& equal)
{
	if (&equal != this)
	{
		if (size != equal.size)
		{
			delete[] data;
			size = equal.size;
			capacity = equal.capacity;
			data = new T[capacity]();
		}
		for (int i = 0; i < size; i++)
		{
			data[i] = equal.data[i];
		}
	}
	return *this;
}

template <typename T>
bool MyArray< T >::operator==(const MyArray< T >& right)const
{
	if (size != right.size)
	{
		return false;
	}
	for (int i = 0; i < size; i++)
	{
		if (data[i] != right.data[i])
		{
			return false;
		}
	}
	return true;
}

template <typename T>
bool MyArray< T >::operator!=(const MyArray< T >& right)const
{
	if (size != right.size)
	{
		return true;
	}
	for (int i = 0; i < size; i++)
	{
		if (data[i] != right.data[i])
		{
			return true;
		}
	}
	return false;
}

template <typename T>
MyArray< T > MyArray< T >::operator+(const MyArray< T >& right)const
{
	/*MyArray x;
	int newSize = size + right.size;
	x.resize(newSize);
	for (int i = 0; i < size; i++)
		x.data[i] = data[i];
	for (int k = 0; k < right.size; k++)
		x.data[size + k] = right.data[k];
	x.data[size + right.size] = '\0';*/

	return MyArray(*this) += right;
}

template <typename T>
MyArray< T >& MyArray< T >::operator += (const MyArray< T >& right)
{
	int newSize = size + right.size;
	this->resize(newSize);
	for (int i = 0; i < right.size; i++)
		data[size - right.size + i] = right.data[i];

	return *this;
}

template <typename T>
T& MyArray< T >::operator[](int x)
{
	return data[x];
}

template <typename T>
T MyArray< T >::operator[](int x) const
{
	return data[x];
}

template <typename T>
T& MyArray< T >::at(int x)
{
	MyArray z(*this);
	z.shrink_to_fit();
	try {
		if (x >= size)
			throw out_of_range("get exception !!!");
		return data[x];
	}
	catch (out_of_range e) {
		cout << "get exception !!!";
		return data[x];
	}
}

template <typename T>
T MyArray< T >::at(int x)const
{
	MyArray z(*this);
	z.shrink_to_fit();
	try {
		if (x >= size)
			throw out_of_range("get exception !!!");
		cout << z.data[x];
	}
	catch (out_of_range e) {
		cout << "get exception !!!";
	}
	return z.data[x];
}

template <typename T>
int MyArray< T >::getSize() const
{
	return size;
}

template <typename T>
int MyArray< T >::getCapacity() const
{
	return capacity;
}

template <typename T>
void MyArray< T >::shrink_to_fit()
{
	MyArray x(*this);
	data = new T[size];
	for (int i = 0; i < size; i++)
		data[i] = x[i];
	capacity = size;
}

template <typename T>
void MyArray< T >::clear()
{
	MyArray x;
	x.resize(size);
	x.size = 0;
	*this = x;
}

template <typename T>
bool MyArray< T >::isEmpty()
{
	if (size == 0)
		return true;
	return false;
}

template <typename T>
void MyArray< T >::resize(size_t newSize, char x)
{
	while (newSize >= capacity)
	{
		reserve(capacity * 2);
	}

	if (newSize > size)
	{
		for (int i = size; i < newSize; i++)
		{
			data[i] = x;
		}
	}

	if (newSize >= size)
		size = newSize;
}

template <typename T>
void MyArray< T >::reserve(size_t newSize)
{
	if (newSize > capacity)
	{
		T* temp = new T[newSize];
		for (int i = 0; i < size; i++)
		{
			temp[i] = data[i];
		}
		capacity = newSize;
		delete[] data;
		data = temp;
	}
}

template <typename T>
MyArray< T >::~MyArray()
{
	delete[] data;
}

template class  MyArray<int>;
template class  MyArray<char>;
template class  MyArray<float>;
template class  MyArray<string>;#ifndef MyArray_H
#define MyArray_H
#include<iostream>
using namespace std;

template <typename T>
class MyArray
{
	//modify this class into a template class
	friend ostream& operator<<(ostream&, const MyArray< T >&);
	//friend istream& operator>>(istream&, MyArray&);
public:
	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(const MyArray< T >&);
	~MyArray();

	const MyArray< T >& operator=(const MyArray< T >&);
	bool operator==(const MyArray< T >&) const;
	bool operator!=(const MyArray< T >&) const;
	MyArray< T > operator+(const MyArray< T >&) const;	//new
	MyArray< T >& operator+=(const MyArray<T>&);		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t size, char item = ' ');
	void reserve(size_t size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

protected:
	int size;
	int capacity;
	T* data;
};
#endif // !MyArray

#include "s1071222_MyString.h"
#include<string>
#include<iostream>
using namespace std;

istream& operator>> (istream& input, MyString& right)
{
	string x;
	//cin >> x;
	getline(cin, x);
	char* ans = new char[x.size() + 1];
	for (int i = 0; i < x.size(); i++)
		ans[i] = x[i];
	ans[x.size()] = '\0';
	right = MyString::MyString(ans);
	return input;
}

ostream& operator<< (ostream& output, const MyString& right)
{
	for (int i = 0; i < right.size; i++)
	{
		output << right.data[i] << " ";
	}
	return output;
}

MyString::MyString():MyArray()
{
	;
}

MyString::MyString(const MyString& right):MyArray(right)
{
	;
}


MyString::MyString(const MyString& str, size_t pos, size_t len)
{
	if (len > str.size - pos + 1)//¶W¹L½d³ò
	{
		this->resize(str.size - pos + 1);
		for (int i = 0; i < str.size - pos + 1;i++)
		{
			this->data[i] = str.data[pos - 1 +i];
		}
	}
	else
	{
		this->resize(len);
		for (int i = 0; i < len; i++)
		{
			this->data[i] = str.data[pos - 1 + i];
		}
	}
}

MyString::MyString(const char* s)
{
	int newSize = 0;
	while(s[newSize] != '\0')
			newSize++;
	this->resize(newSize);
	for (int i = 0; i < newSize; i++)
		this->data[i] = s[i];
}

MyString::~MyString()
{
}

MyString& MyString::append(const MyString& str)
{
	this->operator+=(str);
	return *this;
}

MyString MyString::substr(size_t pos, size_t len) const
{
	MyString ans;
	if (len > this->size - pos + 1)//¶W¹L½d³ò
	{
		ans.resize(this->size - pos +1);
		for (int i = 0; i < this->size - pos; i++)
		{
			ans.data[i] = this->data[i + pos];
		}
	}
	else
	{
		ans.resize(len);
		for (int i = 0; i < len; i++)
		{
			ans.data[i] = this->data[i + pos];
		}
	}
	return ans;
}

MyString& MyString::insert(size_t pos, const MyString& str)
{
	MyString x(*this);
	this->resize(this->size + str.size);
	for (int i = 0; i < pos ; i++)
		this->data[i] = x.data[i];
	for (int i = 0; i < str.size; i++)
		this->data[pos + i] = str.data[i];
	for (int i = pos; i < x.size; i++)
		this->data[i+str.size] = x.data[i];

	return *this;
}

MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen)
{
	MyString x(*this);
	this->resize(this->size + sublen);
	for (int i = 0; i < pos; i++)
		this->data[i] = x.data[i];
	for (int i = 0; i <= sublen; i++)
		this->data[pos + i] = str.data[subpos + i];
	for (int i = pos; i < x.size; i++)
		this->data[i + sublen] = x.data[i];

	return *this;
}

MyString& MyString::erase(size_t pos, size_t len)
{
	if (len > this->size - pos)//¶W¹L½d³ò
	{
		for (int i = 0; i < this->size - pos; i++)
		{
			this->data[i + pos] = ' ';
		}
	}
	else
	{
		for (int i = 0; i < len; i++)
		{
			this->data[i + pos] = ' ';
		}
	}
	return *this;
}

int MyString::find(const MyString& str, size_t pos) const
{
	bool decide = false;
	for (int i = pos; i < this->size; i++)
	{
		if (this->data[i] == str.data[0])
		{
			for (int k = 0; k < str.size; k++)
			{
				if (str.data[k] != this->data[i + k])
				{
					decide = false;
					break;
				}
				else
					decide = true;
			}
		}
		if (decide == true)
			return i - pos;
	}
		return MyString::msize;
}

int MyString::find_first_of(const MyString& str, size_t pos) const
{
	bool decide = false;
	for (int i = pos; i < this->size; i++)
	{
		for (int k = 0; k < str.size; k++)
		{
			if (str.data[k] == this->data[i])
				decide = true;
		}
		if (decide == true)
			return i;
	}
	return MyString::msize;
}
#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include"s1071222_MyArray.h"
using namespace std;

class MyString : public MyArray< char >
{
	friend istream &operator>>(istream&, MyString&);
	friend ostream& operator<< (ostream& , const MyString& );

public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString& str);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString& str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char* s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString& str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString& str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString& str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	int find(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	int find_first_of(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif#include"s1071222_MyArray.h"
#include<iostream>
using namespace std;

template<typename T>
ostream& operator<< (ostream& output, const MyArray< T >& right)
{
	for (int i = 0; i < right.size; i++)
	{
		output << right.data[i] << " ";
	}
	return output;
}

template <typename T>
MyArray< T >::MyArray(int newSize)
{
	size = 0;
	capacity = newSize;
	data = new T[capacity]();
}

template <typename T>
MyArray< T >::MyArray(int newSize, T value) :MyArray()
{
	if (size < newSize)
		resize(newSize);
	for (int i = 0; i < newSize; i++)
	{
		data[i] = value;
	}
}

template <typename T>
MyArray< T >::MyArray(const MyArray< T >& right)
{
	size = right.size;
	capacity = right.capacity;
	data = new T[capacity];
	for (int i = 0; i < size; i++)
		data[i] = right.data[i];
	for (int i = size; i < capacity; i++)
		data[i] = ' ';
}

template <typename T>
const MyArray< T >& MyArray< T >::operator=(const MyArray< T >& equal)
{
	if (&equal != this)
	{
		if (size != equal.size)
		{
			delete[] data;
			size = equal.size;
			capacity = equal.capacity;
			data = new T[capacity]();
		}
		for (int i = 0; i < size; i++)
		{
			data[i] = equal.data[i];
		}
	}
	return *this;
}

template <typename T>
bool MyArray< T >::operator==(const MyArray< T >& right)const
{
	if (size != right.size)
	{
		return false;
	}
	for (int i = 0; i < size; i++)
	{
		if (data[i] != right.data[i])
		{
			return false;
		}
	}
	return true;
}

template <typename T>
bool MyArray< T >::operator!=(const MyArray< T >& right)const
{
	if (size != right.size)
	{
		return true;
	}
	for (int i = 0; i < size; i++)
	{
		if (data[i] != right.data[i])
		{
			return true;
		}
	}
	return false;
}

template <typename T>
MyArray< T > MyArray< T >::operator+(const MyArray< T >& right)const
{
	/*MyArray x;
	int newSize = size + right.size;
	x.resize(newSize);
	for (int i = 0; i < size; i++)
		x.data[i] = data[i];
	for (int k = 0; k < right.size; k++)
		x.data[size + k] = right.data[k];
	x.data[size + right.size] = '\0';*/

	return MyArray(*this) += right;
}

template <typename T>
MyArray< T >& MyArray< T >::operator += (const MyArray< T >& right)
{
	int newSize = size + right.size;
	this->resize(newSize);
	for (int i = 0; i < right.size; i++)
		data[size - right.size + i] = right.data[i];

	return *this;
}

template <typename T>
T& MyArray< T >::operator[](int x)
{
	return data[x];
}

template <typename T>
T MyArray< T >::operator[](int x) const
{
	return data[x];
}

template <typename T>
T& MyArray< T >::at(int x)
{
	MyArray z(*this);
	z.shrink_to_fit();
	try {
		if (x >= size)
			throw out_of_range("get exception !!!");
		return data[x];
	}
	catch (out_of_range e) {
		cout << "get exception !!!";
		return data[x];
	}
}

template <typename T>
T MyArray< T >::at(int x)const
{
	MyArray z(*this);
	z.shrink_to_fit();
	try {
		if (x >= size)
			throw out_of_range("get exception !!!");
		cout << z.data[x];
	}
	catch (out_of_range e) {
		cout << "get exception !!!";
	}
	return z.data[x];
}

template <typename T>
int MyArray< T >::getSize() const
{
	return size;
}

template <typename T>
int MyArray< T >::getCapacity() const
{
	return capacity;
}

template <typename T>
void MyArray< T >::shrink_to_fit()
{
	MyArray x(*this);
	data = new T[size];
	for (int i = 0; i < size; i++)
		data[i] = x[i];
	capacity = size;
}

template <typename T>
void MyArray< T >::clear()
{
	MyArray x;
	x.resize(size);
	x.size = 0;
	*this = x;
}

template <typename T>
bool MyArray< T >::isEmpty()
{
	if (size == 0)
		return true;
	return false;
}

template <typename T>
void MyArray< T >::resize(size_t newSize, char x)
{
	while (newSize >= capacity)
	{
		reserve(capacity * 2);
	}

	if (newSize > size)
	{
		for (int i = size; i < newSize; i++)
		{
			data[i] = x;
		}
	}

	if (newSize >= size)
		size = newSize;
}

template <typename T>
void MyArray< T >::reserve(size_t newSize)
{
	if (newSize > capacity)
	{
		T* temp = new T[newSize];
		for (int i = 0; i < size; i++)
		{
			temp[i] = data[i];
		}
		capacity = newSize;
		delete[] data;
		data = temp;
	}
}

template <typename T>
MyArray< T >::~MyArray()
{
	delete[] data;
}

template class  MyArray<int>;
template class  MyArray<char>;
template class  MyArray<float>;
template class  MyArray<string>;#ifndef MyArray_H
#define MyArray_H
#include<iostream>
using namespace std;

template <typename T>
class MyArray
{
	//modify this class into a template class
	friend ostream& operator<<(ostream&, const MyArray< T >&);
	//friend istream& operator>>(istream&, MyArray&);
public:
	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(const MyArray< T >&);
	~MyArray();

	const MyArray< T >& operator=(const MyArray< T >&);
	bool operator==(const MyArray< T >&) const;
	bool operator!=(const MyArray< T >&) const;
	MyArray< T > operator+(const MyArray< T >&) const;	//new
	MyArray< T >& operator+=(const MyArray<T>&);		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t size, char item = ' ');
	void reserve(size_t size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

protected:
	int size;
	int capacity;
	T* data;
};
#endif // !MyArray

#include "s1071222_MyString.h"
#include<string>
#include<iostream>
using namespace std;

istream& operator>> (istream& input, MyString& right)
{
	string x;
	//cin >> x;
	getline(cin, x);
	char* ans = new char[x.size() + 1];
	for (int i = 0; i < x.size(); i++)
		ans[i] = x[i];
	ans[x.size()] = '\0';
	right = MyString::MyString(ans);
	return input;
}

ostream& operator<< (ostream& output, const MyString& right)
{
	for (int i = 0; i < right.size; i++)
	{
		output << right.data[i] << " ";
	}
	return output;
}

MyString::MyString():MyArray()
{
	;
}

MyString::MyString(const MyString& right):MyArray(right)
{
	;
}


MyString::MyString(const MyString& str, size_t pos, size_t len)
{
	if (len > str.size - pos + 1)//¶W¹L½d³ò
	{
		this->resize(str.size - pos + 1);
		for (int i = 0; i < str.size - pos + 1;i++)
		{
			this->data[i] = str.data[pos - 1 +i];
		}
	}
	else
	{
		this->resize(len);
		for (int i = 0; i < len; i++)
		{
			this->data[i] = str.data[pos - 1 + i];
		}
	}
}

MyString::MyString(const char* s)
{
	int newSize = 0;
	while(s[newSize] != '\0')
			newSize++;
	this->resize(newSize);
	for (int i = 0; i < newSize; i++)
		this->data[i] = s[i];
}

MyString::~MyString()
{
}

MyString& MyString::append(const MyString& str)
{
	this->operator+=(str);
	return *this;
}

MyString MyString::substr(size_t pos, size_t len) const
{
	MyString ans;
	if (len > this->size - pos + 1)//¶W¹L½d³ò
	{
		ans.resize(this->size - pos +1);
		for (int i = 0; i < this->size - pos; i++)
		{
			ans.data[i] = this->data[i + pos];
		}
	}
	else
	{
		ans.resize(len);
		for (int i = 0; i < len; i++)
		{
			ans.data[i] = this->data[i + pos];
		}
	}
	return ans;
}

MyString& MyString::insert(size_t pos, const MyString& str)
{
	MyString x(*this);
	this->resize(this->size + str.size);
	for (int i = 0; i < pos ; i++)
		this->data[i] = x.data[i];
	for (int i = 0; i < str.size; i++)
		this->data[pos + i] = str.data[i];
	for (int i = pos; i < x.size; i++)
		this->data[i+str.size] = x.data[i];

	return *this;
}

MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen)
{
	MyString x(*this);
	this->resize(this->size + sublen);
	for (int i = 0; i < pos; i++)
		this->data[i] = x.data[i];
	for (int i = 0; i <= sublen; i++)
		this->data[pos + i] = str.data[subpos + i];
	for (int i = pos; i < x.size; i++)
		this->data[i + sublen] = x.data[i];

	return *this;
}

MyString& MyString::erase(size_t pos, size_t len)
{
	if (len > this->size - pos)//¶W¹L½d³ò
	{
		for (int i = 0; i < this->size - pos; i++)
		{
			this->data[i + pos] = ' ';
		}
	}
	else
	{
		for (int i = 0; i < len; i++)
		{
			this->data[i + pos] = ' ';
		}
	}
	return *this;
}

int MyString::find(const MyString& str, size_t pos) const
{
	bool decide = false;
	for (int i = pos; i < this->size; i++)
	{
		if (this->data[i] == str.data[0])
		{
			for (int k = 0; k < str.size; k++)
			{
				if (str.data[k] != this->data[i + k])
				{
					decide = false;
					break;
				}
				else
					decide = true;
			}
		}
		if (decide == true)
			return i - pos;
	}
		return MyString::msize;
}

int MyString::find_first_of(const MyString& str, size_t pos) const
{
	bool decide = false;
	for (int i = pos; i < this->size; i++)
	{
		for (int k = 0; k < str.size; k++)
		{
			if (str.data[k] == this->data[i])
				decide = true;
		}
		if (decide == true)
			return i;
	}
	return MyString::msize;
}
#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include"s1071222_MyArray.h"
using namespace std;

class MyString : public MyArray< char >
{
	friend istream &operator>>(istream&, MyString&);
	friend ostream& operator<< (ostream& , const MyString& );

public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString& str);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString& str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char* s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString& str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString& str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString& str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	int find(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	int find_first_of(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif