#ifndef MyArray_H
#define MyArray_H
#include <iostream>
#include <stdexcept>
#include <string>
using namespace std;

template <class T>
class MyArray {	//modify this class into a template class
	friend ostream& operator<<(ostream& out, const MyArray<T>& outPoint)
	{
		for (int i = 0; i < outPoint.size; i++)
			out << outPoint.data[i];

		out << endl;

		return out;
	};
	friend istream& operator>>(istream& in, MyArray<T>& inPoint)
	{
		string input;
		in >> input;

		for (int i = 0; i < input.size(); i++)
		{
			inPoint.size += 1;
			while (inPoint.getCapacity() <= inPoint.getSize())
				inPoint.reserve(inPoint.getCapacity() * 2);
			
			inPoint.data[i] = input[i];
		}
		return in;
	};
public:
	MyArray(T arr[], int arrSize)//Bonus
	{
		capacity = 10;
		while (arrSize >= capacity)
			capacity *= 2;
		data = new T[capacity];
		size = arrSize;
		for (int i = 0; i < size; i++)
			data[i] = arr[i];
	};
	MyArray(int Capacity = 10)
	{
		capacity = (Capacity > 0) ? Capacity : 10;
		size = 0;
		data = new T[capacity];
	};
	MyArray(int Size, T value)
	{
		capacity = 10;
		while (Size >= capacity)
			capacity *= 2;
		data = new T[capacity];
		size = Size;
		for (int i = 0; i < Size; i++)
			data[i] = value;
	};
	MyArray(const MyArray<T> & a)
	{
		capacity = a.capacity;
		size = a.size;
		data = new T[capacity];
		for (int i = 0; i < a.capacity; i++)
			data[i] = a.data[i];
	};
	virtual ~MyArray()
	{
		delete[] data;
	};
	
	const MyArray<T>& operator=(const MyArray<T>& a)
	{
		delete[] data;
		capacity = a.capacity;
		size = a.size;
		data = new T[capacity];
		for (int i = 0; i < a.capacity; i++)
			data[i] = a.data[i];
		return *this;
	};
	bool operator==(const MyArray& a) const;
	bool operator!=(const MyArray& a) const;
	MyArray<T> operator+(const MyArray<T>& a) const
	{
		MyArray<T> temp;
		temp.size = getSize() + a.getSize();
		while (temp.getCapacity() <= temp.getSize())
			temp.reserve(temp.getCapacity() * 2);

		for (int i = 0; i < getSize(); i++)
			temp.data[i] = data[i];

		for (int i = getSize(); i < temp.getSize(); i++)
			temp.data[i] = a.data[i - getSize()];

		return temp;
	};	//new
	MyArray<T>& operator+=(const MyArray<T>& a)
	{
		while (getCapacity() <= getSize())
			reserve(getCapacity() * 2);

		for (int i = getSize(); i < getSize() + a.getSize(); i++)
			data[i] = a.data[i - getSize()];

		size += a.getSize();
		return *this;
	};		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t n, T item);
	void reserve(size_t n);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

private:
	int size;
	int capacity;
	T* data;
};

template <class T>
bool MyArray<T>::operator==(const MyArray& a) const
{
	if (capacity != a.capacity)
		return false;
	else
	{
		for (int i = 0; i < capacity; i++)
			if (data[i] != a.data[i])
				return false;

		return true;
	}
}

template <class T>
bool MyArray<T>::operator!=(const MyArray& a) const
{
	return !(*this == a);
}

template <class T>
T& MyArray<T>::operator[](int subscript)
{
	if (subscript < 0 || subscript >= capacity)
		cerr << "\nError: Subscript " << subscript << " out of range" << endl;

	return data[subscript];
}

template <class T>
T MyArray<T>::operator[](int subscript)const
{
	if (subscript < 0 || subscript >= capacity)
		cerr << "\nError: Subscript " << subscript << " out of range" << endl;

	return data[subscript];
}

template <class T>
int MyArray<T>::getSize()const
{
	return size;
}

template <class T>
int MyArray<T>::getCapacity()const
{
	return capacity;
}

template <class T>
void MyArray<T>::reserve(size_t n)
{
	if (n > capacity)
	{
		T *temp = new T[capacity];

		for (int i = 0; i < capacity; i++)
			temp[i] = data[i];

		delete[] data;
		data = new T[n];

		for (int i = 0; i < capacity; i++)
			data[i] = temp[i];

		delete[] temp;

		capacity = n;
	}
}

template <class T>
void MyArray<T>::resize(size_t n, T item)
{
	if (n >= capacity)
	{
		while (capacity <= n)
			reserve(capacity * 2);
		for (int i = size; i < capacity; i++)
			data[i] = item;
		size = n;
	}
	else if (n > size && n < capacity)
	{
		for (int i = size; i < n; i++)
			data[i] = item;
		size = n;
	}
	else if (n < size)
	{
		for (int i = n; i < capacity; i++)
			data[i] = '\0';
		size = n;
	}
}

template <class T>
void MyArray<T>::shrink_to_fit()
{
	T *temp = new T[capacity];

	for (int i = 0; i < capacity; i++)
		temp[i] = data[i];

	delete[] data;
	data = new T[size];

	for (int i = 0; i < size; i++)
		data[i] = temp[i];

	delete[] temp;

	capacity = size;
}

template <class T>
void MyArray<T>::clear()
{
	delete[] data;
	data = new T[capacity];
	size = 0;
}

template <class T>
bool MyArray<T>::isEmpty()
{
	if (size == 0)
		return true;
	return false;
}

template <class T>
T& MyArray<T>::at(int subscript)
{
	if (subscript < 0 || subscript >= capacity)
		throw out_of_range(to_string(subscript) + " out of range");

	return data[subscript];
}

template <class T>
T MyArray<T>::at(int subscript) const
{
	if (subscript < 0 || subscript >= capacity)
		throw out_of_range(to_string(subscript) + " out of range");

	return data[subscript];
}

#endif // !MyArray#ifndef MyString_H
#define MyString_H
#include <iostream>
#include "s1061643_MyArray.h"
using namespace std;

class MyString : public MyArray<char>
{
	friend ostream &operator<<(ostream& output, const MyString& str)
	{
		for (int i = 0; i < str.getSize(); i++)
			output << str[i];

		output << endl;

		return output;
	};
	friend istream& operator>>(istream& input, MyString& str)
	{
		string inputStr;
		getline(input, inputStr);

		for (int i = 0; i < inputStr.size(); i++)
			str.resize(str.getSize() + 1, inputStr[i]);

		return input;
	};

public:
	MyString() : MyArray(){};
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString &str): MyArray(str){};
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString &str, size_t pos, size_t len = msize)
	{
		reserve(str.getCapacity());
		for (int i = 0; i < len; i++)
			resize(i + 1, str[pos + i]);
	}; // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char *s)
	{
		string str = s;
		while (getCapacity() <= str.size())
			reserve(getCapacity() * 2);
		for (int i = 0; i < str.size(); i++)
			resize(i + 1, str[i]);
	};
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString(){};
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString &str)
	{
		while (getSize() + str.getSize() >= getCapacity())
			reserve(getCapacity() * 2);
		for (int i = 0; i < str.getSize(); i++)
			resize(getSize() + 1, str[i]);
		return *this;
	};
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const
	{
		MyString temp;
		while (temp.getCapacity() <= len)
			temp.reserve(temp.getCapacity() * 2);
		for (int i = 0; i < len; i++)
			temp.resize(i + 1, (*this)[pos + i]);
		return temp;
	};
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString &str)
	{
		MyString sub;
		for (int i = pos; i < getSize(); i++)
			sub.resize(sub.getSize() + 1, (*this)[i]);
		resize(pos, '\0');
		while (getCapacity() <= getSize() + str.getSize())
			reserve(getCapacity() * 2);
		for (int i = 0; i < str.getSize(); i++)
			resize(getSize() + 1, str[i]);
		for (int i = 0; i < sub.getSize(); i++)
			resize(getSize() + 1, sub[i]);
		return *this;
	};
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString &str, size_t subpos, size_t sublen = msize)
	{
		MyString sub;
		for (int i = pos; i < getSize(); i++)
			sub.resize(sub.getSize() + 1, (*this)[i]);
		resize(pos, '\0');
		while (getCapacity() <= getSize() + str.getSize())
			reserve(getCapacity() * 2);
		for (int i = 0; i < sublen; i++)
			resize(getSize() + 1, str[subpos + i]);
		for (int i = 0; i < sub.getSize(); i++)
			resize(getSize() + 1, sub[i]);
		return *this;
	};
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize)
	{
		MyString save;
		for (int i = pos + len; i < getSize(); i++)
			save.resize(save.getSize() + 1, (*this)[i]);
		resize(pos, '\0');
		for (int i = 0; i < save.getSize(); i++)
			resize(getSize() + 1, save[i]);
		return *this;
	};
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString &str, size_t pos = 0) const
	{
		for (int i = pos; i < getSize(); i++)
		{
			if ((*this)[i] == str[0])
			{
				MyString temp;
				for (int j = 0; j < str.getSize(); j++)
					temp.resize(temp.getSize() + 1, (*this)[j + i]);
				if (temp == str)
					return i;
			}
		}
		return msize;
	};
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString &str, size_t pos = 0) const
	{
		for (int i = pos; i < getSize(); i++)
		{
			for (int j = 0; j < str.getSize(); j++)
				if ((*this)[i] == str[j])
					return i;
		}
		return msize;
	};
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.
	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif#ifndef MyArray_H
#define MyArray_H
#include <iostream>
#include <stdexcept>
#include <string>
using namespace std;

template <class T>
class MyArray {	//modify this class into a template class
	friend ostream& operator<<(ostream& out, const MyArray<T>& outPoint)
	{
		for (int i = 0; i < outPoint.size; i++)
			out << outPoint.data[i];

		out << endl;

		return out;
	};
	friend istream& operator>>(istream& in, MyArray<T>& inPoint)
	{
		string input;
		in >> input;

		for (int i = 0; i < input.size(); i++)
		{
			inPoint.size += 1;
			while (inPoint.getCapacity() <= inPoint.getSize())
				inPoint.reserve(inPoint.getCapacity() * 2);
			
			inPoint.data[i] = input[i];
		}
		return in;
	};
public:
	MyArray(T arr[], int arrSize)//Bonus
	{
		capacity = 10;
		while (arrSize >= capacity)
			capacity *= 2;
		data = new T[capacity];
		size = arrSize;
		for (int i = 0; i < size; i++)
			data[i] = arr[i];
	};
	MyArray(int Capacity = 10)
	{
		capacity = (Capacity > 0) ? Capacity : 10;
		size = 0;
		data = new T[capacity];
	};
	MyArray(int Size, T value)
	{
		capacity = 10;
		while (Size >= capacity)
			capacity *= 2;
		data = new T[capacity];
		size = Size;
		for (int i = 0; i < Size; i++)
			data[i] = value;
	};
	MyArray(const MyArray<T> & a)
	{
		capacity = a.capacity;
		size = a.size;
		data = new T[capacity];
		for (int i = 0; i < a.capacity; i++)
			data[i] = a.data[i];
	};
	virtual ~MyArray()
	{
		delete[] data;
	};
	
	const MyArray<T>& operator=(const MyArray<T>& a)
	{
		delete[] data;
		capacity = a.capacity;
		size = a.size;
		data = new T[capacity];
		for (int i = 0; i < a.capacity; i++)
			data[i] = a.data[i];
		return *this;
	};
	bool operator==(const MyArray& a) const;
	bool operator!=(const MyArray& a) const;
	MyArray<T> operator+(const MyArray<T>& a) const
	{
		MyArray<T> temp;
		temp.size = getSize() + a.getSize();
		while (temp.getCapacity() <= temp.getSize())
			temp.reserve(temp.getCapacity() * 2);

		for (int i = 0; i < getSize(); i++)
			temp.data[i] = data[i];

		for (int i = getSize(); i < temp.getSize(); i++)
			temp.data[i] = a.data[i - getSize()];

		return temp;
	};	//new
	MyArray<T>& operator+=(const MyArray<T>& a)
	{
		while (getCapacity() <= getSize())
			reserve(getCapacity() * 2);

		for (int i = getSize(); i < getSize() + a.getSize(); i++)
			data[i] = a.data[i - getSize()];

		size += a.getSize();
		return *this;
	};		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t n, T item);
	void reserve(size_t n);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

private:
	int size;
	int capacity;
	T* data;
};

template <class T>
bool MyArray<T>::operator==(const MyArray& a) const
{
	if (capacity != a.capacity)
		return false;
	else
	{
		for (int i = 0; i < capacity; i++)
			if (data[i] != a.data[i])
				return false;

		return true;
	}
}

template <class T>
bool MyArray<T>::operator!=(const MyArray& a) const
{
	return !(*this == a);
}

template <class T>
T& MyArray<T>::operator[](int subscript)
{
	if (subscript < 0 || subscript >= capacity)
		cerr << "\nError: Subscript " << subscript << " out of range" << endl;

	return data[subscript];
}

template <class T>
T MyArray<T>::operator[](int subscript)const
{
	if (subscript < 0 || subscript >= capacity)
		cerr << "\nError: Subscript " << subscript << " out of range" << endl;

	return data[subscript];
}

template <class T>
int MyArray<T>::getSize()const
{
	return size;
}

template <class T>
int MyArray<T>::getCapacity()const
{
	return capacity;
}

template <class T>
void MyArray<T>::reserve(size_t n)
{
	if (n > capacity)
	{
		T *temp = new T[capacity];

		for (int i = 0; i < capacity; i++)
			temp[i] = data[i];

		delete[] data;
		data = new T[n];

		for (int i = 0; i < capacity; i++)
			data[i] = temp[i];

		delete[] temp;

		capacity = n;
	}
}

template <class T>
void MyArray<T>::resize(size_t n, T item)
{
	if (n >= capacity)
	{
		while (capacity <= n)
			reserve(capacity * 2);
		for (int i = size; i < capacity; i++)
			data[i] = item;
		size = n;
	}
	else if (n > size && n < capacity)
	{
		for (int i = size; i < n; i++)
			data[i] = item;
		size = n;
	}
	else if (n < size)
	{
		for (int i = n; i < capacity; i++)
			data[i] = '\0';
		size = n;
	}
}

template <class T>
void MyArray<T>::shrink_to_fit()
{
	T *temp = new T[capacity];

	for (int i = 0; i < capacity; i++)
		temp[i] = data[i];

	delete[] data;
	data = new T[size];

	for (int i = 0; i < size; i++)
		data[i] = temp[i];

	delete[] temp;

	capacity = size;
}

template <class T>
void MyArray<T>::clear()
{
	delete[] data;
	data = new T[capacity];
	size = 0;
}

template <class T>
bool MyArray<T>::isEmpty()
{
	if (size == 0)
		return true;
	return false;
}

template <class T>
T& MyArray<T>::at(int subscript)
{
	if (subscript < 0 || subscript >= capacity)
		throw out_of_range(to_string(subscript) + " out of range");

	return data[subscript];
}

template <class T>
T MyArray<T>::at(int subscript) const
{
	if (subscript < 0 || subscript >= capacity)
		throw out_of_range(to_string(subscript) + " out of range");

	return data[subscript];
}

#endif // !MyArray#ifndef MyString_H
#define MyString_H
#include <iostream>
#include "s1061643_MyArray.h"
using namespace std;

class MyString : public MyArray<char>
{
	friend ostream &operator<<(ostream& output, const MyString& str)
	{
		for (int i = 0; i < str.getSize(); i++)
			output << str[i];

		output << endl;

		return output;
	};
	friend istream& operator>>(istream& input, MyString& str)
	{
		string inputStr;
		getline(input, inputStr);

		for (int i = 0; i < inputStr.size(); i++)
			str.resize(str.getSize() + 1, inputStr[i]);

		return input;
	};

public:
	MyString() : MyArray(){};
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString &str): MyArray(str){};
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString &str, size_t pos, size_t len = msize)
	{
		reserve(str.getCapacity());
		for (int i = 0; i < len; i++)
			resize(i + 1, str[pos + i]);
	}; // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char *s)
	{
		string str = s;
		while (getCapacity() <= str.size())
			reserve(getCapacity() * 2);
		for (int i = 0; i < str.size(); i++)
			resize(i + 1, str[i]);
	};
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString(){};
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString &str)
	{
		while (getSize() + str.getSize() >= getCapacity())
			reserve(getCapacity() * 2);
		for (int i = 0; i < str.getSize(); i++)
			resize(getSize() + 1, str[i]);
		return *this;
	};
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const
	{
		MyString temp;
		while (temp.getCapacity() <= len)
			temp.reserve(temp.getCapacity() * 2);
		for (int i = 0; i < len; i++)
			temp.resize(i + 1, (*this)[pos + i]);
		return temp;
	};
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString &str)
	{
		MyString sub;
		for (int i = pos; i < getSize(); i++)
			sub.resize(sub.getSize() + 1, (*this)[i]);
		resize(pos, '\0');
		while (getCapacity() <= getSize() + str.getSize())
			reserve(getCapacity() * 2);
		for (int i = 0; i < str.getSize(); i++)
			resize(getSize() + 1, str[i]);
		for (int i = 0; i < sub.getSize(); i++)
			resize(getSize() + 1, sub[i]);
		return *this;
	};
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString &str, size_t subpos, size_t sublen = msize)
	{
		MyString sub;
		for (int i = pos; i < getSize(); i++)
			sub.resize(sub.getSize() + 1, (*this)[i]);
		resize(pos, '\0');
		while (getCapacity() <= getSize() + str.getSize())
			reserve(getCapacity() * 2);
		for (int i = 0; i < sublen; i++)
			resize(getSize() + 1, str[subpos + i]);
		for (int i = 0; i < sub.getSize(); i++)
			resize(getSize() + 1, sub[i]);
		return *this;
	};
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize)
	{
		MyString save;
		for (int i = pos + len; i < getSize(); i++)
			save.resize(save.getSize() + 1, (*this)[i]);
		resize(pos, '\0');
		for (int i = 0; i < save.getSize(); i++)
			resize(getSize() + 1, save[i]);
		return *this;
	};
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString &str, size_t pos = 0) const
	{
		for (int i = pos; i < getSize(); i++)
		{
			if ((*this)[i] == str[0])
			{
				MyString temp;
				for (int j = 0; j < str.getSize(); j++)
					temp.resize(temp.getSize() + 1, (*this)[j + i]);
				if (temp == str)
					return i;
			}
		}
		return msize;
	};
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString &str, size_t pos = 0) const
	{
		for (int i = pos; i < getSize(); i++)
		{
			for (int j = 0; j < str.getSize(); j++)
				if ((*this)[i] == str[j])
					return i;
		}
		return msize;
	};
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.
	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif#ifndef MyArray_H
#define MyArray_H
#include <iostream>
#include <stdexcept>
#include <string>
using namespace std;

template <class T>
class MyArray {	//modify this class into a template class
	friend ostream& operator<<(ostream& out, const MyArray<T>& outPoint)
	{
		for (int i = 0; i < outPoint.size; i++)
			out << outPoint.data[i];

		out << endl;

		return out;
	};
	friend istream& operator>>(istream& in, MyArray<T>& inPoint)
	{
		string input;
		in >> input;

		for (int i = 0; i < input.size(); i++)
		{
			inPoint.size += 1;
			while (inPoint.getCapacity() <= inPoint.getSize())
				inPoint.reserve(inPoint.getCapacity() * 2);
			
			inPoint.data[i] = input[i];
		}
		return in;
	};
public:
	MyArray(T arr[], int arrSize)//Bonus
	{
		capacity = 10;
		while (arrSize >= capacity)
			capacity *= 2;
		data = new T[capacity];
		size = arrSize;
		for (int i = 0; i < size; i++)
			data[i] = arr[i];
	};
	MyArray(int Capacity = 10)
	{
		capacity = (Capacity > 0) ? Capacity : 10;
		size = 0;
		data = new T[capacity];
	};
	MyArray(int Size, T value)
	{
		capacity = 10;
		while (Size >= capacity)
			capacity *= 2;
		data = new T[capacity];
		size = Size;
		for (int i = 0; i < Size; i++)
			data[i] = value;
	};
	MyArray(const MyArray<T> & a)
	{
		capacity = a.capacity;
		size = a.size;
		data = new T[capacity];
		for (int i = 0; i < a.capacity; i++)
			data[i] = a.data[i];
	};
	virtual ~MyArray()
	{
		delete[] data;
	};
	
	const MyArray<T>& operator=(const MyArray<T>& a)
	{
		delete[] data;
		capacity = a.capacity;
		size = a.size;
		data = new T[capacity];
		for (int i = 0; i < a.capacity; i++)
			data[i] = a.data[i];
		return *this;
	};
	bool operator==(const MyArray& a) const;
	bool operator!=(const MyArray& a) const;
	MyArray<T> operator+(const MyArray<T>& a) const
	{
		MyArray<T> temp;
		temp.size = getSize() + a.getSize();
		while (temp.getCapacity() <= temp.getSize())
			temp.reserve(temp.getCapacity() * 2);

		for (int i = 0; i < getSize(); i++)
			temp.data[i] = data[i];

		for (int i = getSize(); i < temp.getSize(); i++)
			temp.data[i] = a.data[i - getSize()];

		return temp;
	};	//new
	MyArray<T>& operator+=(const MyArray<T>& a)
	{
		while (getCapacity() <= getSize())
			reserve(getCapacity() * 2);

		for (int i = getSize(); i < getSize() + a.getSize(); i++)
			data[i] = a.data[i - getSize()];

		size += a.getSize();
		return *this;
	};		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t n, T item);
	void reserve(size_t n);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

private:
	int size;
	int capacity;
	T* data;
};

template <class T>
bool MyArray<T>::operator==(const MyArray& a) const
{
	if (capacity != a.capacity)
		return false;
	else
	{
		for (int i = 0; i < capacity; i++)
			if (data[i] != a.data[i])
				return false;

		return true;
	}
}

template <class T>
bool MyArray<T>::operator!=(const MyArray& a) const
{
	return !(*this == a);
}

template <class T>
T& MyArray<T>::operator[](int subscript)
{
	if (subscript < 0 || subscript >= capacity)
		cerr << "\nError: Subscript " << subscript << " out of range" << endl;

	return data[subscript];
}

template <class T>
T MyArray<T>::operator[](int subscript)const
{
	if (subscript < 0 || subscript >= capacity)
		cerr << "\nError: Subscript " << subscript << " out of range" << endl;

	return data[subscript];
}

template <class T>
int MyArray<T>::getSize()const
{
	return size;
}

template <class T>
int MyArray<T>::getCapacity()const
{
	return capacity;
}

template <class T>
void MyArray<T>::reserve(size_t n)
{
	if (n > capacity)
	{
		T *temp = new T[capacity];

		for (int i = 0; i < capacity; i++)
			temp[i] = data[i];

		delete[] data;
		data = new T[n];

		for (int i = 0; i < capacity; i++)
			data[i] = temp[i];

		delete[] temp;

		capacity = n;
	}
}

template <class T>
void MyArray<T>::resize(size_t n, T item)
{
	if (n >= capacity)
	{
		while (capacity <= n)
			reserve(capacity * 2);
		for (int i = size; i < capacity; i++)
			data[i] = item;
		size = n;
	}
	else if (n > size && n < capacity)
	{
		for (int i = size; i < n; i++)
			data[i] = item;
		size = n;
	}
	else if (n < size)
	{
		for (int i = n; i < capacity; i++)
			data[i] = '\0';
		size = n;
	}
}

template <class T>
void MyArray<T>::shrink_to_fit()
{
	T *temp = new T[capacity];

	for (int i = 0; i < capacity; i++)
		temp[i] = data[i];

	delete[] data;
	data = new T[size];

	for (int i = 0; i < size; i++)
		data[i] = temp[i];

	delete[] temp;

	capacity = size;
}

template <class T>
void MyArray<T>::clear()
{
	delete[] data;
	data = new T[capacity];
	size = 0;
}

template <class T>
bool MyArray<T>::isEmpty()
{
	if (size == 0)
		return true;
	return false;
}

template <class T>
T& MyArray<T>::at(int subscript)
{
	if (subscript < 0 || subscript >= capacity)
		throw out_of_range(to_string(subscript) + " out of range");

	return data[subscript];
}

template <class T>
T MyArray<T>::at(int subscript) const
{
	if (subscript < 0 || subscript >= capacity)
		throw out_of_range(to_string(subscript) + " out of range");

	return data[subscript];
}

#endif // !MyArray#ifndef MyString_H
#define MyString_H
#include <iostream>
#include "s1061643_MyArray.h"
using namespace std;

class MyString : public MyArray<char>
{
	friend ostream &operator<<(ostream& output, const MyString& str)
	{
		for (int i = 0; i < str.getSize(); i++)
			output << str[i];

		output << endl;

		return output;
	};
	friend istream& operator>>(istream& input, MyString& str)
	{
		string inputStr;
		getline(input, inputStr);

		for (int i = 0; i < inputStr.size(); i++)
			str.resize(str.getSize() + 1, inputStr[i]);

		return input;
	};

public:
	MyString() : MyArray(){};
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString &str): MyArray(str){};
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString &str, size_t pos, size_t len = msize)
	{
		reserve(str.getCapacity());
		for (int i = 0; i < len; i++)
			resize(i + 1, str[pos + i]);
	}; // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char *s)
	{
		string str = s;
		while (getCapacity() <= str.size())
			reserve(getCapacity() * 2);
		for (int i = 0; i < str.size(); i++)
			resize(i + 1, str[i]);
	};
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString(){};
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString &str)
	{
		while (getSize() + str.getSize() >= getCapacity())
			reserve(getCapacity() * 2);
		for (int i = 0; i < str.getSize(); i++)
			resize(getSize() + 1, str[i]);
		return *this;
	};
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const
	{
		MyString temp;
		while (temp.getCapacity() <= len)
			temp.reserve(temp.getCapacity() * 2);
		for (int i = 0; i < len; i++)
			temp.resize(i + 1, (*this)[pos + i]);
		return temp;
	};
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString &str)
	{
		MyString sub;
		for (int i = pos; i < getSize(); i++)
			sub.resize(sub.getSize() + 1, (*this)[i]);
		resize(pos, '\0');
		while (getCapacity() <= getSize() + str.getSize())
			reserve(getCapacity() * 2);
		for (int i = 0; i < str.getSize(); i++)
			resize(getSize() + 1, str[i]);
		for (int i = 0; i < sub.getSize(); i++)
			resize(getSize() + 1, sub[i]);
		return *this;
	};
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString &str, size_t subpos, size_t sublen = msize)
	{
		MyString sub;
		for (int i = pos; i < getSize(); i++)
			sub.resize(sub.getSize() + 1, (*this)[i]);
		resize(pos, '\0');
		while (getCapacity() <= getSize() + str.getSize())
			reserve(getCapacity() * 2);
		for (int i = 0; i < sublen; i++)
			resize(getSize() + 1, str[subpos + i]);
		for (int i = 0; i < sub.getSize(); i++)
			resize(getSize() + 1, sub[i]);
		return *this;
	};
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize)
	{
		MyString save;
		for (int i = pos + len; i < getSize(); i++)
			save.resize(save.getSize() + 1, (*this)[i]);
		resize(pos, '\0');
		for (int i = 0; i < save.getSize(); i++)
			resize(getSize() + 1, save[i]);
		return *this;
	};
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString &str, size_t pos = 0) const
	{
		for (int i = pos; i < getSize(); i++)
		{
			if ((*this)[i] == str[0])
			{
				MyString temp;
				for (int j = 0; j < str.getSize(); j++)
					temp.resize(temp.getSize() + 1, (*this)[j + i]);
				if (temp == str)
					return i;
			}
		}
		return msize;
	};
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString &str, size_t pos = 0) const
	{
		for (int i = pos; i < getSize(); i++)
		{
			for (int j = 0; j < str.getSize(); j++)
				if ((*this)[i] == str[j])
					return i;
		}
		return msize;
	};
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.
	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif