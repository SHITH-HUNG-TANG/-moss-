//#define  _CRT_SECURE_NO_WARNINGS
#include "s1081545_MyArray.h"
#include <string>

template <class T>
MyArray<T>::MyArray(int Capacity = DefaultCapacity)
{
	this->size = 0;
	this->capacity = (Capacity > 0 ? Capacity : DefaultCapacity);
	this->data = new T[this->capacity]{};
}

template <class T>
MyArray<T>::MyArray(int Size, T value)
{
	int curCapacity = DefaultCapacity;
	while (Size >= curCapacity)
		curCapacity *= 2;
	this->data = new T[curCapacity]{};
	this->capacity = curCapacity;
	this->size = Size;
	for (int i = 0; i < Size; i++)
		this->data[i] = value;
}

template <class T>
MyArray<T>::MyArray(const MyArray &objAry)
{
	this->size = objAry.size;
	this->capacity = objAry.capacity;
	this->data = new T[this->capacity]{};
	for (int i = 0; i < this->size; i++)
		this->data[i] = objAry.data[i];
}

template <class T>
MyArray<T>::MyArray(const T* inAry, int Size)
{
	int curCapacity = DefaultCapacity;
	while (Size >= curCapacity)
		curCapacity *= 2;
	this->data = new T[curCapacity]{};
	this->capacity = curCapacity;
	this->size = Size;
	for (int i = 0; i < Size; i++)
		this->data[i] = inAry[i];
}

template <class T>
MyArray<T>::~MyArray()
{
	delete[] this->data;
}

template <class T>
const MyArray<T>& MyArray<T>::operator=(const MyArray&objAry)
{
	if (*this == objAry)
		return *this;
	T *newData = new T[objAry.capacity]{};
	for (int i = 0; i < objAry.size; i++)
		newData[i] = objAry.data[i];
	delete[] this->data;
	this->data = newData;
	this->Size = objAry.Size;
	this->Capacity = objAry.Capacity;
	return *this;
}

template <class T>
bool MyArray<T>::operator==(const MyArray&objAry) const
{
	if (this->size != objAry.size)
		return false;
	for (int i = 0; i < this->size; i++)
	{
		if (this->data[i] != objAry.data[i])
			return false;
	}
	return true;
}

template <class T>
bool MyArray<T>::operator!=(const MyArray&objAry) const
{
	return !(*this == objAry);
}

template <class T>
MyArray<T> MyArray<T>::operator+(const MyArray& objAry) const
{
	MyArray<T> ResArray(*this);
	ResArray.size = ResArray.size + objAry.size;
	int curCapacity = ResArray.capacity;
	while (ResArray.size >= curCapacity)
		curCapacity *= 2;
	ResArray.reserve(curCapacity);
	for (int i = this->size; i < ResArray.size; i++)
		ResArray.data[i] = objAry.data[i - this->size];
	return ResArray;
}

template <class T>
MyArray<T>& MyArray<T>::operator+=(const MyArray& objAry)
{
	int curCapacity = this->capacity;
	while (this->size + objAry.size >= curCapacity)
		curCapacity *= 2;
	this->reserve(curCapacity);
	for (int i = 0; i < objAry.size; i++)
		this->data[i + this->size] = objAry.data[i];
	this->size = this->size + objAry.size;
	return *this;
}

template <class T>
MyArray<T> MyArray<T>::operator+(const int& input) const
{
	MyArray<T> ResArray(*this);
	if (is_same<T, int>::value)
	{
		for (int i = 0; i < ResArray.size; i++)
			ResArray.data[i] += input;
	}
	return ResArray;
}

template <class T>
MyArray<T> MyArray<T>::operator-(const int& input) const
{
	MyArray<T> ResArray(*this);
	if (is_same<T, int>::value)
	{
		for (int i = 0; i < ResArray.size; i++)
			ResArray.data[i] -= input;
	}
	return ResArray;
}

template <class T>
MyArray<T> MyArray<T>::operator*(const int& input) const
{
	MyArray<T> ResArray(*this);
	if (is_same<T, int>::value)
	{
		for (int i = 0; i < ResArray.size; i++)
			ResArray.data[i] *= input;
	}
	return ResArray;
}

template <class T>
T& MyArray<T>::operator[](int Index)
{
	if (Index <0 || Index >= this->capacity)
	{
		throw out_of_range("Array error: Out of range");
	}
	return this->data[Index];
}

template <class T>
T MyArray<T>::operator[](int Index) const
{
	if (Index <0 || Index >= this->capacity)
	{
		throw out_of_range("Array error: Out of range");
	}
	return this->data[Index];
}

template <class T>
T& MyArray<T>::at(int Index)
{
	if (Index <0 || Index >= this->capacity)
	{
		throw out_of_range("Array error: Out of range");
	}
	return this->data[Index];
}

template <class T>
T MyArray<T>::at(int Index) const
{
	if (Index <0 || Index >= this->capacity)
	{
		throw out_of_range("Array error: Out of range");
	}
	return this->data[Index];
}

template <class T>
int MyArray<T>::getSize() const
{
	return this->size;
}

template <class T>
int MyArray<T>::getCapacity() const
{
	return this->capacity;
}

template <class T>
void MyArray<T>::resize(size_t newSize, T item)
{
	if (newSize >= (size_t)this->capacity || newSize == (size_t)this->size)
		return; // newSize more than original capacity or equal to original size, do nothing

	if (newSize < (size_t)this->size)
	{
		for (int i = newSize; i < this->size; i++)
			this->data[i] = 0;
	}
	else if (newSize >(size_t)this->size)
	{
		for (size_t i = this->Size; i < newSize; i++)
			this->data[i] = item;
	}
	this->size = newSize;
}

template <class T>
void MyArray<T>::reserve(size_t newCapacity)
{
	if (newCapacity <= (size_t)this->capacity)
		return;        // nothing happen
	T *newData = new T[newCapacity]{};
	for (int i = 0; i < this->size; i++)
		newData[i] = this->data[i];
	delete[] this->data;
	this->data = newData;
	this->capacity = newCapacity;
}

template <class T>
void MyArray<T>::shrink_to_fit()
{
	int newCapacity = this->size;
	T *newData = new T[newCapacity]{};
	for (int i = 0; i < this->size; i++)
		newData[i] = this->data[i];
	delete[] this->data;
	this->data = newData;
	this->capacity = newCapacity;
}

template <class T>
void MyArray<T>::clear()
{
	if (isEmpty())
		return;

	delete[] this->data;
	this->data = new T[this->capacity]{};
	this->size = 0;
}

template <class T>
bool MyArray<T>::isEmpty()
{
	if (this->size == 0)
		return true;
	else
		return false;
}

template <class T>
ostream& operator<<(ostream& out, const MyArray<T>& objAry)
{
	for (int i = 0; i < objAry.size; i++)
		cout << objAry.data[i] << " ";
	return out;
}

template <class T>
istream& operator>>(istream& input, MyArray<T>& objAry)
{
	string strInput;
	input >> strInput;

	string delimiter = ",";
	int ind = 0;
	size_t pos = 0;
	while ((pos = strInput.find(delimiter)) != string::npos)
	{
		string token = strInput.substr(0, pos);
		if (is_same<T, int>::value)
			objAry.data[ind++] = stoi(token);
		else
		{
			char cStr[2];
			strcpy_s(cStr, token.c_str());
			objAry.data[ind++] = cStr[0];
		}
		strInput.erase(0, pos + delimiter.length());
	}
	objAry.size = ind;

	return input;
}//#define  _CRT_SECURE_NO_WARNINGS
#ifndef s1081545_MyArray_H
#define s1081545_MyArray_H
#pragma once
#include<iostream>

#define DefaultCapacity  10 

using namespace std;

template <class T>
class MyArray
{	//modify this class into a template class
	template<class U>
	friend ostream& operator<<(ostream&, const MyArray<U>&);
	template<class U>
	friend istream& operator>>(istream&, MyArray<U>&);
public:
	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(const MyArray&);
	MyArray(const T[], int);
	~MyArray();

	const MyArray& operator=(const MyArray&);
	bool operator==(const MyArray&) const;
	bool operator!=(const MyArray&) const;
	MyArray operator+(const MyArray&) const;	//new
	MyArray& operator+=(const MyArray&);		//new
	MyArray operator+(const int&) const;
	MyArray operator-(const int&) const;
	MyArray operator*(const int&) const;
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t size, T item);
	void reserve(size_t size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();

protected:
	int size;
	int capacity;
	T* data;
};
#endif // !MyArray
//#define  _CRT_SECURE_NO_WARNINGS
#include "s1081545_MyString.h"
#include <string>

MyString::MyString()
{

}

MyString::MyString(const MyString& objStr)
{
	this->size = objStr.size;
	this->capacity = objStr.capacity;
	this->data = new char[this->capacity]{};
	for (int i = 0; i < this->size; i++)
		this->data[i] = objStr.data[i];
}

MyString::MyString(const MyString& objStr, size_t pos, size_t len)
{
	int curCapacity = this->capacity;
	while ((int)len >= curCapacity)
		curCapacity *= 2;
	this->reserve(curCapacity);
	for (unsigned int i = 0; i < len; i++)
		this->data[i] = objStr.data[pos + i];
	this->size = len;
}

MyString::MyString(const char *str)
{
	int len = strlen(str);
	int curCapacity = this->capacity;
	while (len >= curCapacity)
		curCapacity *= 2;
	this->reserve(curCapacity);
	for (int i = 0; i < len; i++)
		this->data[i] = str[i];
	this->size = len;
}

MyString::~MyString()
{

}

MyString& MyString::append(const MyString &objStr)
{
	*this += objStr;
	return *this;
}

MyString MyString::substr(size_t pos, size_t len) const
{
	MyString ResString(*this);
	for (unsigned int i = 0; i < len; i++)
		ResString.data[i] = this->data[pos + i];
	ResString.size = len;
	return ResString;
}

MyString& MyString::insert(size_t pos, const MyString & objStr)
{
	int curCapacity = this->capacity;
	int oriSize = this->size;
	this->size += objStr.size;
	while (this->size >= curCapacity)
		curCapacity *= 2;
	this->reserve(curCapacity);
	for (unsigned int i = oriSize - 1; i >= pos; i--)
		this->data[objStr.size + i] = this->data[i];
	for (int i = 0; i < objStr.size; i++)
		this->data[pos + i] = objStr.data[i];
	return *this;
}

MyString& MyString::insert(size_t pos, const MyString &objStr, size_t subpos, size_t sublen)
{
	int curCapacity = this->capacity;
	int oriSize = this->size;
	this->size += sublen;
	while (this->size >= curCapacity)
		curCapacity *= 2;
	this->reserve(curCapacity);
	for (unsigned int i = oriSize - 1; i >= pos; i--)
		this->data[sublen + i] = this->data[i];
	for (unsigned int i = 0; i < sublen; i++)
		this->data[pos + i] = objStr.data[i + subpos];
	return *this;
}

MyString& MyString::erase(size_t pos, size_t len)
{
	int oriSize = this->size;
	this->size -= len;
	for (unsigned int i = pos; i <(unsigned int)oriSize; i++)
		this->data[i] = this->data[len + i];
	this->data[this->size] = '\0';
	return *this;
}

size_t MyString::find(const MyString &objStr, size_t pos) const
{
	for (int st = pos; st < this->size - objStr.size; st++)
	{
		bool found = true;
		for (int i = 0; i < objStr.size; i++)
		{
			if (this->data[st + i] != objStr.data[i])
			{
				found = false;
				st += i;
				break;
			}
		}
		if (found)
			return (size_t)st;
	}
	return msize;
}

size_t MyString::find_first_of(const MyString &objStr, size_t pos) const
{
	for (int st = pos; st < this->size; st++)
	{
		for (int i = 0; i < objStr.size; i++)
		{
			if (this->data[st] == objStr.data[i])
				return (size_t)st;
		}
	}
	return msize;
}//#define  _CRT_SECURE_NO_WARNINGS
#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include "s1081545_MyArray.h"
#include "s1081545_MyArray.cpp"

using namespace std;

class MyString : public MyArray<char>
{
	//friend ostream &operator<<(ostream& output, const MyString& str);

public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString &str);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString &str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char *s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString &str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString &str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString &str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString &str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString &str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif