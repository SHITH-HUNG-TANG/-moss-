#include <iostream>
#include <exception>
#include "s1083308_MyArray.h"
using namespace std;

template<typename T>
MyArray<T>::MyArray(int Capacity)
{
	capacity = Capacity;
	while (size > capacity)
		reserve(capacity * 2);
	size = 0;
	data = new T[capacity];
}

template<typename T>
MyArray<T>::MyArray(int Size, T value)
{
	capacity = 10;
	while (Size > capacity)
		reserve(capacity * 2);
	data = new T[capacity];
	size = Size;
	for (int i = 0; i < size; i++)
	{
		data[i] = value;
	}

}

template<typename T>
MyArray<T>::MyArray(const MyArray<T>& copy)
{
	*this = copy; //modify
	//size = copy.getSize();
	//capacity = copy.getCapacity();
	//delete[] data;
	//data = new T[capacity];

	//for (int i = 0; i < size; i++)
	//	data[i] = copy.data[i];
}

template<typename T>
const MyArray<T>& MyArray<T>::operator=(const MyArray<T>& copy)
{
	size = copy.getSize();
	capacity = copy.getCapacity();
	//delete[] data; //modify
	data = new T[capacity];

	for (int i = 0; i < size; i++)
		data[i] = copy.data[i];

	return *this;
}

template <typename T>
MyArray<T>::~MyArray()
{
	delete[] data;
}

template<typename T>
bool MyArray<T>::operator==(const MyArray& right) const
{
	if (size != right.size)
		return false;

	for (int i = 0; i < size; i++)
		if (data[i] != right.data[i])
			return false;

	return true;
}

template<typename T>
bool MyArray<T>:: operator!=(const MyArray& bignum) const
{
	return !(*this == bignum);
}

template<typename T>
MyArray<T> MyArray<T>::operator+(const MyArray<T>& right)
{
	MyArray a(*this);
	a += right;
	return a;
}//new

template<typename T>
MyArray<T>& MyArray<T>:: operator+=(const MyArray<T>& right)
{
	int orisize = size;
	int newsize = size + right.size;

	resize(newsize, 0);

	for (int i = 0; i < newsize; i++)
	{
		if (i >= orisize)
			data[i] = right.data[i - orisize];
	}

	return *this;
}//new

template<typename T>
int MyArray<T>::getSize() const
{
	return size;
}
template<typename T>
int MyArray<T>::getCapacity() const
{
	return capacity;
}

//
template<typename T>
T& MyArray<T>:: operator[](int num)
{
	if (num < 0 || num >= size)
	{
		cerr << "Error" << endl;
	}

	return  data[num];
}

template<typename T>
T MyArray<T>::operator[](int num) const
{
	if (num < 0 || num >= size)
	{
		cerr << "Error" << endl;
	}

	return data[num] ;
}

template<typename T>
void MyArray<T>::resize(size_t Size, T item)
{
	if (Size > size)
	{
		while (Size > capacity)
		{
			capacity *= 2;
		}

		T* temp = new T[capacity];

		for (int i = 0; i < Size; i++)
		{
			temp[i] = item;
		}

		for (int i = 0; i < size; i++)
		{
			temp[i] = data[i];
		}
		size = Size;

		delete[] data;

		data = temp;
	}
	else
	{
		T* temp = new T[size];

		for (int i = 0; i < size; i++)
		{
			temp[i] = data[i];
		}
		size = Size;
		delete[] data;
		data = temp;
	}


}

template<typename T>
void MyArray<T>::reserve(size_t Capacity)
{
	if (Capacity > capacity)
		capacity = Capacity;

	T* temp = new T[capacity];

	for (int i = 0; i < size; i++)
	{
		temp[i] = data[i];
	}

	delete[] data;

	data = temp;
}

template<typename T>
T& MyArray<T>::at(int num)
{
	if (num < 0 || num >= size)
	{
		throw Error();
	}
	else
		return data[num];
}

template<typename T>
T MyArray<T>::at(int num) const
{
	if (num < 0 || num >= size)
	{
		throw Error();
	}
	else
		return data[num];
}

template<typename T>
ostream& operator<<(ostream& out, const MyArray <T>& right)
{
	cout << right.data[0];
	for (int i = 1; i < right.size; i++)
		out << " , " << right.data[i];

	return out;
}

template<typename T>
void MyArray<T>::shrink_to_fit()
{
	reserve(size);
}

template<typename T>
bool MyArray<T>::isEmpty()
{
	if (size == 0)
		return true;
	else
		return false;
}


template<typename T>
void MyArray<T>::clear()
{
	size = 0;
	capacity = 10;
	delete[] data;
	data = new T[capacity];
}

template class MyArray<int>;
template class MyArray<char>;
#ifndef MYARRAY_H
#define MYARRAY_H
#include<iostream>
using namespace std;

class Error : public exception
{
public:
	Error() :exception("out of range") {};
};
template<typename T>
class MyArray :public Error
{	//modify this class into a template class

	template<typename T>
	friend ostream& operator<<(ostream&, const MyArray<T>&);

	//friend istream& operator>>(istream&, MyArray<T>&);
public:
	MyArray(int Capacity = 10);

	MyArray(int Size, T value);

	MyArray(const MyArray<T>&);

	~MyArray();

	const MyArray<T>& operator=(const MyArray<T>&);

	bool operator==(const MyArray<T>&) const;

	bool operator!=(const MyArray<T>&) const;

	MyArray operator+(const MyArray<T>&);	//new

	MyArray& operator+=(const MyArray<T>&);		//new

	T& operator[](int);

	T operator[](int) const;

	T& at(int);		//new

	T at(int) const;	//new

	int getSize() const;

	int getCapacity() const;

	void resize(size_t Size, T item);

	void reserve(size_t Capacity);

	void shrink_to_fit();	//new

	void clear();			//new

	bool isEmpty();			//new

private:
	int size;
	int capacity;
	T* data;
};


#endif // !MyArray



#include "s1083308_MyArray.h"
#include "s1083308_MyString.h"
#include <iostream>
#include <string>
using namespace std;

MyString::MyString()
	:MyArray()
{
	
}

MyString::MyString(const MyString& str)
	:MyArray(str)
{
	
}

MyString::MyString(int Size, char value)
	:MyArray(Size , value)
{

}

MyString::~MyString()
{
	
}


MyString::MyString(const MyString& str, size_t pos, size_t len)
{
	resize(len, 0);
	int k = 0;
	for (int i = pos; i < pos + len; i++)
	{
		this->operator[](k) = str[i];
		k++;
	}
}

MyString::MyString(const char* s)
{
	int lenth = 0;
	while (s[lenth] != '\0')
		lenth++;

	resize(lenth , '\0') ;

	for (int i = 0; i < lenth; i++)
	{
		this->operator[](i) = s[i];
	}
}

const MyString& MyString::operator=(const MyString& copy)
{
	resize(copy.getSize(), 0);

	for (int i = 0; i < getSize(); i++)
		this->operator[](i) = copy[i];

	return *this;
}

MyString MyString::operator+(const MyString& right)
{
	MyString a(*this);
	a += right;
	return a;
}//new

MyString& MyString:: operator+=(const MyString& right)
{
	int orisize = getSize();
	int newsize = getSize() + right.getSize();

	resize(newsize, 0);

	for (int i = 0; i < newsize; i++)
	{
		if (i >= orisize)
			this->operator[](i) = right[i - orisize];
	}

	return *this;
}//new

MyString MyString::substr(size_t pos, size_t len) const
{
	MyString n2(*this, pos, len);
	return n2;
}

ostream& operator<<(ostream& out, const MyString & right)
{
	
	for (int i = 0; i < right.getSize(); i++)
	{
			out << right[i] ;
	}
	return out;
}

istream& operator>>(istream& in, MyString& right)
{
	string temp;
	in >> temp;
	right.resize(temp.length(), '\0');
	for (int i = 0; i < right.getSize(); i++)
	{
		right[i] = temp[i];
	}

	return in;
}

MyString& MyString::append(const MyString& str)
{
	int orisize = getSize();
	resize(getSize() + str.getSize() + 1 , '\0');
	int k = 0;
	for (int i = orisize ; i < getSize(); i++)
	{
		if (i == orisize)
			this->operator[](i) = ' ';
		else
		{
			this->operator[](i) = str[k];
			k++;
		}
	}
	
	return *this;
}

MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen)
{
	MyString a1( str, subpos, sublen );
	MyString temp1;
	MyString temp2;
	temp1.resize(getSize() - sublen,0);
	temp2.resize( sublen , 0 );
	for (int i = 0; i < temp1.getSize(); i++)
	{
		temp1[i] = this->operator[](i);
	}
	for (int i = 0; i < temp2.getSize(); i++)
	{
		temp2[i] = this->operator[](i + sublen );
	}
	MyString sum;
	sum.resize( temp1.getSize() + temp2.getSize() + a1.getSize(), '\0');
	sum = temp1 + a1 + temp2;
	*this = sum;
	return *this;	
}

MyString& MyString::insert(size_t pos, const MyString& str)
{
	int orisize = getSize();
	resize( str.getSize() + getSize() , '\0' ) ;
	int newsize = getSize();
	for (int i = orisize-1 ; i >= pos; i--)
	{
		this->operator[](newsize - 1) = this->operator[](i);
		newsize--;
	}
	int k = 0;
	for (int i = pos ; i < pos + str.getSize() ; i++)
	{
		this->operator[](i) = str[k];
		k++;
	}
	return *this;

}

MyString& MyString::erase(size_t pos, size_t len)
{
	for (int i = pos; i < pos + len; i++)
	{
		this->operator[](i) = '\0';
	}
	int p = pos;
	if(pos + len != getSize())
	{ 
		for (int i = pos + len ; i < getSize() ; i++)
		{
			this->operator[](p) = this->operator[](i);
			p++;
		}
	}
	resize(getSize() - len, '\0');
	return *this;
}

size_t MyString::find(const MyString& str, size_t pos ) const
{	
	if (str.getSize() > 1)
	{
		string ori;
		for (int i = 0; i < getSize(); i++)
		{
			ori += this->operator[](i);
		}
		string search;
		for (int i = 0; i < str.getSize(); i++)
		{
			search += str[i];
		}
		return ori.find(search);
	}
	else if (str.getSize() == 1)
	{
		return find_first_of(str, 0);
	}
}

size_t MyString::find_first_of(const MyString& str, size_t pos) const
{
	for (int i = 0; i < getSize(); i++)
		for (int j = 0; j < str.getSize(); j++)
		{
			if (this->operator[](i) == str[j])
			{
				return i;
			}
		}

	return msize;
}


#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include <istream>
#include <ostream>
#include "s1083308_MyArray.h"
//#include "XXXXXXXXXX.h"
using namespace std;
static const size_t msize = -1;
class MyString : public MyArray<char>
{
	friend ostream &operator<<(ostream& output, const MyString& str);
	friend istream &operator>>(istream& input, MyString& str);

public:
	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString& str);
	// Constructs a copy of "str". (copy constructor)

	MyString(int Size, char value);

	MyString(const MyString& str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char* s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	const MyString& operator=(const MyString&);
	MyString operator+(const MyString&);	//new
	MyString& operator+=(const MyString&);		//new

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString& str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString& str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString& str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString& str , size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString& str , size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	////You may add several helper functions or operators here
	////...
}; // end class MyString

#endif