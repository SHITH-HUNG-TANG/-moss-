#include "s1081420_MyArray.h"
#include<iostream>
#include <stdexcept> 
#include<stddef.h >
#define NULL 0
using namespace std;
using std::logic_error; 
using std::out_of_range;

//template <typename T>
//ostream& operator<<  (ostream& out, const MyArray<T>& right) {
//	for (int i = 0; i < right.getSize(); i++) out << right[i] << " ";
//	out << endl;
//	return out;
//}//輸出物件，中間含空格

template <typename T>
MyArray<T>::MyArray(int Capacity ) {
	size = 0;
	capacity = Capacity;
	data = new T[capacity]();
}//預設空間為capacity=10,size=0//每次空間格不夠時變成當下2倍大

template <typename T>
MyArray<T>::MyArray(size_t Size, T value) {
	size = Size;
	reserve(Size);
	data = new T[capacity]();
	for (int i = 0; i < Size; i++)data[i] = value;

}//ex.(3,5)陣列內容為3個5，value 的 type 要用template
 
  
  //Bouns->

template <typename T>
MyArray<T>::MyArray(T value[], int Size) {
	size = Size;
	reserve(Size);
	data = new T[capacity]();
	/*delete[]data;
	data = nullptr;*/
	for (int i = 0; i < Size; i++)data[i] = value[i];
}//傳入一個陣列讓陣列的內容放入Array(this)裡
 //Bouns<-

template <typename T>
MyArray<T>::MyArray(const MyArray<T> & right) {
	capacity = right.capacity;
	size = right.size;
	data = new T[capacity]();
	for (int i = 0; i < size; i++) {
		data[i] = right.data[i];
	}
}//copy constructor

template <typename T>
MyArray<T>::~MyArray() {
	size = 0;
	capacity = 0;
	delete[]data;
	data = nullptr;
}
template <typename T>
const MyArray<T>& MyArray<T>::operator=(const MyArray<T>& right) {
	if (&right != this) // avoid self-assignment
	{
		if (size != right.size)
		{
			delete[]data; // release spac
			capacity = right.capacity;
			size = right.size; // resize this object
			data = new T[capacity](); // create space for array copy
		} // end inner if

		for (int i = 0; i < size; i++)
			data[i] = right.data[i]; // copy array into object
	} // end outer if
	return *this;
}//assigment operator

template <typename T>
bool MyArray<T>::operator==(const MyArray<T>& right) const {
	if (size != right.size)
		return false;
	else {
		for (int i = size - 1; i >= 0; i--) {
			if (data[i] != right.data[i])return false;
		}
		return true;
	}
}

template <typename T>
bool MyArray<T>::operator!=(const MyArray<T>& right) const {
	return !(*this == right);
}

template <typename T>
MyArray<T> MyArray<T>::operator+(const MyArray<T>& right) const {
	MyArray<T> sum(*this);
	size_t  newsize = this->getSize() + right.getSize();
	sum.resize(newsize,NULL);
	/*for (int i = 0; i < this->getSize(); i++) {
		buffer[i] = sum[i];
	}*/
	for (int i = this->getSize(); i < this->getSize() + right.getSize(); i++) {
		sum[i] = right[i - this->getSize()];
	}
	return sum;
}	//NEW回傳新的容器，並且原本的兩者本身值不變


template <typename T>
MyArray<T>& MyArray<T>::operator+=(const MyArray<T>& right) {
	*this = *this + right;
	return *this;
}	//NEW回傳原容器修改過的結果


template<typename T>
T& MyArray<T>::operator[](int subscript) {
	if (subscript < 0 || subscript >= size) {
		cout << "Errror subscript(is [] not at)" << endl;
		exit(1);
	}
	return data[subscript];
}//可修改


template <typename T>
T MyArray<T>::operator[](int subscript) const {
	if (subscript < 0 || subscript >= size) {
		cout << "Errror subscript(is [] not at)" << endl;
		exit(1);
	}
	return data[subscript];
}//僅傳值


template <typename T>
T& MyArray<T>::at(int index) {
	try {
		if (index < 0 || index >= size)throw std::out_of_range("Error index");
		return  data[index];
	}
	catch(const std::out_of_range& oor){
		cerr << "Out of Range error: " << oor.what() << endl;
	}
}		//new。可修改，有範圍檢查之內容存取(exception)

template <typename T>
T MyArray<T>::at(int index) const {
	try {
		if (index < 0 || index >= size)throw std::out_of_range("Error index");
		return  data[index];
	}
	catch (const std::out_of_range& oor) {
		cerr << "Out of Range error: " << oor.what() << endl;
	}
}	//new。僅傳值，有範圍檢查之內容存取(exception)



template <typename T>
void MyArray<T>::resize(size_t newsize,T item) {
	if (newsize <= capacity) {
		if (newsize > size) {
			T* buffer = new T[capacity]();
			for (int i = 0; i < size; i++) {
				buffer[i] = data[i];
			}
			for (int i = size; i < newsize; i++) {
				buffer[i] = item;
			}
			delete[]data;
			data = buffer;
			size = newsize;
		}
		else {
			T* buffer = new T[capacity]();
			for (int i = 0; i < newsize; i++) {
				buffer[i] = data[i];
			}
			delete[]data;
			data = buffer;
			size = newsize;
		}
	}
	else {
		int newcap = capacity * 2;
		while (newsize > newcap)newcap *= 2;
		T* buffer = new T[newcap]();
		for (int i = 0; i < size; i++) {
			buffer[i] = data[i];
		}
		for (int i = size; i < newsize; i++) {
			buffer[i] = item;
		}
		delete[]data;
		data = buffer;
		size = newsize;
		capacity = newcap;
	}
}
template <typename T>
void  MyArray<T>::reserve(size_t newcap) {
	if (newcap <= capacity);
	else {
		while (newcap > capacity)capacity = newcap;
		T* buffer = new T[capacity]();
		for (int i = 0; i < size; i++) {
			buffer[i] = data[i];
		}
		delete[]data;
		data = buffer;
	}
}//將capacity直接變成所傳入的變數

template <typename T>
void MyArray<T>::shrink_to_fit() {
	capacity = size;
	T* buffer = new T[size];
	for (int i = 0; i < size; i++)
		buffer[i] = data[i];
	delete[] data;
	data = buffer;
}	//new。將capacity縮等於size

template <typename T>
void MyArray<T>::clear() {
	delete[]data;
	data = nullptr;
	resize(0);
}		//new。清除array內容


template <typename T>
bool MyArray<T>::isEmpty() {
	if (size != 0)return false;
	else {
		//if (data != nullptr)return false;
		return true;
	}
}	//new。檢查是否為空

//template class  MyArray<char*>;
//
template class  MyArray<int>;
template class  MyArray<char>;
template class  MyArray<string>;#pragma once
#ifndef s1081420_MyArray_H
#define s1081420_MyArray_H

#include <string>
#include<iostream>
using namespace std;

template<typename T>
class MyArray {	//modify this class into a template class
	//template<typename T>
	friend ostream& operator<< (ostream& out, const MyArray<T>& right) {
		for (int i = 0; i < right.getSize(); i++) out << right[i] << " ";
		out << endl;
		return out;
	}//輸出物件，中間含空格


	//friend istream& operator>>(istream&, MyArray&);
	public:
		MyArray(int Capacity = 10);//預設空間為capacity=10,size=0//每次空間格不夠時變成當下2倍大
		MyArray(size_t Size, T value);//ex.(3,5)陣列內容為3個5，value 的 type 要用template
		//Bouns->
		MyArray(T value[], int Size);//傳入一個陣列讓陣列的內容放入Array(this)裡
		//Bouns<-
		MyArray(const MyArray<T> & right);//copy constructor
		~MyArray();
		const MyArray<T>& operator=(const MyArray<T>&);//assigment operator
		bool operator==(const MyArray<T>&) const;
		bool operator!=(const MyArray<T>&) const;
		MyArray<T> operator+(const MyArray<T>&) const;	//NEW回傳新的容器，並且原本的兩者本身值不變
		MyArray<T>& operator+=(const MyArray<T>&) ;		//NEW回傳原容器修改過的結果
		T& operator[](int);//可修改
		T operator[](int) const;//僅傳值
		T& at(int);		//new。可修改，有範圍檢查之內容存取(exception)
		T at(int) const;	//new。僅傳值，有範圍檢查之內容存取(exception)

		int getSize() const { return size; };
		int getCapacity() const { return capacity; };
		void resize(size_t size, T item='\0');
		void reserve(size_t size);//將capacity直接變成所傳入的變數
		void shrink_to_fit();	//new。將capacity縮等於size
		void clear();			//new。清除array內容
		bool isEmpty();			//new。檢查是否為空
		/*class out_of_range : public logic_error {
		public:
			explicit out_of_range(const string& what_arg);
			explicit out_of_range(const char* what_arg);
		};*/

	private:
		int size = 0;
		int capacity = 10;
		T* data = nullptr;
};



//#include "s1081420_MyArray.cpp"
#endif // !s1081420_MyArray

#include "s1081420_MyString.h"



MyString::MyString(const MyString &str, size_t pos, size_t len ) {
	if (len == msize)len = str.getSize();
	this->resize(len);
	for (int i = pos; i < len; i++) (*this)[i - pos] = str[i];
}


MyString::MyString(const char *s) {
	/*string num = s;
	for (int i = 0; i < num.size(); i++)(*this)[i] = num[i];*/
	int num = 0;
	while (s[num] != '\0') {
		this->resize(this->getSize() + 1);
		(*this)[num] = s[num];
		num++;
	}
}

//template <typename T>
//MyString<T>::~MyString() {
//	size = 0;
//	capacity = 0;
//	delete[]data;
//	data = nullptr;
//}


MyString& MyString::append(const MyString &str) {
	int value = this->getSize();
	this->resize(value + str.getSize());
	for (int i = value; i < this->getSize(); i++)(*this)[i] = str[i - value];
	return *this;
}


MyString MyString::substr(size_t pos, size_t len ) const {
	MyString sub;
	if (len == msize)len = this->getSize();
	sub.resize(len);
	for (int i = pos; i < len + pos; i++) sub[i - pos] = (*this)[i];
	return sub;
}


MyString& MyString::insert(size_t pos, const MyString &str) {
	MyString sub;
	sub = this->substr(pos, this->getSize()-pos);
	/*sub.resize(this->getSize() - pos);
	for (i = pos; i < this->getSize() - pos; i++) sub[i - pos] = [i];*/
	this->resize(pos + str.getSize());
	for (int i = pos; i < str.getSize() + pos; i++)(*this)[i] = str[i - pos];
	this->append(sub);
	return *this;
}


MyString& MyString::insert(size_t pos, const MyString &str, size_t subpos, size_t sublen ) {
	MyString str_sub;
	str_sub = str.substr(subpos, sublen);
	this->insert(pos, str_sub);
	return *this;
}


MyString& MyString::erase(size_t pos, size_t len ) {
	MyString sub;
	sub = this->substr(pos + len, this->getSize()-(pos+len));
	this->resize(pos);
	this->append(sub);
	return *this;
}

int MyString::find(const MyString &str, size_t pos) const {
	int balance = msize;
	for (int i = pos; i < this->getSize(); i++) {
		if ((*this)[i] == str[0]&&balance==msize) {
			for (int j = i; j < str.getSize()+i; j++) {
				if ((*this)[j] == str[j - i]) {
					if (j-i != str.getSize() - 1)continue;
					else {
						balance = i;
						break;
					}
				}
				else break;
			}
		}
	}
	return balance;
}//完整字串


int MyString::find_first_of(const MyString& str, size_t pos) const {
	int tmp = msize;
	MyString arr;
	for (int i = 0; i < str.getSize(); i++) {
		arr.resize(1, str[i]);
		if (i == 0)tmp = str.find(arr, 0);
		else {
			if (tmp > str.find(arr))tmp = str.find(arr);
		}
	}
	return tmp;
	
}//找最早出現字串其中之一的字母

//template class  MyString<char*>;
//template class  MyString<int>;
//template class  MyString<char>;
//template class  MyString<string>;#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include "s1081420_MyArray.h"
using namespace std;

//static const size_t msize = -1;

//template <typename T>
class MyString : public MyArray<char>
{
	friend istream &operator >> (istream& in, MyString& right) {
		string s;
		in >> s;
		right.resize(s.size());
		for (int i = 0; i < s.size(); i++) right[i] = s[i];
		return in;
	}
	friend ostream &operator<<(ostream& out, const MyString& right) {
		for (int i = 0; i < right.getSize(); i++) out << right[i];
		out << endl;
		return out;
	}

public:
	MyString() : MyArray() {};
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString &str) :MyArray(str) {};
	// Constructs a copy of "str". (copy constructor)

	MyString( const MyString &str, size_t pos, size_t len = msize ); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString( const char *s ); 
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString() {};
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append( const MyString &str );
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString  substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert( size_t pos, const MyString &str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert( size_t pos, const MyString &str, size_t subpos, size_t sublen = msize );
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase( size_t pos, size_t len = msize );
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	int find(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	int  find_first_of(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif