
#include<iostream>
#ifndef ARRAY_H
#define ARRAY_H
using namespace std;

class Error : public exception
{
public:
	Error() :exception("out of range") {};
};

template<typename T>
class MyArray : public Error
{	//modify this class into a template class

	template<typename T>
	friend ostream& operator<<(ostream&, const MyArray<T>&);
	//friend istream& operator>>(istream&, MyArray&);
public:
	MyArray(int Capacity = 10);
	MyArray(int Size, T value);
	MyArray(const MyArray&);
	~MyArray();

	const MyArray& operator=(const MyArray&);
	bool operator==(const MyArray&) const;
	bool operator!=(const MyArray&) const;
	MyArray operator+(const MyArray&) const;	//new
	MyArray& operator+=(const MyArray&);		//new
	T& operator[](int);
	T operator[](int) const;
	T& at(int);		//new
	T at(int) const;	//new

	int getSize() const;
	int getCapacity() const;
	void resize(size_t size, T item);
	void reserve(size_t size);
	void shrink_to_fit();	//new
	void clear();			//new
	bool isEmpty();			//new

private:
	int size;
	int capacity = 10;
	T* data;
};
#endif // !MyArray

template<typename T>
ostream& operator<<(ostream& output, const MyArray<T>& x)
{
	for (int i = 0;i < x.size;i++)
	{
		output << x.data[i];
		//if (i != x.size - 1)
		cout << " ";
	}
	return output;
}

template<typename T>
MyArray<T>::MyArray(int arraySize)
{
	size = 0;
	/*
	while (arraySize > capacity) {
		capacity *= 2;
	}
	*/
	capacity = arraySize;
	data = new T[capacity]();
}

template<typename T>
MyArray<T>::MyArray(int Size, T value)
{
	while (Size > capacity) {
		capacity *= 2;
	}
	data = new T[capacity];
	size = Size;
	for (int i = 0;i < Size;i++) {

		data[i] = value;
	}
}

template<typename T>
MyArray<T>::MyArray(const MyArray& copy)
{
	capacity = copy.capacity;
	size = copy.size;
	data = new T[capacity]();
	for (int i = 0; i < size; i++)
		data[i] = copy.data[i];
}

template<typename T>
MyArray<T>::~MyArray()
{
	delete[]data;
}

template<typename T>
const MyArray<T>& MyArray<T>::operator=(const MyArray<T>& right)
{
	if (&right != this)
	{
		if (size != right.size)
		{
			delete[]data;
			capacity = right.capacity;
			size = right.size;
			data = new T[capacity];

		}
		for (int i = 0;i < size;i++)
			data[i] = right.data[i];
	}
	return *this;
}

template<typename T>
bool MyArray<T>::operator==(const MyArray& right) const
{
	if (size != right.size)
		return false;
	for (int i = 0;i < size;i++) {
		if (data[i] != right.data[i])
			return false;
	}
	return true;
}

template<typename T>
bool MyArray<T>::operator!=(const MyArray<T>& right) const
{
	return !(*this == right);
}

template<typename T>
MyArray<T> MyArray<T>::operator+(const MyArray<T>& a) const
{
	MyArray<T> ans;
	//cout << "t"<< endl;
	ans.resize(size + a.size, '0');
	for (int i = 0; i < size; i++) {
		ans.data[i] = data[i];
	}
	for (int i = size; i < ans.size; i++) {
		ans.data[i] = a.data[i - size];
	}
	cout << "ans=" << ans << endl;
	return ans;
}

template<typename T>
MyArray<T>& MyArray<T>::operator+=(const MyArray<T>& a)
{
	MyArray<T> ans;
	ans.resize(size + a.size, '0');
	for (int i = 0; i < size; i++) {
		ans.data[i] = data[i];
	}
	for (int i = size; i < ans.size; i++) {
		ans.data[i] = a.data[i - size];
	}
	*this = ans;
	return *this;
}

template<typename T>
T& MyArray<T>::operator[](int subscript)
{
	if (subscript < 0 || subscript >= size)
	{
		cerr << "\nError: Subscript " << subscript << " out of range" << endl;
		exit(1);
	}
	return data[subscript];
}

template<typename T>
T MyArray<T>::operator[](int subscript) const
{
	if (subscript < 0 || subscript >= size)
	{
		cerr << "\nError: Subscript " << subscript << " out of range" << endl;
		exit(1);
	}
	return data[subscript];
}

template<typename T>
T& MyArray<T>::at(int sub)
{
	if (sub < 0 || sub >= size)
	{
		throw Error();
	}
	return data[sub];
}

template<typename T>
T MyArray<T>::at(int sub) const
{
	if (sub < 0 || sub >= size)
	{
		throw Error();
	}
	return data[sub];
}

template<typename T>
void  MyArray<T>::resize(size_t n, T value) //change size
{
	/*
	if (n > capacity)
	{
		reserve(2 * capacity);
		if (n > capacity) {
			reserve(n);
		}
	}
	*/
	while (n > capacity)
	{
		reserve(2 * capacity);
	}
	for (int i = size;i < n;i++)
	{
		data[i] = value;
	}
	size = n;
}

template<typename T>
void MyArray<T>::reserve(size_t n) //change capacity
{
	T* x = new T[n]();
	for (int i = 0;i < size;i++)
	{
		x[i] = data[i];
	}
	delete[]data;
	data = x;
	capacity = n;
}

template<typename T>
int MyArray<T>::getSize()const
{
	return size;
}

template<typename T>
int MyArray<T>::getCapacity()const
{
	return capacity;
}

template<typename T>
void  MyArray<T>::shrink_to_fit()
{
	capacity = size;
}

template<typename T>
void  MyArray<T>::clear()
{
	for (int i = 0;i < size;i++) {
		data[i] = '\0';
	}
}

template<typename T>
bool MyArray<T>::isEmpty()
{
	for (int i = 0;i < size;i++) {

		if (data[i] == '\0')
			return true;
		else
			return false;
	}
}

#include<iostream>
#include<iomanip>
#include<cstdlib>
#include <limits.h>
#include<string>
#include"s1083335_MyString.h"
using namespace std;

MyString::MyString() 
	: MyArray()
{   }

MyString::MyString(const MyString& str)
	: MyArray(str)
{	}

MyString::MyString(const MyString& str, size_t pos, size_t len ) 
	: MyArray(5,'b')
{
	resize(str.getSize() - pos, ' ');
}

MyString::MyString(const char* s)
	: MyArray(1, 'a')
{
	if (NULL == s) { 
		resize(1,' ');
	}        
	int size = strlen(s);
	resize(size+1, '1');

	int i;
	for (i = 0;i < size;i++) {
		at(i) = s[i];
	}
	at(i) = '\0';
}

MyString::~MyString()
{   }
 
istream& operator>>(istream& in, MyString& right) {

	string temp;
	in >> temp;
	right.resize(temp.length(), '\0');
	for (int i = 0;i < right.getSize();i++) {
		right[i] = temp[i];
	}
	return in;
}

MyString& MyString::append(const MyString& str)
{
	*this += str;
	return *this;
}

MyString MyString::substr(size_t pos, size_t len) const
{
	if ((pos + len) >= getSize()) {
		throw Error(); 
	}  
	MyString x;        
	x.resize(len+1, '0');
	int i;
	int j = 0;
	for (i = pos;i < pos + len; i++) {
		x.at(j++) = at(i);
	}
	x.at(j) = '\0';
	return x;	
}

MyString& MyString::insert(size_t pos, const MyString& str)
{
	if (pos >= getSize()) {
		throw Error();
	}
	MyString x;
	x.resize(getSize() + str.getSize() + 1, '0');	
	int i = 0, j = 0, k = 0;

	for (i = 0;i < pos; i++) {
		x.at(j++) = at(i);
	}
	for (k = 0;k < str.getSize();k++) {
		x.at(j++) = str.at(k);
	}
	for (i = pos;i < getSize();i++) {
		x.at(j++) = at(i);
	}
	x.at(j) = '\0';

	*this = x;
	return *this;
}

MyString& MyString::insert(size_t pos, const MyString& str, size_t subpos, size_t sublen)
{
	if (pos >= getSize()) {
		throw Error();
	}
	if (subpos >= str.getSize()) {
		throw Error();
	}
	MyString x;
	x.resize(getSize() + sublen + 1, '0');
	int i = 0, j = 0, k = 0;

	for (i = 0;i < pos; i++) {
		x.at(j++) = at(i); //cc_
	}
	for (k = subpos;k < subpos + sublen;k++) { //1+2
		x.at(j++) = str.at(k);
	}
	for (i = pos;i < getSize();i++) {
		x.at(j++) = at(i);
	}
	x.at(j) = '\0';

	*this = x;
	return *this;
}

MyString& MyString::erase(size_t pos, size_t len)
{
	if (pos >= getSize()) {
		throw Error();
	}
	MyString x;
	x.resize(getSize() - len + 1, '0');
	int i = 0, j = 0, k = 0;

	for (i = 0;i < pos; i++) {
		x.at(j++) = at(i);
	}
	for (i = pos+len;i < getSize();i++) {
		x.at(j++) = at(i);
	}
	x.at(j) = '\0';

	*this = x;
	return *this;
}

size_t MyString::find(const MyString& str, size_t pos ) const
{
	if (pos >= getSize()) {
		throw Error();
	}

	int i = 0, j = 0, k = 0, flag = 0;
	char firstC=str.at(0);

	for (i = 0;i < getSize()-str.getSize(); i++) {
		flag = 0;
		if (at(i) == firstC) {
			for (k = 0;k < str.getSize();k++) {
				if (at(i + k) != str.at(k)) {
					flag = 1;
				}
			}	
			if (flag == 0) {
				return i;
			}
		}
	}
	return -1;
}

size_t MyString::find_first_of(const MyString& str, size_t pos) const
{
	if (pos >= getSize()) {
		throw Error();
	}
	int i = 0, j = 0, k = 0, flag = 0;
	char firstC = str.at(0);

	for (i = 0;i < getSize() - str.getSize(); i++) {
		for (k = 0;k < str.getSize();k++) {
			if (at(i) == str.at(k)) {
				return i;
			}
		}
	}
	return -1;
}
#ifndef PG2MyString_H
#define PG2MyString_H
#include <iostream>
#include "s1083335_MyArray.h"
using namespace std;

class MyString : public MyArray<char>
{
	//friend ostream &operator<<(ostream& output, const MyString& str);
	friend istream& operator>>(istream&, MyString&);
public:

	MyString();
	// Constructs an empty string, with a length of zero characters. 
	// *default capacity = 10

	MyString(const MyString& str);
	// Constructs a copy of "str". (copy constructor)

	MyString(const MyString& str, size_t pos, size_t len = msize); // (substring constructor)
	// Copies the portion of str that begins at the character position "pos" and spans "len" characters 
	// (or until the end of str, if either str is too short or if len is string::msize).

	MyString(const char* s);
	// Copies the array of character (C-string) pointed by s.
	// The char *s is a pointer to a null-terminated sequence of characters. (all following char* are the same/)
	// The sequence is copied as the new value for the string.

	~MyString();
	// Destroys the string object.

	static const size_t msize = -1;
	//Note: maximum size. You may use SIZE_MAX at <cstdint>, too.

	MyString& append(const MyString& str);
	// Appends a str on the tail of current MyString. 
	// *Return the reference of itself

	MyString substr(size_t pos, size_t len = msize) const;
	// The substring is the portion of the object that starts at character position pos and spans len characters 
	// (or until the end of the string, whichever comes first).
	// *Returns a newly constructed string object with its value initialized to a copy of a substring of this object.

	MyString& insert(size_t pos, const MyString& str);
	// Inserts a copy of a str at "pos".
	// example: str = "to be question", str2 = "the "
	// str.insert(6,str2); 
	// = to be (the )question = to be the question
	// *Return the reference of itself

	MyString& insert(size_t pos, const MyString& str, size_t subpos, size_t sublen = msize);
	// Inserts a copy of a substring of str at "pos". The substring is the portion of "str" that
	// begins at the character position subpos and spans sublen characters (or until the end of str).
	// example: str = "to be the question", str3 = "or not to be"
	// str.insert(6,str3,3,4); // to be (not )the question
	// *Return the reference of itself

	MyString& erase(size_t pos, size_t len = msize);
	// Erases the portion of the string value that begins at the character position pos and spans len characters 
	// (or until the end of the string, if either the content is too short or if len is string::msize.)
	// *Return the reference of itself

	size_t find(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first occurrence of the string str.
	// Return Value: The position of the first character of the first match. If no matches were found, the function returns MyString::msize.

	size_t find_first_of(const MyString& str, size_t pos = 0) const;
	// Searches the portion of the string value that begins at the character position "pos" until the end of the string
	// for the first character that matches *any* of the characters of the string str.
	// Return Value: The position of the first character that matches. If no matches are found, the function returns MyString::msize.

	//You may add several helper functions or operators here
	//...
}; // end class MyString

#endif